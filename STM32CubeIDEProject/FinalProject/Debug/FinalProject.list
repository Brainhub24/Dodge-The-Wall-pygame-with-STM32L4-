
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007e630  0800c550  0800c550  0001c550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808ab80  0808ab80  000a14e8  2**0
                  CONTENTS
  4 .ARM          00000008  0808ab80  0808ab80  0009ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0808ab88  0808ab88  000a14e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0808ab88  0808ab88  0009ab88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0808ab8c  0808ab8c  0009ab8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014e8  20000000  0808ab90  000a0000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  200014e8  0808c078  000a14e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a98  0808c078  000a1a98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000a14e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000a1518  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a7b2  00000000  00000000  000a155b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000380c  00000000  00000000  000bbd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001840  00000000  00000000  000bf520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ec  00000000  00000000  000c0d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029cea  00000000  00000000  000c204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c290  00000000  00000000  000ebd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdbcc  00000000  00000000  00107fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bec  00000000  00000000  00205b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0020d780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200014e8 	.word	0x200014e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c538 	.word	0x0800c538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200014ec 	.word	0x200014ec
 80001cc:	0800c538 	.word	0x0800c538

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b9a6 	b.w	8000f9c <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9e08      	ldr	r6, [sp, #32]
 8000cda:	460d      	mov	r5, r1
 8000cdc:	4604      	mov	r4, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14a      	bne.n	8000d7a <__udivmoddi4+0xa6>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4694      	mov	ip, r2
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0xe2>
 8000cea:	fab2 f382 	clz	r3, r2
 8000cee:	b143      	cbz	r3, 8000d02 <__udivmoddi4+0x2e>
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	f1c3 0220 	rsb	r2, r3, #32
 8000cf8:	409f      	lsls	r7, r3
 8000cfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cfe:	4317      	orrs	r7, r2
 8000d00:	409c      	lsls	r4, r3
 8000d02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d06:	fa1f f58c 	uxth.w	r5, ip
 8000d0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d0e:	0c22      	lsrs	r2, r4, #16
 8000d10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d18:	fb01 f005 	mul.w	r0, r1, r5
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	d90a      	bls.n	8000d36 <__udivmoddi4+0x62>
 8000d20:	eb1c 0202 	adds.w	r2, ip, r2
 8000d24:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d28:	f080 811c 	bcs.w	8000f64 <__udivmoddi4+0x290>
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	f240 8119 	bls.w	8000f64 <__udivmoddi4+0x290>
 8000d32:	3902      	subs	r1, #2
 8000d34:	4462      	add	r2, ip
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	b2a4      	uxth	r4, r4
 8000d3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d46:	fb00 f505 	mul.w	r5, r0, r5
 8000d4a:	42a5      	cmp	r5, r4
 8000d4c:	d90a      	bls.n	8000d64 <__udivmoddi4+0x90>
 8000d4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d52:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x294>
 8000d5a:	42a5      	cmp	r5, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x294>
 8000d60:	4464      	add	r4, ip
 8000d62:	3802      	subs	r0, #2
 8000d64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d68:	1b64      	subs	r4, r4, r5
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	b11e      	cbz	r6, 8000d76 <__udivmoddi4+0xa2>
 8000d6e:	40dc      	lsrs	r4, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	e9c6 4300 	strd	r4, r3, [r6]
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0xbc>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f000 80ed 	beq.w	8000f5e <__udivmoddi4+0x28a>
 8000d84:	2100      	movs	r1, #0
 8000d86:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	fab3 f183 	clz	r1, r3
 8000d94:	2900      	cmp	r1, #0
 8000d96:	d149      	bne.n	8000e2c <__udivmoddi4+0x158>
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d302      	bcc.n	8000da2 <__udivmoddi4+0xce>
 8000d9c:	4282      	cmp	r2, r0
 8000d9e:	f200 80f8 	bhi.w	8000f92 <__udivmoddi4+0x2be>
 8000da2:	1a84      	subs	r4, r0, r2
 8000da4:	eb65 0203 	sbc.w	r2, r5, r3
 8000da8:	2001      	movs	r0, #1
 8000daa:	4617      	mov	r7, r2
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d0e2      	beq.n	8000d76 <__udivmoddi4+0xa2>
 8000db0:	e9c6 4700 	strd	r4, r7, [r6]
 8000db4:	e7df      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000db6:	b902      	cbnz	r2, 8000dba <__udivmoddi4+0xe6>
 8000db8:	deff      	udf	#255	; 0xff
 8000dba:	fab2 f382 	clz	r3, r2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f040 8090 	bne.w	8000ee4 <__udivmoddi4+0x210>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd8:	0c22      	lsrs	r2, r4, #16
 8000dda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dde:	fb0e f005 	mul.w	r0, lr, r5
 8000de2:	4290      	cmp	r0, r2
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x124>
 8000de6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dea:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x122>
 8000df0:	4290      	cmp	r0, r2
 8000df2:	f200 80cb 	bhi.w	8000f8c <__udivmoddi4+0x2b8>
 8000df6:	4645      	mov	r5, r8
 8000df8:	1a12      	subs	r2, r2, r0
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e00:	fb07 2210 	mls	r2, r7, r0, r2
 8000e04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e08:	fb0e fe00 	mul.w	lr, lr, r0
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x14e>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e18:	d202      	bcs.n	8000e20 <__udivmoddi4+0x14c>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f200 80bb 	bhi.w	8000f96 <__udivmoddi4+0x2c2>
 8000e20:	4610      	mov	r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2a:	e79f      	b.n	8000d6c <__udivmoddi4+0x98>
 8000e2c:	f1c1 0720 	rsb	r7, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e42:	40fd      	lsrs	r5, r7
 8000e44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e4e:	fa1f fe8c 	uxth.w	lr, ip
 8000e52:	fb09 5518 	mls	r5, r9, r8, r5
 8000e56:	0c1c      	lsrs	r4, r3, #16
 8000e58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6a:	d90b      	bls.n	8000e84 <__udivmoddi4+0x1b0>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e74:	f080 8088 	bcs.w	8000f88 <__udivmoddi4+0x2b4>
 8000e78:	42a5      	cmp	r5, r4
 8000e7a:	f240 8085 	bls.w	8000f88 <__udivmoddi4+0x2b4>
 8000e7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e82:	4464      	add	r4, ip
 8000e84:	1b64      	subs	r4, r4, r5
 8000e86:	b29d      	uxth	r5, r3
 8000e88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1da>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ea4:	d26c      	bcs.n	8000f80 <__udivmoddi4+0x2ac>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	d96a      	bls.n	8000f80 <__udivmoddi4+0x2ac>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000eb6:	eba4 040e 	sub.w	r4, r4, lr
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	46c8      	mov	r8, r9
 8000ebe:	46ae      	mov	lr, r5
 8000ec0:	d356      	bcc.n	8000f70 <__udivmoddi4+0x29c>
 8000ec2:	d053      	beq.n	8000f6c <__udivmoddi4+0x298>
 8000ec4:	b156      	cbz	r6, 8000edc <__udivmoddi4+0x208>
 8000ec6:	ebb0 0208 	subs.w	r2, r0, r8
 8000eca:	eb64 040e 	sbc.w	r4, r4, lr
 8000ece:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed2:	40ca      	lsrs	r2, r1
 8000ed4:	40cc      	lsrs	r4, r1
 8000ed6:	4317      	orrs	r7, r2
 8000ed8:	e9c6 7400 	strd	r7, r4, [r6]
 8000edc:	4618      	mov	r0, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee4:	f1c3 0120 	rsb	r1, r3, #32
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef4:	409d      	lsls	r5, r3
 8000ef6:	432a      	orrs	r2, r5
 8000ef8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f04:	fb07 1510 	mls	r5, r7, r0, r1
 8000f08:	0c11      	lsrs	r1, r2, #16
 8000f0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f12:	428d      	cmp	r5, r1
 8000f14:	fa04 f403 	lsl.w	r4, r4, r3
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x258>
 8000f1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f22:	d22f      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f24:	428d      	cmp	r5, r1
 8000f26:	d92d      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1b49      	subs	r1, r1, r5
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f34:	fb07 1115 	mls	r1, r7, r5, r1
 8000f38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f40:	4291      	cmp	r1, r2
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x282>
 8000f44:	eb1c 0202 	adds.w	r2, ip, r2
 8000f48:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f4c:	d216      	bcs.n	8000f7c <__udivmoddi4+0x2a8>
 8000f4e:	4291      	cmp	r1, r2
 8000f50:	d914      	bls.n	8000f7c <__udivmoddi4+0x2a8>
 8000f52:	3d02      	subs	r5, #2
 8000f54:	4462      	add	r2, ip
 8000f56:	1a52      	subs	r2, r2, r1
 8000f58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f5c:	e738      	b.n	8000dd0 <__udivmoddi4+0xfc>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xa2>
 8000f64:	4639      	mov	r1, r7
 8000f66:	e6e6      	b.n	8000d36 <__udivmoddi4+0x62>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x90>
 8000f6c:	4548      	cmp	r0, r9
 8000f6e:	d2a9      	bcs.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f70:	ebb9 0802 	subs.w	r8, r9, r2
 8000f74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	e7a3      	b.n	8000ec4 <__udivmoddi4+0x1f0>
 8000f7c:	4645      	mov	r5, r8
 8000f7e:	e7ea      	b.n	8000f56 <__udivmoddi4+0x282>
 8000f80:	462b      	mov	r3, r5
 8000f82:	e794      	b.n	8000eae <__udivmoddi4+0x1da>
 8000f84:	4640      	mov	r0, r8
 8000f86:	e7d1      	b.n	8000f2c <__udivmoddi4+0x258>
 8000f88:	46d0      	mov	r8, sl
 8000f8a:	e77b      	b.n	8000e84 <__udivmoddi4+0x1b0>
 8000f8c:	3d02      	subs	r5, #2
 8000f8e:	4462      	add	r2, ip
 8000f90:	e732      	b.n	8000df8 <__udivmoddi4+0x124>
 8000f92:	4608      	mov	r0, r1
 8000f94:	e70a      	b.n	8000dac <__udivmoddi4+0xd8>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	e742      	b.n	8000e22 <__udivmoddi4+0x14e>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f002 f93a 	bl	800321c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f87a 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 fad6 	bl	800155c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fb0:	f000 faa4 	bl	80014fc <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000fb4:	f000 f902 	bl	80011bc <MX_I2C3_Init>
  MX_TIM2_Init();
 8000fb8:	f000 f966 	bl	8001288 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000fbc:	f000 fa00 	bl	80013c0 <MX_TIM4_Init>
  MX_DAC1_Init();
 8000fc0:	f000 f8c0 	bl	8001144 <MX_DAC1_Init>
  MX_TIM3_Init();
 8000fc4:	f000 f9ae 	bl	8001324 <MX_TIM3_Init>
  MX_QUADSPI_Init();
 8000fc8:	f000 f938 	bl	800123c <MX_QUADSPI_Init>
  MX_TIM5_Init();
 8000fcc:	f000 fa46 	bl	800145c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000fd0:	f001 f848 	bl	8002064 <BSP_ACCELERO_Init>
  BSP_QSPI_Init();
 8000fd4:	f001 f89c 	bl	8002110 <BSP_QSPI_Init>
  MX_USART1_UART_Init();
 8000fd8:	f000 fa90 	bl	80014fc <MX_USART1_UART_Init>
  HAL_UART_Init(&huart1);
 8000fdc:	4823      	ldr	r0, [pc, #140]	; (800106c <main+0xcc>)
 8000fde:	f006 faa5 	bl	800752c <HAL_UART_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fe2:	4823      	ldr	r0, [pc, #140]	; (8001070 <main+0xd0>)
 8000fe4:	f005 fe64 	bl	8006cb0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000fe8:	4822      	ldr	r0, [pc, #136]	; (8001074 <main+0xd4>)
 8000fea:	f005 fe61 	bl	8006cb0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8000fee:	4822      	ldr	r0, [pc, #136]	; (8001078 <main+0xd8>)
 8000ff0:	f005 fe5e 	bl	8006cb0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, uart_rx_buffer, 1);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4921      	ldr	r1, [pc, #132]	; (800107c <main+0xdc>)
 8000ff8:	481c      	ldr	r0, [pc, #112]	; (800106c <main+0xcc>)
 8000ffa:	f006 fb6f 	bl	80076dc <HAL_UART_Receive_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000ffe:	2110      	movs	r1, #16
 8001000:	481f      	ldr	r0, [pc, #124]	; (8001080 <main+0xe0>)
 8001002:	f002 fad6 	bl	80035b2 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001006:	481f      	ldr	r0, [pc, #124]	; (8001084 <main+0xe4>)
 8001008:	f005 fe52 	bl	8006cb0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (state == 0 && stopped == 0) {
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <main+0xe8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d118      	bne.n	8001046 <main+0xa6>
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <main+0xec>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d114      	bne.n	8001046 <main+0xa6>
		  started = 0;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <main+0xf0>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
		  HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
 8001022:	2110      	movs	r1, #16
 8001024:	4816      	ldr	r0, [pc, #88]	; (8001080 <main+0xe0>)
 8001026:	f002 fb11 	bl	800364c <HAL_DAC_Stop>
		  bgm_index = 0;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <main+0xf4>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
		  explosion_index = -1;
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <main+0xf8>)
 8001032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001036:	601a      	str	r2, [r3, #0]
		  coin_index = -1;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <main+0xfc>)
 800103a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103e:	601a      	str	r2, [r3, #0]
		  stopped = 1;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <main+0xec>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
	  }
	  if (state == 1 && started == 0) {
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <main+0xe8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d1de      	bne.n	800100c <main+0x6c>
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <main+0xf0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1da      	bne.n	800100c <main+0x6c>
		  stopped = 0;
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <main+0xec>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
		  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800105c:	2110      	movs	r1, #16
 800105e:	4808      	ldr	r0, [pc, #32]	; (8001080 <main+0xe0>)
 8001060:	f002 faa7 	bl	80035b2 <HAL_DAC_Start>
		  started = 1;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <main+0xf0>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
	  if (state == 0 && stopped == 0) {
 800106a:	e7cf      	b.n	800100c <main+0x6c>
 800106c:	200016e0 	.word	0x200016e0
 8001070:	200015b0 	.word	0x200015b0
 8001074:	20001648 	.word	0x20001648
 8001078:	20001694 	.word	0x20001694
 800107c:	20001814 	.word	0x20001814
 8001080:	20001504 	.word	0x20001504
 8001084:	200015fc 	.word	0x200015fc
 8001088:	2000181c 	.word	0x2000181c
 800108c:	20001820 	.word	0x20001820
 8001090:	20001824 	.word	0x20001824
 8001094:	20001818 	.word	0x20001818
 8001098:	200012b4 	.word	0x200012b4
 800109c:	200012bc 	.word	0x200012bc

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b096      	sub	sp, #88	; 0x58
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	2244      	movs	r2, #68	; 0x44
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f008 fde6 	bl	8009c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010c6:	f003 fd9d 	bl	8004c04 <HAL_PWREx_ControlVoltageScaling>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010d0:	f000 fe72 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010d4:	2310      	movs	r3, #16
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010e0:	2360      	movs	r3, #96	; 0x60
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010f0:	2328      	movs	r3, #40	; 0x28
 80010f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010f4:	2307      	movs	r3, #7
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4618      	mov	r0, r3
 8001106:	f004 fabf 	bl	8005688 <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001110:	f000 fe52 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001118:	2303      	movs	r3, #3
 800111a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	2104      	movs	r1, #4
 800112c:	4618      	mov	r0, r3
 800112e:	f004 fe87 	bl	8005e40 <HAL_RCC_ClockConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001138:	f000 fe3e 	bl	8001db8 <Error_Handler>
  }
}
 800113c:	bf00      	nop
 800113e:	3758      	adds	r7, #88	; 0x58
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2224      	movs	r2, #36	; 0x24
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f008 fd95 	bl	8009c80 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_DAC1_Init+0x70>)
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <MX_DAC1_Init+0x74>)
 800115a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800115c:	4815      	ldr	r0, [pc, #84]	; (80011b4 <MX_DAC1_Init+0x70>)
 800115e:	f002 fa06 	bl	800356e <HAL_DAC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001168:	f000 fe26 	bl	8001db8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_DAC1_Init+0x70>)
 8001188:	f002 faa2 	bl	80036d0 <HAL_DAC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001192:	f000 fe11 	bl	8001db8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2210      	movs	r2, #16
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_DAC1_Init+0x70>)
 800119e:	f002 fa97 	bl	80036d0 <HAL_DAC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80011a8:	f000 fe06 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20001504 	.word	0x20001504
 80011b8:	40007400 	.word	0x40007400

080011bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C3_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_I2C3_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_I2C3_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <MX_I2C3_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C3_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_I2C3_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C3_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_I2C3_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C3_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C3_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C3_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <MX_I2C3_Init+0x74>)
 80011f8:	f002 feae 	bl	8003f58 <HAL_I2C_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 fdd9 	bl	8001db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	2100      	movs	r1, #0
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_I2C3_Init+0x74>)
 800120a:	f003 fc55 	bl	8004ab8 <HAL_I2CEx_ConfigAnalogFilter>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 fdd0 	bl	8001db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_I2C3_Init+0x74>)
 800121c:	f003 fc97 	bl	8004b4e <HAL_I2CEx_ConfigDigitalFilter>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 fdc7 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20001518 	.word	0x20001518
 8001234:	40005c00 	.word	0x40005c00
 8001238:	10909cec 	.word	0x10909cec

0800123c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_QUADSPI_Init+0x44>)
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <MX_QUADSPI_Init+0x48>)
 8001244:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_QUADSPI_Init+0x44>)
 8001248:	22ff      	movs	r2, #255	; 0xff
 800124a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_QUADSPI_Init+0x44>)
 800124e:	2201      	movs	r2, #1
 8001250:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_QUADSPI_Init+0x44>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_QUADSPI_Init+0x44>)
 800125a:	2201      	movs	r2, #1
 800125c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_QUADSPI_Init+0x44>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_QUADSPI_Init+0x44>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_QUADSPI_Init+0x44>)
 800126c:	f003 fd20 	bl	8004cb0 <HAL_QSPI_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001276:	f000 fd9f 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000156c 	.word	0x2000156c
 8001284:	a0001000 	.word	0xa0001000

08001288 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <MX_TIM2_Init+0x94>)
 80012a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_TIM2_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_TIM2_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000000;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_TIM2_Init+0x94>)
 80012bc:	4a18      	ldr	r2, [pc, #96]	; (8001320 <MX_TIM2_Init+0x98>)
 80012be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_TIM2_Init+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_TIM2_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012cc:	4813      	ldr	r0, [pc, #76]	; (800131c <MX_TIM2_Init+0x94>)
 80012ce:	f005 fc97 	bl	8006c00 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012d8:	f000 fd6e 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0310 	add.w	r3, r7, #16
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_TIM2_Init+0x94>)
 80012ea:	f005 fe53 	bl	8006f94 <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f4:	f000 fd60 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012f8:	2320      	movs	r3, #32
 80012fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_TIM2_Init+0x94>)
 8001306:	f006 f86b 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 fd52 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200015b0 	.word	0x200015b0
 8001320:	001e8480 	.word	0x001e8480

08001324 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM3_Init+0x94>)
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <MX_TIM3_Init+0x98>)
 8001346:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_TIM3_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_TIM3_Init+0x94>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_TIM3_Init+0x94>)
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_TIM3_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_TIM3_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001368:	4813      	ldr	r0, [pc, #76]	; (80013b8 <MX_TIM3_Init+0x94>)
 800136a:	f005 fc49 	bl	8006c00 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001374:	f000 fd20 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM3_Init+0x94>)
 8001386:	f005 fe05 	bl	8006f94 <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001390:	f000 fd12 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001394:	2320      	movs	r3, #32
 8001396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM3_Init+0x94>)
 80013a2:	f006 f81d 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013ac:	f000 fd04 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200015fc 	.word	0x200015fc
 80013bc:	40000400 	.word	0x40000400

080013c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_TIM4_Init+0x94>)
 80013e0:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <MX_TIM4_Init+0x98>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_TIM4_Init+0x94>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM4_Init+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 13333;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_TIM4_Init+0x94>)
 80013f2:	f243 4215 	movw	r2, #13333	; 0x3415
 80013f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_TIM4_Init+0x94>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_TIM4_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_TIM4_Init+0x94>)
 8001406:	f005 fbfb 	bl	8006c00 <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001410:	f000 fcd2 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_TIM4_Init+0x94>)
 8001422:	f005 fdb7 	bl	8006f94 <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800142c:	f000 fcc4 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001430:	2320      	movs	r3, #32
 8001432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_TIM4_Init+0x94>)
 800143e:	f005 ffcf 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001448:	f000 fcb6 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3720      	adds	r7, #32
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20001648 	.word	0x20001648
 8001458:	40000800 	.word	0x40000800

0800145c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_TIM5_Init+0x98>)
 800147c:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <MX_TIM5_Init+0x9c>)
 800147e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7999;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_TIM5_Init+0x98>)
 8001482:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001486:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM5_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_TIM5_Init+0x98>)
 8001490:	f241 3288 	movw	r2, #5000	; 0x1388
 8001494:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_TIM5_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM5_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014a2:	4814      	ldr	r0, [pc, #80]	; (80014f4 <MX_TIM5_Init+0x98>)
 80014a4:	f005 fbac 	bl	8006c00 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80014ae:	f000 fc83 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_TIM5_Init+0x98>)
 80014c0:	f005 fd68 	bl	8006f94 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80014ca:	f000 fc75 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ce:	2320      	movs	r3, #32
 80014d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_TIM5_Init+0x98>)
 80014dc:	f005 ff80 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80014e6:	f000 fc67 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20001694 	.word	0x20001694
 80014f8:	40000c00 	.word	0x40000c00

080014fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <MX_USART1_UART_Init+0x58>)
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <MX_USART1_UART_Init+0x5c>)
 8001504:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_USART1_UART_Init+0x58>)
 8001508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800150c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USART1_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_USART1_UART_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USART1_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USART1_UART_Init+0x58>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART1_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USART1_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART1_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USART1_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USART1_UART_Init+0x58>)
 8001540:	f005 fff4 	bl	800752c <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800154a:	f000 fc35 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200016e0 	.word	0x200016e0
 8001558:	40013800 	.word	0x40013800

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_GPIO_Init+0x74>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a1a      	ldr	r2, [pc, #104]	; (80015d0 <MX_GPIO_Init+0x74>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_GPIO_Init+0x74>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_GPIO_Init+0x74>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <MX_GPIO_Init+0x74>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_GPIO_Init+0x74>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_GPIO_Init+0x74>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <MX_GPIO_Init+0x74>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_GPIO_Init+0x74>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_GPIO_Init+0x74>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <MX_GPIO_Init+0x74>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_GPIO_Init+0x74>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	00000000 	.word	0x00000000

080015d8 <calculate_tilt_angles>:

/* USER CODE BEGIN 4 */

// Function to calculate roll and pitch
void calculate_tilt_angles(int16_t X, int16_t Y, int16_t Z, float *roll, float *pitch) {
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	4603      	mov	r3, r0
 80015e2:	81fb      	strh	r3, [r7, #14]
 80015e4:	460b      	mov	r3, r1
 80015e6:	81bb      	strh	r3, [r7, #12]
 80015e8:	4613      	mov	r3, r2
 80015ea:	817b      	strh	r3, [r7, #10]
    // Convert int16_t data to float
    float fX = (float)X;
 80015ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	edc7 7a07 	vstr	s15, [r7, #28]
    float fY = (float)Y;
 80015fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	edc7 7a06 	vstr	s15, [r7, #24]
    float fZ = (float)Z;
 800160c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001618:	edc7 7a05 	vstr	s15, [r7, #20]
    float a = 0.0;
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	613b      	str	r3, [r7, #16]

    // Roll (Tilt Left/Right) in degrees
    ITM_Port32(31) = 1;
 8001622:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <calculate_tilt_angles+0x120>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
    *roll = atan2(fY, fZ) * (180 / M_PI);
 8001628:	69b8      	ldr	r0, [r7, #24]
 800162a:	f7fe ff8d 	bl	8000548 <__aeabi_f2d>
 800162e:	4604      	mov	r4, r0
 8001630:	460d      	mov	r5, r1
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7fe ff88 	bl	8000548 <__aeabi_f2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	ec43 2b11 	vmov	d1, r2, r3
 8001640:	ec45 4b10 	vmov	d0, r4, r5
 8001644:	f00a fbfc 	bl	800be40 <atan2>
 8001648:	ec51 0b10 	vmov	r0, r1, d0
 800164c:	a328      	add	r3, pc, #160	; (adr r3, 80016f0 <calculate_tilt_angles+0x118>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe ffd1 	bl	80005f8 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fa9b 	bl	8000b98 <__aeabi_d2f>
 8001662:	4602      	mov	r2, r0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	601a      	str	r2, [r3, #0]
//    my_atan2(fY, fZ, roll);
//    *roll = *roll * (180 / M_PI);
//---------------ASM Enhancement-------------

    // Pitch (Tilt Forward/Backward) in degrees
    *pitch = atan2(-fX, sqrt(fY*fY + fZ*fZ)) * (180 / M_PI);
 8001668:	edd7 7a07 	vldr	s15, [r7, #28]
 800166c:	eef1 7a67 	vneg.f32	s15, s15
 8001670:	ee17 3a90 	vmov	r3, s15
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff67 	bl	8000548 <__aeabi_f2d>
 800167a:	4604      	mov	r4, r0
 800167c:	460d      	mov	r5, r1
 800167e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001682:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001686:	edd7 7a05 	vldr	s15, [r7, #20]
 800168a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	ee17 0a90 	vmov	r0, s15
 8001696:	f7fe ff57 	bl	8000548 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	ec43 2b10 	vmov	d0, r2, r3
 80016a2:	f00a fc97 	bl	800bfd4 <sqrt>
 80016a6:	eeb0 7a40 	vmov.f32	s14, s0
 80016aa:	eef0 7a60 	vmov.f32	s15, s1
 80016ae:	eeb0 1a47 	vmov.f32	s2, s14
 80016b2:	eef0 1a67 	vmov.f32	s3, s15
 80016b6:	ec45 4b10 	vmov	d0, r4, r5
 80016ba:	f00a fbc1 	bl	800be40 <atan2>
 80016be:	ec51 0b10 	vmov	r0, r1, d0
 80016c2:	a30b      	add	r3, pc, #44	; (adr r3, 80016f0 <calculate_tilt_angles+0x118>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ff96 	bl	80005f8 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa60 	bl	8000b98 <__aeabi_d2f>
 80016d8:	4602      	mov	r2, r0
 80016da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016dc:	601a      	str	r2, [r3, #0]
//---------------ASM Enhancement-------------
//    my_atan2(-fX, sqrt(fY*fY + fZ*fZ), pitch);
//    *pitch = *pitch * (180 / M_PI);
//---------------ASM Enhancement-------------
    ITM_Port32(31) = 2;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <calculate_tilt_angles+0x120>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdb0      	pop	{r4, r5, r7, pc}
 80016ec:	f3af 8000 	nop.w
 80016f0:	1a63c1f8 	.word	0x1a63c1f8
 80016f4:	404ca5dc 	.word	0x404ca5dc
 80016f8:	e000007c 	.word	0xe000007c

080016fc <HAL_TIM_PeriodElapsedCallback>:
		last = 0;
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af04      	add	r7, sp, #16
 8001702:	6078      	str	r0, [r7, #4]
	if (state == 1){
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	f040 809a 	bne.w	8001842 <HAL_TIM_PeriodElapsedCallback+0x146>
		  if (htim->Instance == TIM2) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001716:	d12d      	bne.n	8001774 <HAL_TIM_PeriodElapsedCallback+0x78>
		    BSP_ACCELERO_AccGetXYZ(dataXYZ_accel);
 8001718:	486b      	ldr	r0, [pc, #428]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800171a:	f000 fce1 	bl	80020e0 <BSP_ACCELERO_AccGetXYZ>
		    calculate_tilt_angles(dataXYZ_accel[0], dataXYZ_accel[1], dataXYZ_accel[2], &roll, &pitch);
 800171e:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001720:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001726:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800172a:	4b67      	ldr	r3, [pc, #412]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800172c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001730:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001736:	f7ff ff4f 	bl	80015d8 <calculate_tilt_angles>
		    sprintf(buffer, "\r\n roll and pitch, %d, %d", (int) roll, (int) pitch);
 800173a:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001744:	4b61      	ldr	r3, [pc, #388]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174e:	ee17 3a90 	vmov	r3, s15
 8001752:	ee17 2a10 	vmov	r2, s14
 8001756:	495f      	ldr	r1, [pc, #380]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001758:	485f      	ldr	r0, [pc, #380]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800175a:	f007 faad 	bl	8008cb8 <siprintf>
		    HAL_UART_Transmit(&huart1, buffer, (uint16_t) strlen(buffer), 50);
 800175e:	485e      	ldr	r0, [pc, #376]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001760:	f7fe fd36 	bl	80001d0 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	2332      	movs	r3, #50	; 0x32
 800176a:	495b      	ldr	r1, [pc, #364]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800176c:	485b      	ldr	r0, [pc, #364]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800176e:	f005 ff2b 	bl	80075c8 <HAL_UART_Transmit>
					  (int)rank_time[1],
					  (int)rank_time[2]);
			  HAL_UART_Transmit(&huart1, rankbuffer, (uint16_t) strlen(rankbuffer), 80);
		  }
	}
}
 8001772:	e0a2      	b.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
		  else if (htim->Instance == TIM4) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a59      	ldr	r2, [pc, #356]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d144      	bne.n	8001808 <HAL_TIM_PeriodElapsedCallback+0x10c>
			  	  if (explosion_index != -1) {
 800177e:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001786:	d01d      	beq.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0xc8>
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, explosion[explosion_index]);
 8001788:	4b56      	ldr	r3, [pc, #344]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a56      	ldr	r2, [pc, #344]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	2208      	movs	r2, #8
 8001792:	2100      	movs	r1, #0
 8001794:	4855      	ldr	r0, [pc, #340]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001796:	f001 ff76 	bl	8003686 <HAL_DAC_SetValue>
						explosion_index++;
 800179a:	4b52      	ldr	r3, [pc, #328]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a50      	ldr	r2, [pc, #320]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80017a2:	6013      	str	r3, [r2, #0]
						if (explosion_index >= explosion_size) {
 80017a4:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b51      	ldr	r3, [pc, #324]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f2c0 8084 	blt.w	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
							explosion_index = -1;
 80017b2:	4b4c      	ldr	r3, [pc, #304]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b8:	601a      	str	r2, [r3, #0]
							HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 80017ba:	2100      	movs	r1, #0
 80017bc:	484b      	ldr	r0, [pc, #300]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80017be:	f001 ff45 	bl	800364c <HAL_DAC_Stop>
}
 80017c2:	e07a      	b.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
			  	  } else if (coin_index != -1) {
 80017c4:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017cc:	d075      	beq.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
						HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, coin[coin_index]);
 80017ce:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	2208      	movs	r2, #8
 80017d8:	2100      	movs	r1, #0
 80017da:	4844      	ldr	r0, [pc, #272]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80017dc:	f001 ff53 	bl	8003686 <HAL_DAC_SetValue>
						coin_index++;
 80017e0:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80017e8:	6013      	str	r3, [r2, #0]
						if (coin_index >= coin_size) {
 80017ea:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x200>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	db61      	blt.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
							coin_index = -1;
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017fc:	601a      	str	r2, [r3, #0]
							HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 80017fe:	2100      	movs	r1, #0
 8001800:	483a      	ldr	r0, [pc, #232]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001802:	f001 ff23 	bl	800364c <HAL_DAC_Stop>
}
 8001806:	e058      	b.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
		  else if (htim->Instance == TIM3) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d153      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, bgm[bgm_index]);
 8001812:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a3c      	ldr	r2, [pc, #240]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001818:	5cd3      	ldrb	r3, [r2, r3]
 800181a:	2208      	movs	r2, #8
 800181c:	2110      	movs	r1, #16
 800181e:	4833      	ldr	r0, [pc, #204]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001820:	f001 ff31 	bl	8003686 <HAL_DAC_SetValue>
				bgm_index++;
 8001824:	4b37      	ldr	r3, [pc, #220]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a36      	ldr	r2, [pc, #216]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800182c:	6013      	str	r3, [r2, #0]
				if (bgm_index >= bgm_size) {
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	db3f      	blt.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
					bgm_index = 0;
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
}
 8001840:	e03b      	b.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
		  if (htim->Instance == TIM5) {
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a32      	ldr	r2, [pc, #200]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d136      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x1be>
			  read_coin();
 800184c:	f000 f960 	bl	8001b10 <read_coin>
			  read_playtime();
 8001850:	f000 f9fc 	bl	8001c4c <read_playtime>
			  memset(rankbuffer, 0, 80);
 8001854:	2250      	movs	r2, #80	; 0x50
 8001856:	2100      	movs	r1, #0
 8001858:	482e      	ldr	r0, [pc, #184]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800185a:	f008 fa11 	bl	8009c80 <memset>
			  sprintf(rankbuffer, "\r\n rank, %d, %d, %d, %d, %d, %d",
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001864:	6859      	ldr	r1, [r3, #4]
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001868:	689b      	ldr	r3, [r3, #8]
					  (int)rank_time[0],
 800186a:	482c      	ldr	r0, [pc, #176]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800186c:	edd0 7a00 	vldr	s15, [r0]
			  sprintf(rankbuffer, "\r\n rank, %d, %d, %d, %d, %d, %d",
 8001870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001874:	ee17 4a90 	vmov	r4, s15
					  (int)rank_time[1],
 8001878:	4828      	ldr	r0, [pc, #160]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800187a:	edd0 7a01 	vldr	s15, [r0, #4]
			  sprintf(rankbuffer, "\r\n rank, %d, %d, %d, %d, %d, %d",
 800187e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001882:	ee17 5a90 	vmov	r5, s15
					  (int)rank_time[2]);
 8001886:	4825      	ldr	r0, [pc, #148]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001888:	edd0 7a02 	vldr	s15, [r0, #8]
			  sprintf(rankbuffer, "\r\n rank, %d, %d, %d, %d, %d, %d",
 800188c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001890:	ee17 0a90 	vmov	r0, s15
 8001894:	9003      	str	r0, [sp, #12]
 8001896:	9502      	str	r5, [sp, #8]
 8001898:	9401      	str	r4, [sp, #4]
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	460b      	mov	r3, r1
 800189e:	4920      	ldr	r1, [pc, #128]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80018a0:	481c      	ldr	r0, [pc, #112]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80018a2:	f007 fa09 	bl	8008cb8 <siprintf>
			  HAL_UART_Transmit(&huart1, rankbuffer, (uint16_t) strlen(rankbuffer), 80);
 80018a6:	481b      	ldr	r0, [pc, #108]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80018a8:	f7fe fc92 	bl	80001d0 <strlen>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	2350      	movs	r3, #80	; 0x50
 80018b2:	4918      	ldr	r1, [pc, #96]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80018b6:	f005 fe87 	bl	80075c8 <HAL_UART_Transmit>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bdb0      	pop	{r4, r5, r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000181c 	.word	0x2000181c
 80018c8:	20001768 	.word	0x20001768
 80018cc:	200017a8 	.word	0x200017a8
 80018d0:	200017a4 	.word	0x200017a4
 80018d4:	0800c550 	.word	0x0800c550
 80018d8:	20001770 	.word	0x20001770
 80018dc:	200016e0 	.word	0x200016e0
 80018e0:	40000800 	.word	0x40000800
 80018e4:	200012b4 	.word	0x200012b4
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20001504 	.word	0x20001504
 80018f0:	200012b8 	.word	0x200012b8
 80018f4:	200012bc 	.word	0x200012bc
 80018f8:	20000cb0 	.word	0x20000cb0
 80018fc:	200012c0 	.word	0x200012c0
 8001900:	40000400 	.word	0x40000400
 8001904:	20001818 	.word	0x20001818
 8001908:	0800c5bc 	.word	0x0800c5bc
 800190c:	200012c4 	.word	0x200012c4
 8001910:	40000c00 	.word	0x40000c00
 8001914:	20001858 	.word	0x20001858
 8001918:	20001828 	.word	0x20001828
 800191c:	20001840 	.word	0x20001840
 8001920:	0800c56c 	.word	0x0800c56c

08001924 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {  // Check if it is the correct UART
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a09      	ldr	r2, [pc, #36]	; (8001958 <HAL_UART_RxCpltCallback+0x34>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d10b      	bne.n	800194e <HAL_UART_RxCpltCallback+0x2a>
        char received_char = uart_rx_buffer[0];
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_UART_RxCpltCallback+0x38>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	73fb      	strb	r3, [r7, #15]

        UART_Receive_Callback(received_char); // Process the received character
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f810 	bl	8001964 <UART_Receive_Callback>

        HAL_UART_Receive_IT(&huart1, uart_rx_buffer, 1); // Set up next reception
 8001944:	2201      	movs	r2, #1
 8001946:	4905      	ldr	r1, [pc, #20]	; (800195c <HAL_UART_RxCpltCallback+0x38>)
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_UART_RxCpltCallback+0x3c>)
 800194a:	f005 fec7 	bl	80076dc <HAL_UART_Receive_IT>
    }
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40013800 	.word	0x40013800
 800195c:	20001814 	.word	0x20001814
 8001960:	200016e0 	.word	0x200016e0

08001964 <UART_Receive_Callback>:


void UART_Receive_Callback(char received_char) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
    if (received_char == '\n') {
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b0a      	cmp	r3, #10
 8001972:	d108      	bne.n	8001986 <UART_Receive_Callback+0x22>
    	reciever_buffer[reciever_buffer_index] = '\0'; // Null-terminate the string
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <UART_Receive_Callback+0x3c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <UART_Receive_Callback+0x40>)
 800197a:	2100      	movs	r1, #0
 800197c:	54d1      	strb	r1, [r2, r3]
        process_command(reciever_buffer);
 800197e:	4809      	ldr	r0, [pc, #36]	; (80019a4 <UART_Receive_Callback+0x40>)
 8001980:	f000 f812 	bl	80019a8 <process_command>
    } else {
    	reciever_buffer[reciever_buffer_index++] = received_char;
    }
}
 8001984:	e007      	b.n	8001996 <UART_Receive_Callback+0x32>
    	reciever_buffer[reciever_buffer_index++] = received_char;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <UART_Receive_Callback+0x3c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <UART_Receive_Callback+0x3c>)
 800198e:	600a      	str	r2, [r1, #0]
 8001990:	4904      	ldr	r1, [pc, #16]	; (80019a4 <UART_Receive_Callback+0x40>)
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	54ca      	strb	r2, [r1, r3]
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20001810 	.word	0x20001810
 80019a4:	200017ac 	.word	0x200017ac

080019a8 <process_command>:

void process_command(char* command) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    if (strncmp(command, "explosion", 9) == 0) {
 80019b0:	2209      	movs	r2, #9
 80019b2:	493f      	ldr	r1, [pc, #252]	; (8001ab0 <process_command+0x108>)
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f008 f8f5 	bl	8009ba4 <strncmp>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d107      	bne.n	80019d0 <process_command+0x28>
    	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80019c0:	2100      	movs	r1, #0
 80019c2:	483c      	ldr	r0, [pc, #240]	; (8001ab4 <process_command+0x10c>)
 80019c4:	f001 fdf5 	bl	80035b2 <HAL_DAC_Start>
    	explosion_index = 0;
 80019c8:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <process_command+0x110>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	e062      	b.n	8001a96 <process_command+0xee>
    } else if (strncmp(command, "coin", 4) == 0) {
 80019d0:	2204      	movs	r2, #4
 80019d2:	493a      	ldr	r1, [pc, #232]	; (8001abc <process_command+0x114>)
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f008 f8e5 	bl	8009ba4 <strncmp>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <process_command+0x48>
    	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80019e0:	2100      	movs	r1, #0
 80019e2:	4834      	ldr	r0, [pc, #208]	; (8001ab4 <process_command+0x10c>)
 80019e4:	f001 fde5 	bl	80035b2 <HAL_DAC_Start>
    	coin_index = 0;
 80019e8:	4b35      	ldr	r3, [pc, #212]	; (8001ac0 <process_command+0x118>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e052      	b.n	8001a96 <process_command+0xee>
    } else if (strncmp(command, "start", 5) == 0) {
 80019f0:	2205      	movs	r2, #5
 80019f2:	4934      	ldr	r1, [pc, #208]	; (8001ac4 <process_command+0x11c>)
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f008 f8d5 	bl	8009ba4 <strncmp>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <process_command+0x60>
    	state = 1;
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <process_command+0x120>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e046      	b.n	8001a96 <process_command+0xee>
    } else if (strncmp(command, "stop", 4) == 0) {
 8001a08:	2204      	movs	r2, #4
 8001a0a:	4930      	ldr	r1, [pc, #192]	; (8001acc <process_command+0x124>)
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f008 f8c9 	bl	8009ba4 <strncmp>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <process_command+0x78>
    	state = 0;
 8001a18:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <process_command+0x120>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e03a      	b.n	8001a96 <process_command+0xee>
    } else if (strncmp(command, "stat,", 5) == 0) {
 8001a20:	2205      	movs	r2, #5
 8001a22:	492b      	ldr	r1, [pc, #172]	; (8001ad0 <process_command+0x128>)
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f008 f8bd 	bl	8009ba4 <strncmp>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d132      	bne.n	8001a96 <process_command+0xee>
        // Parse the survival time and coin count
        char* token = strtok(command, ", ");
 8001a30:	4928      	ldr	r1, [pc, #160]	; (8001ad4 <process_command+0x12c>)
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f008 f8c8 	bl	8009bc8 <strtok>
 8001a38:	60f8      	str	r0, [r7, #12]
        float survival_time = 0.0;
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
        int coin_count = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]

        if (token != NULL) {  // Skip the "stat" part
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d01e      	beq.n	8001a88 <process_command+0xe0>
            token = strtok(NULL, ", ");
 8001a4a:	4922      	ldr	r1, [pc, #136]	; (8001ad4 <process_command+0x12c>)
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f008 f8bb 	bl	8009bc8 <strtok>
 8001a52:	60f8      	str	r0, [r7, #12]
            if (token != NULL) {
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <process_command+0xe0>
                survival_time = atof(token);  // Convert to float
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f007 f924 	bl	8008ca8 <atof>
 8001a60:	ec53 2b10 	vmov	r2, r3, d0
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f896 	bl	8000b98 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	617b      	str	r3, [r7, #20]
                token = strtok(NULL, ", ");
 8001a70:	4918      	ldr	r1, [pc, #96]	; (8001ad4 <process_command+0x12c>)
 8001a72:	2000      	movs	r0, #0
 8001a74:	f008 f8a8 	bl	8009bc8 <strtok>
 8001a78:	60f8      	str	r0, [r7, #12]
                if (token != NULL) {
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <process_command+0xe0>
                    coin_count = atoi(token);  // Convert to int
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f007 f914 	bl	8008cae <atoi>
 8001a86:	6138      	str	r0, [r7, #16]
                }
            }
        }
        write_coin(coin_count);
 8001a88:	6938      	ldr	r0, [r7, #16]
 8001a8a:	f000 f87b 	bl	8001b84 <write_coin>
        write_playtime(survival_time);
 8001a8e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001a92:	f000 f923 	bl	8001cdc <write_playtime>
    }
    memset(reciever_buffer, 0, sizeof(reciever_buffer)); // Clear the buffer
 8001a96:	2264      	movs	r2, #100	; 0x64
 8001a98:	2100      	movs	r1, #0
 8001a9a:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <process_command+0x130>)
 8001a9c:	f008 f8f0 	bl	8009c80 <memset>
    reciever_buffer_index = 0;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <process_command+0x134>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	0800c58c 	.word	0x0800c58c
 8001ab4:	20001504 	.word	0x20001504
 8001ab8:	200012b4 	.word	0x200012b4
 8001abc:	0800c598 	.word	0x0800c598
 8001ac0:	200012bc 	.word	0x200012bc
 8001ac4:	0800c5a0 	.word	0x0800c5a0
 8001ac8:	2000181c 	.word	0x2000181c
 8001acc:	0800c5a8 	.word	0x0800c5a8
 8001ad0:	0800c5b0 	.word	0x0800c5b0
 8001ad4:	0800c5b8 	.word	0x0800c5b8
 8001ad8:	200017ac 	.word	0x200017ac
 8001adc:	20001810 	.word	0x20001810

08001ae0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_UART_ErrorCallback+0x2c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d105      	bne.n	8001afe <HAL_UART_ErrorCallback+0x1e>
        // Identify and log the error
        uint32_t error_code = huart->ErrorCode;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af8:	60fb      	str	r3, [r7, #12]
        int a = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
    }
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40013800 	.word	0x40013800

08001b10 <read_coin>:


void read_coin(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	 if (BSP_QSPI_Read((uint8_t *)rank, addr, sizeof(rank)) != QSPI_OK) {
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <read_coin+0x68>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4817      	ldr	r0, [pc, #92]	; (8001b7c <read_coin+0x6c>)
 8001b20:	f000 fb62 	bl	80021e8 <BSP_QSPI_Read>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <read_coin+0x1e>
		Error_Handler();
 8001b2a:	f000 f945 	bl	8001db8 <Error_Handler>
	 }
	for (int i = 0; i < 3; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	e018      	b.n	8001b66 <read_coin+0x56>
		if (temp[i] < 0) {
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <read_coin+0x70>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	da04      	bge.n	8001b4a <read_coin+0x3a>
			temp[i] = 0; // Replace NaN with a default value, e.g., 0.0
 8001b40:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <read_coin+0x70>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2100      	movs	r1, #0
 8001b46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if (rank[i] < 0) {
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <read_coin+0x6c>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	da04      	bge.n	8001b60 <read_coin+0x50>
			rank[i] = 0; // Replace NaN with a default value, e.g., 0.0
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <read_coin+0x6c>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	dde3      	ble.n	8001b34 <read_coin+0x24>
		}
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200012c8 	.word	0x200012c8
 8001b7c:	20001828 	.word	0x20001828
 8001b80:	20001834 	.word	0x20001834

08001b84 <write_coin>:

void write_coin(int coin_num) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	read_coin();
 8001b8c:	f7ff ffc0 	bl	8001b10 <read_coin>
    // Find the position where coin_num fits into the temp array.
    int16_t insertPos = -1;
 8001b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b94:	81fb      	strh	r3, [r7, #14]
    for (int16_t i = 0; i < 3; i++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	81bb      	strh	r3, [r7, #12]
 8001b9a:	e010      	b.n	8001bbe <write_coin+0x3a>
        if (coin_num > temp[i]) {
 8001b9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <write_coin+0xc0>)
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dd02      	ble.n	8001bb2 <write_coin+0x2e>
            insertPos = i;
 8001bac:	89bb      	ldrh	r3, [r7, #12]
 8001bae:	81fb      	strh	r3, [r7, #14]
            break;
 8001bb0:	e009      	b.n	8001bc6 <write_coin+0x42>
    for (int16_t i = 0; i < 3; i++) {
 8001bb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	81bb      	strh	r3, [r7, #12]
 8001bbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	ddea      	ble.n	8001b9c <write_coin+0x18>
        }
    }

    // If we found a position, shift the temp array and insert coin_num.
    if (insertPos != -1) {
 8001bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bce:	d01f      	beq.n	8001c10 <write_coin+0x8c>
        for (int16_t i = 2; i > insertPos; i--) {
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	817b      	strh	r3, [r7, #10]
 8001bd4:	e010      	b.n	8001bf8 <write_coin+0x74>
            temp[i] = temp[i - 1];
 8001bd6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bda:	1e5a      	subs	r2, r3, #1
 8001bdc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001be0:	4918      	ldr	r1, [pc, #96]	; (8001c44 <write_coin+0xc0>)
 8001be2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001be6:	4917      	ldr	r1, [pc, #92]	; (8001c44 <write_coin+0xc0>)
 8001be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int16_t i = 2; i > insertPos; i--) {
 8001bec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	817b      	strh	r3, [r7, #10]
 8001bf8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dce8      	bgt.n	8001bd6 <write_coin+0x52>
        }
        temp[insertPos] = coin_num;
 8001c04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <write_coin+0xc0>)
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    // Write the updated array to flash.
    if (BSP_QSPI_Erase_Block(addr) != QSPI_OK) {
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <write_coin+0xc4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fbab 	bl	8002370 <BSP_QSPI_Erase_Block>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <write_coin+0xa0>
        Error_Handler();
 8001c20:	f000 f8ca 	bl	8001db8 <Error_Handler>
    }
    if (BSP_QSPI_Write((uint8_t *)temp, addr, sizeof(temp)) != QSPI_OK) {
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <write_coin+0xc4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	220c      	movs	r2, #12
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <write_coin+0xc0>)
 8001c2e:	f000 fb21 	bl	8002274 <BSP_QSPI_Write>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <write_coin+0xb8>
        Error_Handler();
 8001c38:	f000 f8be 	bl	8001db8 <Error_Handler>
    }
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20001834 	.word	0x20001834
 8001c48:	200012c8 	.word	0x200012c8

08001c4c <read_playtime>:


void read_playtime(){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
	 if (BSP_QSPI_Read((uint8_t *)rank_time, addr_1, sizeof(rank_time)) != QSPI_OK) {
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <read_playtime+0x84>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	220c      	movs	r2, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481e      	ldr	r0, [pc, #120]	; (8001cd4 <read_playtime+0x88>)
 8001c5c:	f000 fac4 	bl	80021e8 <BSP_QSPI_Read>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <read_playtime+0x1e>
		Error_Handler();
 8001c66:	f000 f8a7 	bl	8001db8 <Error_Handler>
	 }
	for (int i = 0; i < 3; i++) {
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	e026      	b.n	8001cbe <read_playtime+0x72>
		if (isnan(temp_time[i])) {
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <read_playtime+0x8c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	eef4 7a67 	vcmp.f32	s15, s15
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	d706      	bvc.n	8001c94 <read_playtime+0x48>
			temp_time[i] = 0.0f; // Replace NaN with a default value, e.g., 0.0
 8001c86:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <read_playtime+0x8c>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
		}
		if (isnan(rank_time[i])) {
 8001c94:	4a0f      	ldr	r2, [pc, #60]	; (8001cd4 <read_playtime+0x88>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	eef4 7a67 	vcmp.f32	s15, s15
 8001ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca8:	d706      	bvc.n	8001cb8 <read_playtime+0x6c>
			rank_time[i] = 0.0f; // Replace NaN with a default value, e.g., 0.0
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <read_playtime+0x88>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	ddd5      	ble.n	8001c70 <read_playtime+0x24>
		}
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200012cc 	.word	0x200012cc
 8001cd4:	20001840 	.word	0x20001840
 8001cd8:	2000184c 	.word	0x2000184c

08001cdc <write_playtime>:
void write_playtime(float cur_time){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	ed87 0a01 	vstr	s0, [r7, #4]
	read_playtime();
 8001ce6:	f7ff ffb1 	bl	8001c4c <read_playtime>
    // Find the position where coin_num fits into the temp array.
    int16_t insertPos = -1;
 8001cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cee:	81fb      	strh	r3, [r7, #14]
    for (int16_t i = 0; i < 3; i++) {
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	81bb      	strh	r3, [r7, #12]
 8001cf4:	e016      	b.n	8001d24 <write_playtime+0x48>
        if (cur_time > temp_time[i]) {
 8001cf6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <write_playtime+0xd4>)
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	dd02      	ble.n	8001d18 <write_playtime+0x3c>
            insertPos = i;
 8001d12:	89bb      	ldrh	r3, [r7, #12]
 8001d14:	81fb      	strh	r3, [r7, #14]
            break;
 8001d16:	e009      	b.n	8001d2c <write_playtime+0x50>
    for (int16_t i = 0; i < 3; i++) {
 8001d18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	81bb      	strh	r3, [r7, #12]
 8001d24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	dde4      	ble.n	8001cf6 <write_playtime+0x1a>
        }
    }

    // If we found a position, shift the temp array and insert coin_num.
    if (insertPos != -1) {
 8001d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d34:	d022      	beq.n	8001d7c <write_playtime+0xa0>
        for (int16_t i = 2; i > insertPos; i--) {
 8001d36:	2302      	movs	r3, #2
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	e012      	b.n	8001d62 <write_playtime+0x86>
        	temp_time[i] = temp_time[i - 1];
 8001d3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d46:	491a      	ldr	r1, [pc, #104]	; (8001db0 <write_playtime+0xd4>)
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	440a      	add	r2, r1
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	4918      	ldr	r1, [pc, #96]	; (8001db0 <write_playtime+0xd4>)
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	601a      	str	r2, [r3, #0]
        for (int16_t i = 2; i > insertPos; i--) {
 8001d56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	817b      	strh	r3, [r7, #10]
 8001d62:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dce6      	bgt.n	8001d3c <write_playtime+0x60>
        }
        temp_time[insertPos] = cur_time;
 8001d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <write_playtime+0xd4>)
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	601a      	str	r2, [r3, #0]
    }

	if (BSP_QSPI_Erase_Block(addr_1) != QSPI_OK) {
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <write_playtime+0xd8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 faf5 	bl	8002370 <BSP_QSPI_Erase_Block>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <write_playtime+0xb4>
						   Error_Handler();
 8001d8c:	f000 f814 	bl	8001db8 <Error_Handler>
				  }
	if (BSP_QSPI_Write((uint8_t *)temp_time, addr_1, sizeof(temp_time)) != QSPI_OK) {
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <write_playtime+0xd8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	220c      	movs	r2, #12
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <write_playtime+0xd4>)
 8001d9a:	f000 fa6b 	bl	8002274 <BSP_QSPI_Write>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <write_playtime+0xcc>
	   Error_Handler();
 8001da4:	f000 f808 	bl	8001db8 <Error_Handler>
   }
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	2000184c 	.word	0x2000184c
 8001db4:	200012cc 	.word	0x200012cc

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <Error_Handler+0x8>
	...

08001dc4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001de4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001de8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001dea:	2312      	movs	r3, #18
 8001dec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001df6:	2304      	movs	r3, #4
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481b      	ldr	r0, [pc, #108]	; (8001e70 <I2Cx_MspInit+0xac>)
 8001e02:	f001 fe0b 	bl	8003a1c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4818      	ldr	r0, [pc, #96]	; (8001e70 <I2Cx_MspInit+0xac>)
 8001e0e:	f001 fe05 	bl	8003a1c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001e18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e34:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <I2Cx_MspInit+0xa8>)
 8001e3c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e40:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	210f      	movs	r1, #15
 8001e46:	2021      	movs	r0, #33	; 0x21
 8001e48:	f001 fb5b 	bl	8003502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001e4c:	2021      	movs	r0, #33	; 0x21
 8001e4e:	f001 fb74 	bl	800353a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	210f      	movs	r1, #15
 8001e56:	2022      	movs	r0, #34	; 0x22
 8001e58:	f001 fb53 	bl	8003502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001e5c:	2022      	movs	r0, #34	; 0x22
 8001e5e:	f001 fb6c 	bl	800353a <HAL_NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	48000400 	.word	0x48000400

08001e74 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <I2Cx_Init+0x54>)
 8001e80:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <I2Cx_Init+0x58>)
 8001e86:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff89 	bl	8001dc4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f002 f850 	bl	8003f58 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001eb8:	2100      	movs	r1, #0
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f002 fdfc 	bl	8004ab8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40005800 	.word	0x40005800
 8001ecc:	00702681 	.word	0x00702681

08001ed0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af04      	add	r7, sp, #16
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	72fb      	strb	r3, [r7, #11]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	813b      	strh	r3, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	b299      	uxth	r1, r3
 8001ef2:	88f8      	ldrh	r0, [r7, #6]
 8001ef4:	893a      	ldrh	r2, [r7, #8]
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	4603      	mov	r3, r0
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f002 fa04 	bl	8004314 <HAL_I2C_Mem_Read>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f832 	bl	8001f84 <I2Cx_Error>
  }
  return status;
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b08a      	sub	sp, #40	; 0x28
 8001f2e:	af04      	add	r7, sp, #16
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	4608      	mov	r0, r1
 8001f34:	4611      	mov	r1, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	72fb      	strb	r3, [r7, #11]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	813b      	strh	r3, [r7, #8]
 8001f40:	4613      	mov	r3, r2
 8001f42:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f48:	7afb      	ldrb	r3, [r7, #11]
 8001f4a:	b299      	uxth	r1, r3
 8001f4c:	88f8      	ldrh	r0, [r7, #6]
 8001f4e:	893a      	ldrh	r2, [r7, #8]
 8001f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f002 f8c3 	bl	80040ec <HAL_I2C_Mem_Write>
 8001f66:	4603      	mov	r3, r0
 8001f68:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001f70:	7afb      	ldrb	r3, [r7, #11]
 8001f72:	4619      	mov	r1, r3
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f805 	bl	8001f84 <I2Cx_Error>
  }
  return status;
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f002 f87c 	bl	800408e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff6c 	bl	8001e74 <I2Cx_Init>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <SENSOR_IO_Init+0x10>)
 8001faa:	f7ff ff63 	bl	8001e74 <I2Cx_Init>
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200018a8 	.word	0x200018a8

08001fb8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	71bb      	strb	r3, [r7, #6]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	79f9      	ldrb	r1, [r7, #7]
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	1d7b      	adds	r3, r7, #5
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <SENSOR_IO_Write+0x30>)
 8001fdc:	f7ff ffa5 	bl	8001f2a <I2Cx_WriteMultiple>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200018a8 	.word	0x200018a8

08001fec <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	71fb      	strb	r3, [r7, #7]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002000:	79bb      	ldrb	r3, [r7, #6]
 8002002:	b29a      	uxth	r2, r3
 8002004:	79f9      	ldrb	r1, [r7, #7]
 8002006:	2301      	movs	r3, #1
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	f107 030f 	add.w	r3, r7, #15
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2301      	movs	r3, #1
 8002012:	4804      	ldr	r0, [pc, #16]	; (8002024 <SENSOR_IO_Read+0x38>)
 8002014:	f7ff ff5c 	bl	8001ed0 <I2Cx_ReadMultiple>

  return read_value;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200018a8 	.word	0x200018a8

08002028 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af02      	add	r7, sp, #8
 800202e:	603a      	str	r2, [r7, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	460b      	mov	r3, r1
 8002038:	71bb      	strb	r3, [r7, #6]
 800203a:	4613      	mov	r3, r2
 800203c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	b29a      	uxth	r2, r3
 8002042:	79f9      	ldrb	r1, [r7, #7]
 8002044:	88bb      	ldrh	r3, [r7, #4]
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2301      	movs	r3, #1
 800204e:	4804      	ldr	r0, [pc, #16]	; (8002060 <SENSOR_IO_ReadMultiple+0x38>)
 8002050:	f7ff ff3e 	bl	8001ed0 <I2Cx_ReadMultiple>
 8002054:	4603      	mov	r3, r0
 8002056:	b29b      	uxth	r3, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200018a8 	.word	0x200018a8

08002064 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800206e:	2300      	movs	r3, #0
 8002070:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002072:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <BSP_ACCELERO_Init+0x74>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4798      	blx	r3
 8002078:	4603      	mov	r3, r0
 800207a:	2b6a      	cmp	r3, #106	; 0x6a
 800207c:	d002      	beq.n	8002084 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	e024      	b.n	80020ce <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <BSP_ACCELERO_Init+0x78>)
 8002086:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <BSP_ACCELERO_Init+0x74>)
 8002088:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800208a:	2330      	movs	r3, #48	; 0x30
 800208c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002092:	2300      	movs	r3, #0
 8002094:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002096:	2340      	movs	r3, #64	; 0x40
 8002098:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80020a2:	797a      	ldrb	r2, [r7, #5]
 80020a4:	7abb      	ldrb	r3, [r7, #10]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80020ac:	7a3b      	ldrb	r3, [r7, #8]
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <BSP_ACCELERO_Init+0x78>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	89ba      	ldrh	r2, [r7, #12]
 80020ca:	4610      	mov	r0, r2
 80020cc:	4798      	blx	r3
  }  

  return ret;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200012d4 	.word	0x200012d4
 80020dc:	200018fc 	.word	0x200018fc

080020e0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d004      	beq.n	8002104 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
    }
  }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200018fc 	.word	0x200018fc

08002110 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 8002118:	4a32      	ldr	r2, [pc, #200]	; (80021e4 <BSP_QSPI_Init+0xd4>)
 800211a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800211c:	4830      	ldr	r0, [pc, #192]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 800211e:	f002 fe3d 	bl	8004d9c <HAL_QSPI_DeInit>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e054      	b.n	80021d6 <BSP_QSPI_Init+0xc6>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 800212c:	f000 f964 	bl	80023f8 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 2; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 26.67MHz */
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 8002132:	2202      	movs	r2, #2
 8002134:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8002136:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 8002138:	2204      	movs	r2, #4
 800213a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 800213e:	2210      	movs	r2, #16
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002146:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <BSP_QSPI_Init+0x4e>
  {
    return 32U;
 800215a:	2320      	movs	r3, #32
 800215c:	e003      	b.n	8002166 <BSP_QSPI_Init+0x56>
  }
  return __builtin_clz(value);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	fab3 f383 	clz	r3, r3
 8002164:	b2db      	uxtb	r3, r3
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MX25R6435F_FLASH_SIZE) - 1;
 8002166:	3b01      	subs	r3, #1
 8002168:	461a      	mov	r2, r3
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 800216c:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800217a:	4819      	ldr	r0, [pc, #100]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 800217c:	f002 fd98 	bl	8004cb0 <HAL_QSPI_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <BSP_QSPI_Init+0x7a>
  {
    return QSPI_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e025      	b.n	80021d6 <BSP_QSPI_Init+0xc6>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 800218a:	4815      	ldr	r0, [pc, #84]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 800218c:	f000 f974 	bl	8002478 <QSPI_ResetMemory>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <BSP_QSPI_Init+0x8a>
  {
    return QSPI_NOT_SUPPORTED;
 8002196:	2304      	movs	r3, #4
 8002198:	e01d      	b.n	80021d6 <BSP_QSPI_Init+0xc6>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&QSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800219a:	2101      	movs	r1, #1
 800219c:	4810      	ldr	r0, [pc, #64]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 800219e:	f000 fa35 	bl	800260c <QSPI_QuadMode>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <BSP_QSPI_Init+0x9c>
  {
    return QSPI_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e014      	b.n	80021d6 <BSP_QSPI_Init+0xc6>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&QSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80021ac:	2101      	movs	r1, #1
 80021ae:	480c      	ldr	r0, [pc, #48]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 80021b0:	f000 fad4 	bl	800275c <QSPI_HighPerfMode>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <BSP_QSPI_Init+0xae>
  {
    return QSPI_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00b      	b.n	80021d6 <BSP_QSPI_Init+0xc6>
  }
  
  /* Re-configure the clock for the high performance mode */
  QSPIHandle.Init.ClockPrescaler = 1; /* QSPI clock = 80MHz / (ClockPrescaler+1) = 40MHz */
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	605a      	str	r2, [r3, #4]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80021c4:	4806      	ldr	r0, [pc, #24]	; (80021e0 <BSP_QSPI_Init+0xd0>)
 80021c6:	f002 fd73 	bl	8004cb0 <HAL_QSPI_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <BSP_QSPI_Init+0xc4>
  {
    return QSPI_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <BSP_QSPI_Init+0xc6>
  }

  return QSPI_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20001900 	.word	0x20001900
 80021e4:	a0001000 	.word	0xa0001000

080021e8 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b092      	sub	sp, #72	; 0x48
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the read command */
  sCommand.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 80021f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction        = QUAD_INOUT_READ_CMD;
 80021fa:	23eb      	movs	r3, #235	; 0xeb
 80021fc:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
 80021fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
 8002204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002208:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = ReadAddr;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	617b      	str	r3, [r7, #20]
  sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
 800220e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  sCommand.AlternateBytes     = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8002218:	23aa      	movs	r3, #170	; 0xaa
 800221a:	61bb      	str	r3, [r7, #24]
  sCommand.DataMode           = QSPI_DATA_4_LINES;
 800221c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles        = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8002222:	2304      	movs	r3, #4
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData             = Size;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 800222e:	2300      	movs	r3, #0
 8002230:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8002232:	2300      	movs	r3, #0
 8002234:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* Configure the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002236:	f107 0310 	add.w	r3, r7, #16
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4619      	mov	r1, r3
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <BSP_QSPI_Read+0x88>)
 8002242:	f002 fdcf 	bl	8004de4 <HAL_QSPI_Command>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <BSP_QSPI_Read+0x68>
  {
    return QSPI_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e00b      	b.n	8002268 <BSP_QSPI_Read+0x80>
  }
  
  /* Reception of the data */
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	4806      	ldr	r0, [pc, #24]	; (8002270 <BSP_QSPI_Read+0x88>)
 8002258:	f002 feb9 	bl	8004fce <HAL_QSPI_Receive>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <BSP_QSPI_Read+0x80>
  }

  return QSPI_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3748      	adds	r7, #72	; 0x48
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20001900 	.word	0x20001900

08002274 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b096      	sub	sp, #88	; 0x58
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002288:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800228a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d901      	bls.n	8002296 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80022a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.Instruction       = QUAD_PAGE_PROG_CMD;
 80022a8:	2338      	movs	r3, #56	; 0x38
 80022aa:	617b      	str	r3, [r7, #20]
  sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
 80022ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80022b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b6:	623b      	str	r3, [r7, #32]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode          = QSPI_DATA_4_LINES;
 80022bc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80022c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DummyCycles       = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80022ca:	2300      	movs	r3, #0
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80022ce:	2300      	movs	r3, #0
 80022d0:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80022d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d4:	61bb      	str	r3, [r7, #24]
    sCommand.NbData  = current_size;
 80022d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80022da:	4824      	ldr	r0, [pc, #144]	; (800236c <BSP_QSPI_Write+0xf8>)
 80022dc:	f000 f910 	bl	8002500 <QSPI_WriteEnable>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <BSP_QSPI_Write+0x76>
    {
      return QSPI_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e03b      	b.n	8002362 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure the command */
    if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4619      	mov	r1, r3
 80022f4:	481d      	ldr	r0, [pc, #116]	; (800236c <BSP_QSPI_Write+0xf8>)
 80022f6:	f002 fd75 	bl	8004de4 <HAL_QSPI_Command>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <BSP_QSPI_Write+0x90>
    {
      return QSPI_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e02e      	b.n	8002362 <BSP_QSPI_Write+0xee>
    }
    
    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	4818      	ldr	r0, [pc, #96]	; (800236c <BSP_QSPI_Write+0xf8>)
 800230c:	f002 fdc8 	bl	8004ea0 <HAL_QSPI_Transmit>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <BSP_QSPI_Write+0xa6>
    {
      return QSPI_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e023      	b.n	8002362 <BSP_QSPI_Write+0xee>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800231a:	f241 3188 	movw	r1, #5000	; 0x1388
 800231e:	4813      	ldr	r0, [pc, #76]	; (800236c <BSP_QSPI_Write+0xf8>)
 8002320:	f000 f93a 	bl	8002598 <QSPI_AutoPollingMemReady>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <BSP_QSPI_Write+0xba>
    {
      return QSPI_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e019      	b.n	8002362 <BSP_QSPI_Write+0xee>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800232e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002332:	4413      	add	r3, r2
 8002334:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233a:	4413      	add	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800233e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002340:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002346:	429a      	cmp	r2, r3
 8002348:	d203      	bcs.n	8002352 <BSP_QSPI_Write+0xde>
 800234a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800234c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	e001      	b.n	8002356 <BSP_QSPI_Write+0xe2>
 8002352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002356:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002358:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800235a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235c:	429a      	cmp	r2, r3
 800235e:	d3b8      	bcc.n	80022d2 <BSP_QSPI_Write+0x5e>
  
  return QSPI_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3758      	adds	r7, #88	; 0x58
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20001900 	.word	0x20001900

08002370 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b090      	sub	sp, #64	; 0x40
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237c:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = BLOCK_ERASE_CMD;
 800237e:	23d8      	movs	r3, #216	; 0xd8
 8002380:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238c:	617b      	str	r3, [r7, #20]
  sCommand.Address           = BlockAddress;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002392:	2300      	movs	r3, #0
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002396:	2300      	movs	r3, #0
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80023a2:	2300      	movs	r3, #0
 80023a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80023a6:	2300      	movs	r3, #0
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 80023aa:	4812      	ldr	r0, [pc, #72]	; (80023f4 <BSP_QSPI_Erase_Block+0x84>)
 80023ac:	f000 f8a8 	bl	8002500 <QSPI_WriteEnable>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <BSP_QSPI_Erase_Block+0x4a>
  {
    return QSPI_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e017      	b.n	80023ea <BSP_QSPI_Erase_Block+0x7a>
  }

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4619      	mov	r1, r3
 80023c4:	480b      	ldr	r0, [pc, #44]	; (80023f4 <BSP_QSPI_Erase_Block+0x84>)
 80023c6:	f002 fd0d 	bl	8004de4 <HAL_QSPI_Command>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <BSP_QSPI_Erase_Block+0x64>
  {
    return QSPI_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00a      	b.n	80023ea <BSP_QSPI_Erase_Block+0x7a>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 80023d4:	f640 51ac 	movw	r1, #3500	; 0xdac
 80023d8:	4806      	ldr	r0, [pc, #24]	; (80023f4 <BSP_QSPI_Erase_Block+0x84>)
 80023da:	f000 f8dd 	bl	8002598 <QSPI_AutoPollingMemReady>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <BSP_QSPI_Erase_Block+0x78>
  {
    return QSPI_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <BSP_QSPI_Erase_Block+0x7a>
  }

  return QSPI_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3740      	adds	r7, #64	; 0x40
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20001900 	.word	0x20001900

080023f8 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_QSPI_CLK_ENABLE();
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	4a1b      	ldr	r2, [pc, #108]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6513      	str	r3, [r2, #80]	; 0x50
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 800240c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_QSPI_FORCE_RESET();
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_QSPI_RELEASE_RESET();
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 8002428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800242c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 8002434:	f043 0310 	orr.w	r3, r3, #16
 8002438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <BSP_QSPI_MspInit+0x78>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8002446:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800244a:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002458:	230a      	movs	r3, #10
 800245a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	4619      	mov	r1, r3
 8002462:	4804      	ldr	r0, [pc, #16]	; (8002474 <BSP_QSPI_MspInit+0x7c>)
 8002464:	f001 fada 	bl	8003a1c <HAL_GPIO_Init>
}
 8002468:	bf00      	nop
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40021000 	.word	0x40021000
 8002474:	48001000 	.word	0x48001000

08002478 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b090      	sub	sp, #64	; 0x40
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002484:	623b      	str	r3, [r7, #32]
  sCommand.Instruction       = RESET_ENABLE_CMD;
 8002486:	2366      	movs	r3, #102	; 0x66
 8002488:	60bb      	str	r3, [r7, #8]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800248e:	2300      	movs	r3, #0
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode          = QSPI_DATA_NONE;
 8002492:	2300      	movs	r3, #0
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DummyCycles       = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800249e:	2300      	movs	r3, #0
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80024a2:	2300      	movs	r3, #0
 80024a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024a6:	f107 0308 	add.w	r3, r7, #8
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4619      	mov	r1, r3
 80024b0:	4812      	ldr	r0, [pc, #72]	; (80024fc <QSPI_ResetMemory+0x84>)
 80024b2:	f002 fc97 	bl	8004de4 <HAL_QSPI_Command>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e019      	b.n	80024f4 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80024c0:	2399      	movs	r3, #153	; 0x99
 80024c2:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024cc:	4619      	mov	r1, r3
 80024ce:	480b      	ldr	r0, [pc, #44]	; (80024fc <QSPI_ResetMemory+0x84>)
 80024d0:	f002 fc88 	bl	8004de4 <HAL_QSPI_Command>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e00a      	b.n	80024f4 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80024de:	f241 3188 	movw	r1, #5000	; 0x1388
 80024e2:	4806      	ldr	r0, [pc, #24]	; (80024fc <QSPI_ResetMemory+0x84>)
 80024e4:	f000 f858 	bl	8002598 <QSPI_AutoPollingMemReady>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3740      	adds	r7, #64	; 0x40
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20001900 	.word	0x20001900

08002500 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b096      	sub	sp, #88	; 0x58
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 800250e:	2306      	movs	r3, #6
 8002510:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002512:	2300      	movs	r3, #0
 8002514:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002516:	2300      	movs	r3, #0
 8002518:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 800251a:	2300      	movs	r3, #0
 800251c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002526:	2300      	movs	r3, #0
 8002528:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800252a:	2300      	movs	r3, #0
 800252c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800252e:	f107 0320 	add.w	r3, r7, #32
 8002532:	f241 3288 	movw	r2, #5000	; 0x1388
 8002536:	4619      	mov	r1, r3
 8002538:	4816      	ldr	r0, [pc, #88]	; (8002594 <QSPI_WriteEnable+0x94>)
 800253a:	f002 fc53 	bl	8004de4 <HAL_QSPI_Command>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e020      	b.n	800258a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match           = MX25R6435F_SR_WEL;
 8002548:	2302      	movs	r3, #2
 800254a:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WEL;
 800254c:	2302      	movs	r3, #2
 800254e:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8002550:	2300      	movs	r3, #0
 8002552:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8002554:	2301      	movs	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8002558:	2310      	movs	r3, #16
 800255a:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800255c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002560:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8002562:	2305      	movs	r3, #5
 8002564:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8002566:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800256a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800256c:	f107 0208 	add.w	r2, r7, #8
 8002570:	f107 0120 	add.w	r1, r7, #32
 8002574:	f241 3388 	movw	r3, #5000	; 0x1388
 8002578:	4806      	ldr	r0, [pc, #24]	; (8002594 <QSPI_WriteEnable+0x94>)
 800257a:	f002 fdca 	bl	8005112 <HAL_QSPI_AutoPolling>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3758      	adds	r7, #88	; 0x58
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20001900 	.word	0x20001900

08002598 <QSPI_AutoPollingMemReady>:
  * @param  hqspi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b096      	sub	sp, #88	; 0x58
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80025a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80025a8:	2305      	movs	r3, #5
 80025aa:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80025b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80025c2:	2300      	movs	r3, #0
 80025c4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80025c6:	2300      	movs	r3, #0
 80025c8:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = MX25R6435F_SR_WIP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80025da:	2310      	movs	r3, #16
 80025dc:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80025de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025e2:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, Timeout) != HAL_OK)
 80025e4:	f107 0208 	add.w	r2, r7, #8
 80025e8:	f107 0120 	add.w	r1, r7, #32
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4806      	ldr	r0, [pc, #24]	; (8002608 <QSPI_AutoPollingMemReady+0x70>)
 80025f0:	f002 fd8f 	bl	8005112 <HAL_QSPI_AutoPolling>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3758      	adds	r7, #88	; 0x58
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20001900 	.word	0x20001900

0800260c <QSPI_QuadMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b092      	sub	sp, #72	; 0x48
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800261e:	2305      	movs	r3, #5
 8002620:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002626:	2300      	movs	r3, #0
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800262a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8002634:	2301      	movs	r3, #1
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800263c:	2300      	movs	r3, #0
 800263e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002640:	2300      	movs	r3, #0
 8002642:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4619      	mov	r1, r3
 800264e:	4842      	ldr	r0, [pc, #264]	; (8002758 <QSPI_QuadMode+0x14c>)
 8002650:	f002 fbc8 	bl	8004de4 <HAL_QSPI_Command>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <QSPI_QuadMode+0x52>
  {
    return QSPI_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e077      	b.n	800274e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800265e:	f107 030f 	add.w	r3, r7, #15
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4619      	mov	r1, r3
 8002668:	483b      	ldr	r0, [pc, #236]	; (8002758 <QSPI_QuadMode+0x14c>)
 800266a:	f002 fcb0 	bl	8004fce <HAL_QSPI_Receive>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <QSPI_QuadMode+0x6c>
  {
    return QSPI_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e06a      	b.n	800274e <QSPI_QuadMode+0x142>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002678:	4837      	ldr	r0, [pc, #220]	; (8002758 <QSPI_QuadMode+0x14c>)
 800267a:	f7ff ff41 	bl	8002500 <QSPI_WriteEnable>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <QSPI_QuadMode+0x7c>
  {
    return QSPI_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e062      	b.n	800274e <QSPI_QuadMode+0x142>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <QSPI_QuadMode+0x8e>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002694:	b2db      	uxtb	r3, r3
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e004      	b.n	80026a4 <QSPI_QuadMode+0x98>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80026a4:	2301      	movs	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4619      	mov	r1, r3
 80026b2:	4829      	ldr	r0, [pc, #164]	; (8002758 <QSPI_QuadMode+0x14c>)
 80026b4:	f002 fb96 	bl	8004de4 <HAL_QSPI_Command>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <QSPI_QuadMode+0xb6>
  {
    return QSPI_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e045      	b.n	800274e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026c2:	f107 030f 	add.w	r3, r7, #15
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4619      	mov	r1, r3
 80026cc:	4822      	ldr	r0, [pc, #136]	; (8002758 <QSPI_QuadMode+0x14c>)
 80026ce:	f002 fbe7 	bl	8004ea0 <HAL_QSPI_Transmit>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <QSPI_QuadMode+0xd0>
  {
    return QSPI_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e038      	b.n	800274e <QSPI_QuadMode+0x142>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80026dc:	f241 3188 	movw	r1, #5000	; 0x1388
 80026e0:	481d      	ldr	r0, [pc, #116]	; (8002758 <QSPI_QuadMode+0x14c>)
 80026e2:	f7ff ff59 	bl	8002598 <QSPI_AutoPollingMemReady>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <QSPI_QuadMode+0xe4>
  {
    return QSPI_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e02e      	b.n	800274e <QSPI_QuadMode+0x142>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 80026f0:	2305      	movs	r3, #5
 80026f2:	613b      	str	r3, [r7, #16]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4619      	mov	r1, r3
 80026fe:	4816      	ldr	r0, [pc, #88]	; (8002758 <QSPI_QuadMode+0x14c>)
 8002700:	f002 fb70 	bl	8004de4 <HAL_QSPI_Command>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <QSPI_QuadMode+0x102>
  {
    return QSPI_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e01f      	b.n	800274e <QSPI_QuadMode+0x142>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800270e:	f107 030f 	add.w	r3, r7, #15
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4619      	mov	r1, r3
 8002718:	480f      	ldr	r0, [pc, #60]	; (8002758 <QSPI_QuadMode+0x14c>)
 800271a:	f002 fc58 	bl	8004fce <HAL_QSPI_Receive>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <QSPI_QuadMode+0x11c>
  {
    return QSPI_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e012      	b.n	800274e <QSPI_QuadMode+0x142>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <QSPI_QuadMode+0x12c>
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d007      	beq.n	8002748 <QSPI_QuadMode+0x13c>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <QSPI_QuadMode+0x140>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <QSPI_QuadMode+0x140>
  {
    return QSPI_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <QSPI_QuadMode+0x142>
  }

  return QSPI_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3748      	adds	r7, #72	; 0x48
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20001900 	.word	0x20001900

0800275c <QSPI_HighPerfMode>:
  * @param  hqspi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(QSPI_HandleTypeDef *hqspi, uint8_t Operation)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b092      	sub	sp, #72	; 0x48
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 800276e:	2305      	movs	r3, #5
 8002770:	613b      	str	r3, [r7, #16]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8002772:	2300      	movs	r3, #0
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002776:	2300      	movs	r3, #0
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800277a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DummyCycles       = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.NbData            = 1;
 8002784:	2301      	movs	r3, #1
 8002786:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800278c:	2300      	movs	r3, #0
 800278e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002790:	2300      	movs	r3, #0
 8002792:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4619      	mov	r1, r3
 800279e:	4853      	ldr	r0, [pc, #332]	; (80028ec <QSPI_HighPerfMode+0x190>)
 80027a0:	f002 fb20 	bl	8004de4 <HAL_QSPI_Command>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <QSPI_HighPerfMode+0x52>
  {
    return QSPI_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e09a      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4619      	mov	r1, r3
 80027b8:	484c      	ldr	r0, [pc, #304]	; (80028ec <QSPI_HighPerfMode+0x190>)
 80027ba:	f002 fc08 	bl	8004fce <HAL_QSPI_Receive>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <QSPI_HighPerfMode+0x6c>
  {
    return QSPI_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e08d      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80027c8:	2315      	movs	r3, #21
 80027ca:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 80027cc:	2302      	movs	r3, #2
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027d0:	f107 0310 	add.w	r3, r7, #16
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4619      	mov	r1, r3
 80027da:	4844      	ldr	r0, [pc, #272]	; (80028ec <QSPI_HighPerfMode+0x190>)
 80027dc:	f002 fb02 	bl	8004de4 <HAL_QSPI_Command>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <QSPI_HighPerfMode+0x8e>
  {
    return QSPI_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e07c      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	3301      	adds	r3, #1
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4619      	mov	r1, r3
 80027f6:	483d      	ldr	r0, [pc, #244]	; (80028ec <QSPI_HighPerfMode+0x190>)
 80027f8:	f002 fbe9 	bl	8004fce <HAL_QSPI_Receive>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <QSPI_HighPerfMode+0xaa>
  {
    return QSPI_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06e      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002806:	4839      	ldr	r0, [pc, #228]	; (80028ec <QSPI_HighPerfMode+0x190>)
 8002808:	f7ff fe7a 	bl	8002500 <QSPI_WriteEnable>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <QSPI_HighPerfMode+0xba>
  {
    return QSPI_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e066      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <QSPI_HighPerfMode+0xcc>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800281c:	7bbb      	ldrb	r3, [r7, #14]
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	b2db      	uxtb	r3, r3
 8002824:	73bb      	strb	r3, [r7, #14]
 8002826:	e004      	b.n	8002832 <QSPI_HighPerfMode+0xd6>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8002828:	7bbb      	ldrb	r3, [r7, #14]
 800282a:	f023 0302 	bic.w	r3, r3, #2
 800282e:	b2db      	uxtb	r3, r3
 8002830:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8002832:	2301      	movs	r3, #1
 8002834:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 3;
 8002836:	2303      	movs	r3, #3
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800283a:	f107 0310 	add.w	r3, r7, #16
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4619      	mov	r1, r3
 8002844:	4829      	ldr	r0, [pc, #164]	; (80028ec <QSPI_HighPerfMode+0x190>)
 8002846:	f002 facd 	bl	8004de4 <HAL_QSPI_Command>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <QSPI_HighPerfMode+0xf8>
  {
    return QSPI_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e047      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002854:	f107 030c 	add.w	r3, r7, #12
 8002858:	f241 3288 	movw	r2, #5000	; 0x1388
 800285c:	4619      	mov	r1, r3
 800285e:	4823      	ldr	r0, [pc, #140]	; (80028ec <QSPI_HighPerfMode+0x190>)
 8002860:	f002 fb1e 	bl	8004ea0 <HAL_QSPI_Transmit>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <QSPI_HighPerfMode+0x112>
  {
    return QSPI_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e03a      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800286e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002872:	481e      	ldr	r0, [pc, #120]	; (80028ec <QSPI_HighPerfMode+0x190>)
 8002874:	f7ff fe90 	bl	8002598 <QSPI_AutoPollingMemReady>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <QSPI_HighPerfMode+0x126>
  {
    return QSPI_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e030      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8002882:	2315      	movs	r3, #21
 8002884:	613b      	str	r3, [r7, #16]
  sCommand.NbData      = 2;
 8002886:	2302      	movs	r3, #2
 8002888:	63bb      	str	r3, [r7, #56]	; 0x38

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4619      	mov	r1, r3
 8002894:	4815      	ldr	r0, [pc, #84]	; (80028ec <QSPI_HighPerfMode+0x190>)
 8002896:	f002 faa5 	bl	8004de4 <HAL_QSPI_Command>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <QSPI_HighPerfMode+0x148>
  {
    return QSPI_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e01f      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028a4:	f107 030c 	add.w	r3, r7, #12
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4619      	mov	r1, r3
 80028ae:	480f      	ldr	r0, [pc, #60]	; (80028ec <QSPI_HighPerfMode+0x190>)
 80028b0:	f002 fb8d 	bl	8004fce <HAL_QSPI_Receive>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <QSPI_HighPerfMode+0x162>
  {
    return QSPI_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e012      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80028be:	7b7b      	ldrb	r3, [r7, #13]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <QSPI_HighPerfMode+0x172>
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d007      	beq.n	80028de <QSPI_HighPerfMode+0x182>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80028ce:	7b7b      	ldrb	r3, [r7, #13]
 80028d0:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <QSPI_HighPerfMode+0x186>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <QSPI_HighPerfMode+0x186>
  {
    return QSPI_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <QSPI_HighPerfMode+0x188>
  }

  return QSPI_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3748      	adds	r7, #72	; 0x48
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20001900 	.word	0x20001900

080028f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_MspInit+0x44>)
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <HAL_MspInit+0x44>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6613      	str	r3, [r2, #96]	; 0x60
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_MspInit+0x44>)
 8002904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_MspInit+0x44>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <HAL_MspInit+0x44>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6593      	str	r3, [r2, #88]	; 0x58
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_MspInit+0x44>)
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000

08002938 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <HAL_DAC_MspInit+0x74>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d124      	bne.n	80029a4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_DAC_MspInit+0x78>)
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_DAC_MspInit+0x78>)
 8002960:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002964:	6593      	str	r3, [r2, #88]	; 0x58
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_DAC_MspInit+0x78>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_DAC_MspInit+0x78>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_DAC_MspInit+0x78>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_DAC_MspInit+0x78>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800298a:	2330      	movs	r3, #48	; 0x30
 800298c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800298e:	2303      	movs	r3, #3
 8002990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a0:	f001 f83c 	bl	8003a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80029a4:	bf00      	nop
 80029a6:	3728      	adds	r7, #40	; 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40007400 	.word	0x40007400
 80029b0:	40021000 	.word	0x40021000

080029b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0ac      	sub	sp, #176	; 0xb0
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	2288      	movs	r2, #136	; 0x88
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f007 f953 	bl	8009c80 <memset>
  if(hi2c->Instance==I2C3)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <HAL_I2C_MspInit+0xb0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d13b      	bne.n	8002a5c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 fc48 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80029fe:	f7ff f9db 	bl	8001db8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_I2C_MspInit+0xb4>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_I2C_MspInit+0xb4>)
 8002a08:	f043 0304 	orr.w	r3, r3, #4
 8002a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_I2C_MspInit+0xb4>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a20:	2312      	movs	r3, #18
 8002a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a32:	2304      	movs	r3, #4
 8002a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	480b      	ldr	r0, [pc, #44]	; (8002a6c <HAL_I2C_MspInit+0xb8>)
 8002a40:	f000 ffec 	bl	8003a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_I2C_MspInit+0xb4>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_I2C_MspInit+0xb4>)
 8002a4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_I2C_MspInit+0xb4>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a5c:	bf00      	nop
 8002a5e:	37b0      	adds	r7, #176	; 0xb0
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40005c00 	.word	0x40005c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	48000800 	.word	0x48000800

08002a70 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_I2C_MspDeInit+0x38>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10d      	bne.n	8002a9e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_I2C_MspDeInit+0x3c>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_I2C_MspDeInit+0x3c>)
 8002a88:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a8c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4807      	ldr	r0, [pc, #28]	; (8002ab0 <HAL_I2C_MspDeInit+0x40>)
 8002a92:	f001 f96d 	bl	8003d70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 8002a96:	2102      	movs	r1, #2
 8002a98:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <HAL_I2C_MspDeInit+0x40>)
 8002a9a:	f001 f969 	bl	8003d70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40005c00 	.word	0x40005c00
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	48000800 	.word	0x48000800

08002ab4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <HAL_QSPI_MspInit+0x7c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d128      	bne.n	8002b28 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_QSPI_MspInit+0x80>)
 8002ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ada:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <HAL_QSPI_MspInit+0x80>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6513      	str	r3, [r2, #80]	; 0x50
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_QSPI_MspInit+0x80>)
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_QSPI_MspInit+0x80>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <HAL_QSPI_MspInit+0x80>)
 8002af4:	f043 0310 	orr.w	r3, r3, #16
 8002af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <HAL_QSPI_MspInit+0x80>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002b06:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002b0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b18:	230a      	movs	r3, #10
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <HAL_QSPI_MspInit+0x84>)
 8002b24:	f000 ff7a 	bl	8003a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	a0001000 	.word	0xa0001000
 8002b34:	40021000 	.word	0x40021000
 8002b38:	48001000 	.word	0x48001000

08002b3c <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <HAL_QSPI_MspDeInit+0x30>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10a      	bne.n	8002b64 <HAL_QSPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_QSPI_MspDeInit+0x34>)
 8002b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <HAL_QSPI_MspDeInit+0x34>)
 8002b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b58:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002b5a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002b5e:	4805      	ldr	r0, [pc, #20]	; (8002b74 <HAL_QSPI_MspDeInit+0x38>)
 8002b60:	f001 f906 	bl	8003d70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	a0001000 	.word	0xa0001000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	48001000 	.word	0x48001000

08002b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b88:	d114      	bne.n	8002bb4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b8a:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	4a32      	ldr	r2, [pc, #200]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6593      	str	r3, [r2, #88]	; 0x58
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	201c      	movs	r0, #28
 8002ba8:	f000 fcab 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bac:	201c      	movs	r0, #28
 8002bae:	f000 fcc4 	bl	800353a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002bb2:	e04c      	b.n	8002c4e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a28      	ldr	r2, [pc, #160]	; (8002c5c <HAL_TIM_Base_MspInit+0xe4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d114      	bne.n	8002be8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bbe:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	4a25      	ldr	r2, [pc, #148]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bca:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2101      	movs	r1, #1
 8002bda:	201d      	movs	r0, #29
 8002bdc:	f000 fc91 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002be0:	201d      	movs	r0, #29
 8002be2:	f000 fcaa 	bl	800353a <HAL_NVIC_EnableIRQ>
}
 8002be6:	e032      	b.n	8002c4e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1c      	ldr	r2, [pc, #112]	; (8002c60 <HAL_TIM_Base_MspInit+0xe8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d114      	bne.n	8002c1c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	201e      	movs	r0, #30
 8002c10:	f000 fc77 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c14:	201e      	movs	r0, #30
 8002c16:	f000 fc90 	bl	800353a <HAL_NVIC_EnableIRQ>
}
 8002c1a:	e018      	b.n	8002c4e <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HAL_TIM_Base_MspInit+0xec>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d113      	bne.n	8002c4e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002c2c:	f043 0308 	orr.w	r3, r3, #8
 8002c30:	6593      	str	r3, [r2, #88]	; 0x58
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_TIM_Base_MspInit+0xe0>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2103      	movs	r1, #3
 8002c42:	2032      	movs	r0, #50	; 0x32
 8002c44:	f000 fc5d 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c48:	2032      	movs	r0, #50	; 0x32
 8002c4a:	f000 fc76 	bl	800353a <HAL_NVIC_EnableIRQ>
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40000c00 	.word	0x40000c00

08002c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0ac      	sub	sp, #176	; 0xb0
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2288      	movs	r2, #136	; 0x88
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f006 fff9 	bl	8009c80 <memset>
  if(huart->Instance==USART1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <HAL_UART_MspInit+0xc0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d142      	bne.n	8002d1e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f003 faef 	bl	8006288 <HAL_RCCEx_PeriphCLKConfig>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002cb0:	f7ff f882 	bl	8001db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <HAL_UART_MspInit+0xc4>)
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_UART_MspInit+0xc4>)
 8002cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cbe:	6613      	str	r3, [r2, #96]	; 0x60
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_UART_MspInit+0xc4>)
 8002cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_UART_MspInit+0xc4>)
 8002cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd0:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <HAL_UART_MspInit+0xc4>)
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <HAL_UART_MspInit+0xc4>)
 8002cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ce4:	23c0      	movs	r3, #192	; 0xc0
 8002ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d06:	4619      	mov	r1, r3
 8002d08:	4809      	ldr	r0, [pc, #36]	; (8002d30 <HAL_UART_MspInit+0xc8>)
 8002d0a:	f000 fe87 	bl	8003a1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2100      	movs	r1, #0
 8002d12:	2025      	movs	r0, #37	; 0x25
 8002d14:	f000 fbf5 	bl	8003502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d18:	2025      	movs	r0, #37	; 0x25
 8002d1a:	f000 fc0e 	bl	800353a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d1e:	bf00      	nop
 8002d20:	37b0      	adds	r7, #176	; 0xb0
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	48000400 	.word	0x48000400

08002d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <NMI_Handler+0x4>

08002d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d3e:	e7fe      	b.n	8002d3e <HardFault_Handler+0x4>

08002d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <MemManage_Handler+0x4>

08002d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4a:	e7fe      	b.n	8002d4a <BusFault_Handler+0x4>

08002d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <UsageFault_Handler+0x4>

08002d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d80:	f000 faa0 	bl	80032c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <TIM2_IRQHandler+0x10>)
 8002d8e:	f003 ffff 	bl	8006d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200015b0 	.word	0x200015b0

08002d9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <TIM3_IRQHandler+0x10>)
 8002da2:	f003 fff5 	bl	8006d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200015fc 	.word	0x200015fc

08002db0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <TIM4_IRQHandler+0x10>)
 8002db6:	f003 ffeb 	bl	8006d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20001648 	.word	0x20001648

08002dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <USART1_IRQHandler+0x10>)
 8002dca:	f004 fcd3 	bl	8007774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200016e0 	.word	0x200016e0

08002dd8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <TIM5_IRQHandler+0x10>)
 8002dde:	f003 ffd7 	bl	8006d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20001694 	.word	0x20001694

08002dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return 1;
 8002df0:	2301      	movs	r3, #1
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_kill>:

int _kill(int pid, int sig)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e06:	f006 ff43 	bl	8009c90 <__errno>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2216      	movs	r2, #22
 8002e0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_exit>:

void _exit (int status)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ffe7 	bl	8002dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e2e:	e7fe      	b.n	8002e2e <_exit+0x12>

08002e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e00a      	b.n	8002e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e42:	f3af 8000 	nop.w
 8002e46:	4601      	mov	r1, r0
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	60ba      	str	r2, [r7, #8]
 8002e4e:	b2ca      	uxtb	r2, r1
 8002e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dbf0      	blt.n	8002e42 <_read+0x12>
  }

  return len;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e009      	b.n	8002e90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	60ba      	str	r2, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dbf1      	blt.n	8002e7c <_write+0x12>
  }
  return len;
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_close>:

int _close(int file)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eca:	605a      	str	r2, [r3, #4]
  return 0;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_isatty>:

int _isatty(int file)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <_sbrk+0x5c>)
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <_sbrk+0x60>)
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <_sbrk+0x64>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <_sbrk+0x64>)
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <_sbrk+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d207      	bcs.n	8002f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f3c:	f006 fea8 	bl	8009c90 <__errno>
 8002f40:	4603      	mov	r3, r0
 8002f42:	220c      	movs	r2, #12
 8002f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f4a:	e009      	b.n	8002f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <_sbrk+0x64>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <_sbrk+0x64>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <_sbrk+0x64>)
 8002f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20018000 	.word	0x20018000
 8002f6c:	00000400 	.word	0x00000400
 8002f70:	20001944 	.word	0x20001944
 8002f74:	20001a98 	.word	0x20001a98

08002f78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <SystemInit+0x20>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <SystemInit+0x20>)
 8002f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fa0:	f7ff ffea 	bl	8002f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fa4:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fa6:	490d      	ldr	r1, [pc, #52]	; (8002fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <LoopForever+0xe>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fac:	e002      	b.n	8002fb4 <LoopCopyDataInit>

08002fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb2:	3304      	adds	r3, #4

08002fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb8:	d3f9      	bcc.n	8002fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fba:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fbc:	4c0a      	ldr	r4, [pc, #40]	; (8002fe8 <LoopForever+0x16>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc0:	e001      	b.n	8002fc6 <LoopFillZerobss>

08002fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc4:	3204      	adds	r2, #4

08002fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc8:	d3fb      	bcc.n	8002fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fca:	f006 fe67 	bl	8009c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fce:	f7fd ffe7 	bl	8000fa0 <main>

08002fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002fd2:	e7fe      	b.n	8002fd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002fd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fdc:	200014e8 	.word	0x200014e8
  ldr r2, =_sidata
 8002fe0:	0808ab90 	.word	0x0808ab90
  ldr r2, =_sbss
 8002fe4:	200014e8 	.word	0x200014e8
  ldr r4, =_ebss
 8002fe8:	20001a98 	.word	0x20001a98

08002fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fec:	e7fe      	b.n	8002fec <ADC1_2_IRQHandler>

08002fee <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002ffc:	2110      	movs	r1, #16
 8002ffe:	20d4      	movs	r0, #212	; 0xd4
 8003000:	f7fe fff4 	bl	8001fec <SENSOR_IO_Read>
 8003004:	4603      	mov	r3, r0
 8003006:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800300c:	7bbb      	ldrb	r3, [r7, #14]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003014:	7bba      	ldrb	r2, [r7, #14]
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	4313      	orrs	r3, r2
 800301a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800301c:	7bbb      	ldrb	r3, [r7, #14]
 800301e:	461a      	mov	r2, r3
 8003020:	2110      	movs	r1, #16
 8003022:	20d4      	movs	r0, #212	; 0xd4
 8003024:	f7fe ffc8 	bl	8001fb8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003028:	2112      	movs	r1, #18
 800302a:	20d4      	movs	r0, #212	; 0xd4
 800302c:	f7fe ffde 	bl	8001fec <SENSOR_IO_Read>
 8003030:	4603      	mov	r3, r0
 8003032:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	b29b      	uxth	r3, r3
 800303a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800303c:	7bbb      	ldrb	r3, [r7, #14]
 800303e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003042:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003044:	7bba      	ldrb	r2, [r7, #14]
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	4313      	orrs	r3, r2
 800304a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800304c:	7bbb      	ldrb	r3, [r7, #14]
 800304e:	461a      	mov	r2, r3
 8003050:	2112      	movs	r1, #18
 8003052:	20d4      	movs	r0, #212	; 0xd4
 8003054:	f7fe ffb0 	bl	8001fb8 <SENSOR_IO_Write>
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003066:	2300      	movs	r3, #0
 8003068:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800306a:	2110      	movs	r1, #16
 800306c:	20d4      	movs	r0, #212	; 0xd4
 800306e:	f7fe ffbd 	bl	8001fec <SENSOR_IO_Read>
 8003072:	4603      	mov	r3, r0
 8003074:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	461a      	mov	r2, r3
 8003082:	2110      	movs	r1, #16
 8003084:	20d4      	movs	r0, #212	; 0xd4
 8003086:	f7fe ff97 	bl	8001fb8 <SENSOR_IO_Write>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003092:	b580      	push	{r7, lr}
 8003094:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003096:	f7fe ff85 	bl	8001fa4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800309a:	210f      	movs	r1, #15
 800309c:	20d4      	movs	r0, #212	; 0xd4
 800309e:	f7fe ffa5 	bl	8001fec <SENSOR_IO_Read>
 80030a2:	4603      	mov	r3, r0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80030b2:	2300      	movs	r3, #0
 80030b4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80030b6:	2115      	movs	r1, #21
 80030b8:	20d4      	movs	r0, #212	; 0xd4
 80030ba:	f7fe ff97 	bl	8001fec <SENSOR_IO_Read>
 80030be:	4603      	mov	r3, r0
 80030c0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	f023 0310 	bic.w	r3, r3, #16
 80030c8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	f043 0310 	orr.w	r3, r3, #16
 80030d6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	461a      	mov	r2, r3
 80030dc:	2115      	movs	r1, #21
 80030de:	20d4      	movs	r0, #212	; 0xd4
 80030e0:	f7fe ff6a 	bl	8001fb8 <SENSOR_IO_Write>
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003102:	2110      	movs	r1, #16
 8003104:	20d4      	movs	r0, #212	; 0xd4
 8003106:	f7fe ff71 	bl	8001fec <SENSOR_IO_Read>
 800310a:	4603      	mov	r3, r0
 800310c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800310e:	f107 0208 	add.w	r2, r7, #8
 8003112:	2306      	movs	r3, #6
 8003114:	2128      	movs	r1, #40	; 0x28
 8003116:	20d4      	movs	r0, #212	; 0xd4
 8003118:	f7fe ff86 	bl	8002028 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e01c      	b.n	800315c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	3301      	adds	r3, #1
 8003128:	3320      	adds	r3, #32
 800312a:	443b      	add	r3, r7
 800312c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003130:	b29b      	uxth	r3, r3
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	b29a      	uxth	r2, r3
 8003136:	7ffb      	ldrb	r3, [r7, #31]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	3320      	adds	r3, #32
 800313c:	443b      	add	r3, r7
 800313e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4413      	add	r3, r2
 8003146:	b29a      	uxth	r2, r3
 8003148:	7ffb      	ldrb	r3, [r7, #31]
 800314a:	b212      	sxth	r2, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	3320      	adds	r3, #32
 8003150:	443b      	add	r3, r7
 8003152:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	3301      	adds	r3, #1
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	7ffb      	ldrb	r3, [r7, #31]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d9df      	bls.n	8003122 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d829      	bhi.n	80031c0 <LSM6DSL_AccReadXYZ+0xd4>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <LSM6DSL_AccReadXYZ+0x88>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031c1 	.word	0x080031c1
 800317c:	080031c1 	.word	0x080031c1
 8003180:	080031c1 	.word	0x080031c1
 8003184:	080031bb 	.word	0x080031bb
 8003188:	080031c1 	.word	0x080031c1
 800318c:	080031c1 	.word	0x080031c1
 8003190:	080031c1 	.word	0x080031c1
 8003194:	080031af 	.word	0x080031af
 8003198:	080031c1 	.word	0x080031c1
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080031c1 	.word	0x080031c1
 80031a4:	080031b5 	.word	0x080031b5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <LSM6DSL_AccReadXYZ+0x120>)
 80031aa:	61bb      	str	r3, [r7, #24]
    break;
 80031ac:	e008      	b.n	80031c0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <LSM6DSL_AccReadXYZ+0x124>)
 80031b0:	61bb      	str	r3, [r7, #24]
    break;
 80031b2:	e005      	b.n	80031c0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <LSM6DSL_AccReadXYZ+0x128>)
 80031b6:	61bb      	str	r3, [r7, #24]
    break;
 80031b8:	e002      	b.n	80031c0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80031ba:	4b17      	ldr	r3, [pc, #92]	; (8003218 <LSM6DSL_AccReadXYZ+0x12c>)
 80031bc:	61bb      	str	r3, [r7, #24]
    break;    
 80031be:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e01a      	b.n	80031fc <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	3320      	adds	r3, #32
 80031cc:	443b      	add	r3, r7
 80031ce:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031da:	edd7 7a06 	vldr	s15, [r7, #24]
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ee:	ee17 2a90 	vmov	r2, s15
 80031f2:	b212      	sxth	r2, r2
 80031f4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
 80031f8:	3301      	adds	r3, #1
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	7ffb      	ldrb	r3, [r7, #31]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d9e1      	bls.n	80031c6 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	3d79db23 	.word	0x3d79db23
 8003210:	3df9db23 	.word	0x3df9db23
 8003214:	3e79db23 	.word	0x3e79db23
 8003218:	3ef9db23 	.word	0x3ef9db23

0800321c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003226:	2003      	movs	r0, #3
 8003228:	f000 f960 	bl	80034ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800322c:	2000      	movs	r0, #0
 800322e:	f000 f80d 	bl	800324c <HAL_InitTick>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	71fb      	strb	r3, [r7, #7]
 800323c:	e001      	b.n	8003242 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800323e:	f7ff fb57 	bl	80028f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003242:	79fb      	ldrb	r3, [r7, #7]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_InitTick+0x6c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d023      	beq.n	80032a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_InitTick+0x70>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_InitTick+0x6c>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f96d 	bl	8003556 <HAL_SYSTICK_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	d809      	bhi.n	800329c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003288:	2200      	movs	r2, #0
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003290:	f000 f937 	bl	8003502 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HAL_InitTick+0x74>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e007      	b.n	80032ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
 80032a0:	e004      	b.n	80032ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	e001      	b.n	80032ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	2000130c 	.word	0x2000130c
 80032bc:	200012d0 	.word	0x200012d0
 80032c0:	20001308 	.word	0x20001308

080032c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_IncTick+0x20>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_IncTick+0x24>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4413      	add	r3, r2
 80032d4:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <HAL_IncTick+0x24>)
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	2000130c 	.word	0x2000130c
 80032e8:	20001948 	.word	0x20001948

080032ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_GetTick+0x14>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20001948 	.word	0x20001948

08003304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff ffee 	bl	80032ec <HAL_GetTick>
 8003310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331c:	d005      	beq.n	800332a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_Delay+0x44>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800332a:	bf00      	nop
 800332c:	f7ff ffde 	bl	80032ec <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	429a      	cmp	r2, r3
 800333a:	d8f7      	bhi.n	800332c <HAL_Delay+0x28>
  {
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	2000130c 	.word	0x2000130c

0800334c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <__NVIC_SetPriorityGrouping+0x44>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003368:	4013      	ands	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337e:	4a04      	ldr	r2, [pc, #16]	; (8003390 <__NVIC_SetPriorityGrouping+0x44>)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	60d3      	str	r3, [r2, #12]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <__NVIC_GetPriorityGrouping+0x18>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	f003 0307 	and.w	r3, r3, #7
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	db0b      	blt.n	80033da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4907      	ldr	r1, [pc, #28]	; (80033e8 <__NVIC_EnableIRQ+0x38>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2001      	movs	r0, #1
 80033d2:	fa00 f202 	lsl.w	r2, r0, r2
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000e100 	.word	0xe000e100

080033ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	db0a      	blt.n	8003416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	490c      	ldr	r1, [pc, #48]	; (8003438 <__NVIC_SetPriority+0x4c>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	440b      	add	r3, r1
 8003410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003414:	e00a      	b.n	800342c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4908      	ldr	r1, [pc, #32]	; (800343c <__NVIC_SetPriority+0x50>)
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	3b04      	subs	r3, #4
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	440b      	add	r3, r1
 800342a:	761a      	strb	r2, [r3, #24]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000e100 	.word	0xe000e100
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003440:	b480      	push	{r7}
 8003442:	b089      	sub	sp, #36	; 0x24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f1c3 0307 	rsb	r3, r3, #7
 800345a:	2b04      	cmp	r3, #4
 800345c:	bf28      	it	cs
 800345e:	2304      	movcs	r3, #4
 8003460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3304      	adds	r3, #4
 8003466:	2b06      	cmp	r3, #6
 8003468:	d902      	bls.n	8003470 <NVIC_EncodePriority+0x30>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3b03      	subs	r3, #3
 800346e:	e000      	b.n	8003472 <NVIC_EncodePriority+0x32>
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	401a      	ands	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	43d9      	mvns	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	4313      	orrs	r3, r2
         );
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	; 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b8:	d301      	bcc.n	80034be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ba:	2301      	movs	r3, #1
 80034bc:	e00f      	b.n	80034de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <SysTick_Config+0x40>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034c6:	210f      	movs	r1, #15
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034cc:	f7ff ff8e 	bl	80033ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <SysTick_Config+0x40>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d6:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <SysTick_Config+0x40>)
 80034d8:	2207      	movs	r2, #7
 80034da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	e000e010 	.word	0xe000e010

080034ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff29 	bl	800334c <__NVIC_SetPriorityGrouping>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003514:	f7ff ff3e 	bl	8003394 <__NVIC_GetPriorityGrouping>
 8003518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	6978      	ldr	r0, [r7, #20]
 8003520:	f7ff ff8e 	bl	8003440 <NVIC_EncodePriority>
 8003524:	4602      	mov	r2, r0
 8003526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff5d 	bl	80033ec <__NVIC_SetPriority>
}
 8003532:	bf00      	nop
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff31 	bl	80033b0 <__NVIC_EnableIRQ>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ffa2 	bl	80034a8 <SysTick_Config>
 8003564:	4603      	mov	r3, r0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e014      	b.n	80035aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	791b      	ldrb	r3, [r3, #4]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff f9d1 	bl	8002938 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	795b      	ldrb	r3, [r3, #5]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_DAC_Start+0x16>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e03b      	b.n	8003640 <HAL_DAC_Start+0x8e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2201      	movs	r2, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d118      	bne.n	8003632 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	e00f      	b.n	8003632 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800361c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003620:	d107      	bne.n	8003632 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0202 	orr.w	r2, r2, #2
 8003630:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2201      	movs	r2, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43da      	mvns	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	400a      	ands	r2, r1
 8003670:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	3308      	adds	r3, #8
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e004      	b.n	80036ba <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	3314      	adds	r3, #20
 80036b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	461a      	mov	r2, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	795b      	ldrb	r3, [r3, #5]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_DAC_ConfigChannel+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e114      	b.n	8003916 <HAL_DAC_ConfigChannel+0x246>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2202      	movs	r2, #2
 80036f6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	f040 8081 	bne.w	8003804 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003702:	f7ff fdf3 	bl	80032ec <HAL_GetTick>
 8003706:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d140      	bne.n	8003790 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800370e:	e018      	b.n	8003742 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003710:	f7ff fdec 	bl	80032ec <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d911      	bls.n	8003742 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f043 0208 	orr.w	r2, r3, #8
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2203      	movs	r2, #3
 800373c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0e9      	b.n	8003916 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1df      	bne.n	8003710 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003750:	2001      	movs	r0, #1
 8003752:	f7ff fdd7 	bl	8003304 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	6992      	ldr	r2, [r2, #24]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
 8003760:	e023      	b.n	80037aa <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003762:	f7ff fdc3 	bl	80032ec <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d90f      	bls.n	8003790 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003776:	2b00      	cmp	r3, #0
 8003778:	da0a      	bge.n	8003790 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f043 0208 	orr.w	r2, r3, #8
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2203      	movs	r2, #3
 800378a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e0c2      	b.n	8003916 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	2b00      	cmp	r3, #0
 8003798:	dbe3      	blt.n	8003762 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800379a:	2001      	movs	r0, #1
 800379c:	f7ff fdb2 	bl	8003304 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	6992      	ldr	r2, [r2, #24]
 80037a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	ea02 0103 	and.w	r1, r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	409a      	lsls	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	21ff      	movs	r1, #255	; 0xff
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	ea02 0103 	and.w	r1, r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d11d      	bne.n	8003848 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	221f      	movs	r2, #31
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2207      	movs	r2, #7
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	431a      	orrs	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43da      	mvns	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	400a      	ands	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	f640 72fc 	movw	r2, #4092	; 0xffc
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6819      	ldr	r1, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	22c0      	movs	r2, #192	; 0xc0
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	400a      	ands	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d008      	beq.n	8003948 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2204      	movs	r2, #4
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e022      	b.n	800398e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 020e 	bic.w	r2, r2, #14
 8003956:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	f003 021c 	and.w	r2, r3, #28
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f202 	lsl.w	r2, r1, r2
 800397a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d005      	beq.n	80039be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e029      	b.n	8003a12 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 020e 	bic.w	r2, r2, #14
 80039cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f003 021c 	and.w	r2, r3, #28
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2101      	movs	r1, #1
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
    }
  }
  return status;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2a:	e17f      	b.n	8003d2c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2101      	movs	r1, #1
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8171 	beq.w	8003d26 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d005      	beq.n	8003a5c <HAL_GPIO_Init+0x40>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d130      	bne.n	8003abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2203      	movs	r2, #3
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a92:	2201      	movs	r2, #1
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	f003 0201 	and.w	r2, r3, #1
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d118      	bne.n	8003afc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	08db      	lsrs	r3, r3, #3
 8003ae6:	f003 0201 	and.w	r2, r3, #1
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d017      	beq.n	8003b38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d123      	bne.n	8003b8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	08da      	lsrs	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3208      	adds	r2, #8
 8003b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	08da      	lsrs	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3208      	adds	r2, #8
 8003b86:	6939      	ldr	r1, [r7, #16]
 8003b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	2203      	movs	r2, #3
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0203 	and.w	r2, r3, #3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80ac 	beq.w	8003d26 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bce:	4b5f      	ldr	r3, [pc, #380]	; (8003d4c <HAL_GPIO_Init+0x330>)
 8003bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd2:	4a5e      	ldr	r2, [pc, #376]	; (8003d4c <HAL_GPIO_Init+0x330>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8003bda:	4b5c      	ldr	r3, [pc, #368]	; (8003d4c <HAL_GPIO_Init+0x330>)
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003be6:	4a5a      	ldr	r2, [pc, #360]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_Init+0x242>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4f      	ldr	r2, [pc, #316]	; (8003d54 <HAL_GPIO_Init+0x338>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_Init+0x23e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4e      	ldr	r2, [pc, #312]	; (8003d58 <HAL_GPIO_Init+0x33c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x23a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4d      	ldr	r2, [pc, #308]	; (8003d5c <HAL_GPIO_Init+0x340>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x236>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4c      	ldr	r2, [pc, #304]	; (8003d60 <HAL_GPIO_Init+0x344>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x232>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4b      	ldr	r2, [pc, #300]	; (8003d64 <HAL_GPIO_Init+0x348>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x22e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4a      	ldr	r2, [pc, #296]	; (8003d68 <HAL_GPIO_Init+0x34c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x22a>
 8003c42:	2306      	movs	r3, #6
 8003c44:	e00c      	b.n	8003c60 <HAL_GPIO_Init+0x244>
 8003c46:	2307      	movs	r3, #7
 8003c48:	e00a      	b.n	8003c60 <HAL_GPIO_Init+0x244>
 8003c4a:	2305      	movs	r3, #5
 8003c4c:	e008      	b.n	8003c60 <HAL_GPIO_Init+0x244>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	e006      	b.n	8003c60 <HAL_GPIO_Init+0x244>
 8003c52:	2303      	movs	r3, #3
 8003c54:	e004      	b.n	8003c60 <HAL_GPIO_Init+0x244>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e002      	b.n	8003c60 <HAL_GPIO_Init+0x244>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_GPIO_Init+0x244>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	f002 0203 	and.w	r2, r2, #3
 8003c66:	0092      	lsls	r2, r2, #2
 8003c68:	4093      	lsls	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c70:	4937      	ldr	r1, [pc, #220]	; (8003d50 <HAL_GPIO_Init+0x334>)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	3302      	adds	r3, #2
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_GPIO_Init+0x350>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ca2:	4a32      	ldr	r2, [pc, #200]	; (8003d6c <HAL_GPIO_Init+0x350>)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ca8:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <HAL_GPIO_Init+0x350>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ccc:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <HAL_GPIO_Init+0x350>)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cd2:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <HAL_GPIO_Init+0x350>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_GPIO_Init+0x350>)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_GPIO_Init+0x350>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	43db      	mvns	r3, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d20:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <HAL_GPIO_Init+0x350>)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f47f ae78 	bne.w	8003a2c <HAL_GPIO_Init+0x10>
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40010000 	.word	0x40010000
 8003d54:	48000400 	.word	0x48000400
 8003d58:	48000800 	.word	0x48000800
 8003d5c:	48000c00 	.word	0x48000c00
 8003d60:	48001000 	.word	0x48001000
 8003d64:	48001400 	.word	0x48001400
 8003d68:	48001800 	.word	0x48001800
 8003d6c:	40010400 	.word	0x40010400

08003d70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003d7e:	e0cd      	b.n	8003f1c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003d80:	2201      	movs	r2, #1
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80c0 	beq.w	8003f16 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003d96:	4a68      	ldr	r2, [pc, #416]	; (8003f38 <HAL_GPIO_DeInit+0x1c8>)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	220f      	movs	r2, #15
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4013      	ands	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dbe:	d025      	beq.n	8003e0c <HAL_GPIO_DeInit+0x9c>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a5e      	ldr	r2, [pc, #376]	; (8003f3c <HAL_GPIO_DeInit+0x1cc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01f      	beq.n	8003e08 <HAL_GPIO_DeInit+0x98>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a5d      	ldr	r2, [pc, #372]	; (8003f40 <HAL_GPIO_DeInit+0x1d0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d019      	beq.n	8003e04 <HAL_GPIO_DeInit+0x94>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a5c      	ldr	r2, [pc, #368]	; (8003f44 <HAL_GPIO_DeInit+0x1d4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_GPIO_DeInit+0x90>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a5b      	ldr	r2, [pc, #364]	; (8003f48 <HAL_GPIO_DeInit+0x1d8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00d      	beq.n	8003dfc <HAL_GPIO_DeInit+0x8c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a5a      	ldr	r2, [pc, #360]	; (8003f4c <HAL_GPIO_DeInit+0x1dc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <HAL_GPIO_DeInit+0x88>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a59      	ldr	r2, [pc, #356]	; (8003f50 <HAL_GPIO_DeInit+0x1e0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_GPIO_DeInit+0x84>
 8003df0:	2306      	movs	r3, #6
 8003df2:	e00c      	b.n	8003e0e <HAL_GPIO_DeInit+0x9e>
 8003df4:	2307      	movs	r3, #7
 8003df6:	e00a      	b.n	8003e0e <HAL_GPIO_DeInit+0x9e>
 8003df8:	2305      	movs	r3, #5
 8003dfa:	e008      	b.n	8003e0e <HAL_GPIO_DeInit+0x9e>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	e006      	b.n	8003e0e <HAL_GPIO_DeInit+0x9e>
 8003e00:	2303      	movs	r3, #3
 8003e02:	e004      	b.n	8003e0e <HAL_GPIO_DeInit+0x9e>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e002      	b.n	8003e0e <HAL_GPIO_DeInit+0x9e>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_GPIO_DeInit+0x9e>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	f002 0203 	and.w	r2, r2, #3
 8003e14:	0092      	lsls	r2, r2, #2
 8003e16:	4093      	lsls	r3, r2
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d132      	bne.n	8003e84 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e1e:	4b4d      	ldr	r3, [pc, #308]	; (8003f54 <HAL_GPIO_DeInit+0x1e4>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	494b      	ldr	r1, [pc, #300]	; (8003f54 <HAL_GPIO_DeInit+0x1e4>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003e2c:	4b49      	ldr	r3, [pc, #292]	; (8003f54 <HAL_GPIO_DeInit+0x1e4>)
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	4947      	ldr	r1, [pc, #284]	; (8003f54 <HAL_GPIO_DeInit+0x1e4>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003e3a:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_GPIO_DeInit+0x1e4>)
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	4944      	ldr	r1, [pc, #272]	; (8003f54 <HAL_GPIO_DeInit+0x1e4>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e48:	4b42      	ldr	r3, [pc, #264]	; (8003f54 <HAL_GPIO_DeInit+0x1e4>)
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	4940      	ldr	r1, [pc, #256]	; (8003f54 <HAL_GPIO_DeInit+0x1e4>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	220f      	movs	r2, #15
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003e66:	4a34      	ldr	r2, [pc, #208]	; (8003f38 <HAL_GPIO_DeInit+0x1c8>)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	43da      	mvns	r2, r3
 8003e76:	4830      	ldr	r0, [pc, #192]	; (8003f38 <HAL_GPIO_DeInit+0x1c8>)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	3302      	adds	r3, #2
 8003e80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	2103      	movs	r1, #3
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	08da      	lsrs	r2, r3, #3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3208      	adds	r2, #8
 8003ea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	220f      	movs	r2, #15
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	08d2      	lsrs	r2, r2, #3
 8003eb8:	4019      	ands	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3208      	adds	r2, #8
 8003ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2103      	movs	r1, #3
 8003ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	2101      	movs	r1, #1
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2103      	movs	r1, #3
 8003ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	401a      	ands	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f06:	2101      	movs	r1, #1
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	401a      	ands	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f47f af2b 	bne.w	8003d80 <HAL_GPIO_DeInit+0x10>
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	48000400 	.word	0x48000400
 8003f40:	48000800 	.word	0x48000800
 8003f44:	48000c00 	.word	0x48000c00
 8003f48:	48001000 	.word	0x48001000
 8003f4c:	48001400 	.word	0x48001400
 8003f50:	48001800 	.word	0x48001800
 8003f54:	40010400 	.word	0x40010400

08003f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e08d      	b.n	8004086 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fe fd18 	bl	80029b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	e006      	b.n	8003fe0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d108      	bne.n	8003ffa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	e007      	b.n	800400a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004008:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800401c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800402c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69d9      	ldr	r1, [r3, #28]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e021      	b.n	80040e4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	; 0x24
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fe fcd9 	bl	8002a70 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	460b      	mov	r3, r1
 8004100:	813b      	strh	r3, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b20      	cmp	r3, #32
 8004110:	f040 80f9 	bne.w	8004306 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_I2C_Mem_Write+0x34>
 800411a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004126:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0ed      	b.n	8004308 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_I2C_Mem_Write+0x4e>
 8004136:	2302      	movs	r3, #2
 8004138:	e0e6      	b.n	8004308 <HAL_I2C_Mem_Write+0x21c>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004142:	f7ff f8d3 	bl	80032ec <HAL_GetTick>
 8004146:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2319      	movs	r3, #25
 800414e:	2201      	movs	r2, #1
 8004150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fac3 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0d1      	b.n	8004308 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2221      	movs	r2, #33	; 0x21
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2240      	movs	r2, #64	; 0x40
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a3a      	ldr	r2, [r7, #32]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004184:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800418c:	88f8      	ldrh	r0, [r7, #6]
 800418e:	893a      	ldrh	r2, [r7, #8]
 8004190:	8979      	ldrh	r1, [r7, #10]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	9301      	str	r3, [sp, #4]
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	4603      	mov	r3, r0
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f9d3 	bl	8004548 <I2C_RequestMemoryWrite>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0a9      	b.n	8004308 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2bff      	cmp	r3, #255	; 0xff
 80041bc:	d90e      	bls.n	80041dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	22ff      	movs	r2, #255	; 0xff
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	8979      	ldrh	r1, [r7, #10]
 80041cc:	2300      	movs	r3, #0
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fc3d 	bl	8004a54 <I2C_TransferConfig>
 80041da:	e00f      	b.n	80041fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	8979      	ldrh	r1, [r7, #10]
 80041ee:	2300      	movs	r3, #0
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fc2c 	bl	8004a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fabc 	bl	800477e <I2C_WaitOnTXISFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e07b      	b.n	8004308 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d034      	beq.n	80042b4 <HAL_I2C_Mem_Write+0x1c8>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d130      	bne.n	80042b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	2200      	movs	r2, #0
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fa3f 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e04d      	b.n	8004308 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	2bff      	cmp	r3, #255	; 0xff
 8004274:	d90e      	bls.n	8004294 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	22ff      	movs	r2, #255	; 0xff
 800427a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004280:	b2da      	uxtb	r2, r3
 8004282:	8979      	ldrh	r1, [r7, #10]
 8004284:	2300      	movs	r3, #0
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fbe1 	bl	8004a54 <I2C_TransferConfig>
 8004292:	e00f      	b.n	80042b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	8979      	ldrh	r1, [r7, #10]
 80042a6:	2300      	movs	r3, #0
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fbd0 	bl	8004a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d19e      	bne.n	80041fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 faa2 	bl	800480c <I2C_WaitOnSTOPFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e01a      	b.n	8004308 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2220      	movs	r2, #32
 80042d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <HAL_I2C_Mem_Write+0x224>)
 80042e6:	400b      	ands	r3, r1
 80042e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e000      	b.n	8004308 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004306:	2302      	movs	r3, #2
  }
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	fe00e800 	.word	0xfe00e800

08004314 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	4608      	mov	r0, r1
 800431e:	4611      	mov	r1, r2
 8004320:	461a      	mov	r2, r3
 8004322:	4603      	mov	r3, r0
 8004324:	817b      	strh	r3, [r7, #10]
 8004326:	460b      	mov	r3, r1
 8004328:	813b      	strh	r3, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b20      	cmp	r3, #32
 8004338:	f040 80fd 	bne.w	8004536 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_I2C_Mem_Read+0x34>
 8004342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d105      	bne.n	8004354 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0f1      	b.n	8004538 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_I2C_Mem_Read+0x4e>
 800435e:	2302      	movs	r3, #2
 8004360:	e0ea      	b.n	8004538 <HAL_I2C_Mem_Read+0x224>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800436a:	f7fe ffbf 	bl	80032ec <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2319      	movs	r3, #25
 8004376:	2201      	movs	r2, #1
 8004378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f9af 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0d5      	b.n	8004538 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2222      	movs	r2, #34	; 0x22
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a3a      	ldr	r2, [r7, #32]
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b4:	88f8      	ldrh	r0, [r7, #6]
 80043b6:	893a      	ldrh	r2, [r7, #8]
 80043b8:	8979      	ldrh	r1, [r7, #10]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	4603      	mov	r3, r0
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f913 	bl	80045f0 <I2C_RequestMemoryRead>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0ad      	b.n	8004538 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2bff      	cmp	r3, #255	; 0xff
 80043e4:	d90e      	bls.n	8004404 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	22ff      	movs	r2, #255	; 0xff
 80043ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	8979      	ldrh	r1, [r7, #10]
 80043f4:	4b52      	ldr	r3, [pc, #328]	; (8004540 <HAL_I2C_Mem_Read+0x22c>)
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fb29 	bl	8004a54 <I2C_TransferConfig>
 8004402:	e00f      	b.n	8004424 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004412:	b2da      	uxtb	r2, r3
 8004414:	8979      	ldrh	r1, [r7, #10]
 8004416:	4b4a      	ldr	r3, [pc, #296]	; (8004540 <HAL_I2C_Mem_Read+0x22c>)
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fb18 	bl	8004a54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	2200      	movs	r2, #0
 800442c:	2104      	movs	r1, #4
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f956 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07c      	b.n	8004538 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d034      	beq.n	80044e4 <HAL_I2C_Mem_Read+0x1d0>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d130      	bne.n	80044e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004488:	2200      	movs	r2, #0
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f927 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e04d      	b.n	8004538 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2bff      	cmp	r3, #255	; 0xff
 80044a4:	d90e      	bls.n	80044c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	22ff      	movs	r2, #255	; 0xff
 80044aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	8979      	ldrh	r1, [r7, #10]
 80044b4:	2300      	movs	r3, #0
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 fac9 	bl	8004a54 <I2C_TransferConfig>
 80044c2:	e00f      	b.n	80044e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	8979      	ldrh	r1, [r7, #10]
 80044d6:	2300      	movs	r3, #0
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fab8 	bl	8004a54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d19a      	bne.n	8004424 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f98a 	bl	800480c <I2C_WaitOnSTOPFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e01a      	b.n	8004538 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2220      	movs	r2, #32
 8004508:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_I2C_Mem_Read+0x230>)
 8004516:	400b      	ands	r3, r1
 8004518:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	80002400 	.word	0x80002400
 8004544:	fe00e800 	.word	0xfe00e800

08004548 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	461a      	mov	r2, r3
 8004556:	4603      	mov	r3, r0
 8004558:	817b      	strh	r3, [r7, #10]
 800455a:	460b      	mov	r3, r1
 800455c:	813b      	strh	r3, [r7, #8]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	8979      	ldrh	r1, [r7, #10]
 8004568:	4b20      	ldr	r3, [pc, #128]	; (80045ec <I2C_RequestMemoryWrite+0xa4>)
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fa6f 	bl	8004a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f8ff 	bl	800477e <I2C_WaitOnTXISFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e02c      	b.n	80045e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004590:	893b      	ldrh	r3, [r7, #8]
 8004592:	b2da      	uxtb	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	629a      	str	r2, [r3, #40]	; 0x28
 800459a:	e015      	b.n	80045c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	69b9      	ldr	r1, [r7, #24]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f8e5 	bl	800477e <I2C_WaitOnTXISFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e012      	b.n	80045e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045be:	893b      	ldrh	r3, [r7, #8]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2200      	movs	r2, #0
 80045d0:	2180      	movs	r1, #128	; 0x80
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 f884 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	80002000 	.word	0x80002000

080045f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	460b      	mov	r3, r1
 8004604:	813b      	strh	r3, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	8979      	ldrh	r1, [r7, #10]
 8004610:	4b20      	ldr	r3, [pc, #128]	; (8004694 <I2C_RequestMemoryRead+0xa4>)
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fa1c 	bl	8004a54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	69b9      	ldr	r1, [r7, #24]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f8ac 	bl	800477e <I2C_WaitOnTXISFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e02c      	b.n	800468a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004636:	893b      	ldrh	r3, [r7, #8]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
 8004640:	e015      	b.n	800466e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004642:	893b      	ldrh	r3, [r7, #8]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	b29b      	uxth	r3, r3
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	69b9      	ldr	r1, [r7, #24]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f892 	bl	800477e <I2C_WaitOnTXISFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e012      	b.n	800468a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004664:	893b      	ldrh	r3, [r7, #8]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2200      	movs	r2, #0
 8004676:	2140      	movs	r1, #64	; 0x40
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f831 	bl	80046e0 <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	80002000 	.word	0x80002000

08004698 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d103      	bne.n	80046b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d007      	beq.n	80046d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	619a      	str	r2, [r3, #24]
  }
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f0:	e031      	b.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f8:	d02d      	beq.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fa:	f7fe fdf7 	bl	80032ec <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d302      	bcc.n	8004710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d122      	bne.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	429a      	cmp	r2, r3
 800472c:	d113      	bne.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f043 0220 	orr.w	r2, r3, #32
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e00f      	b.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	429a      	cmp	r2, r3
 8004772:	d0be      	beq.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800478a:	e033      	b.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f87f 	bl	8004894 <I2C_IsErrorOccurred>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e031      	b.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a6:	d025      	beq.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a8:	f7fe fda0 	bl	80032ec <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d302      	bcc.n	80047be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11a      	bne.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d013      	beq.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e007      	b.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d1c4      	bne.n	800478c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004818:	e02f      	b.n	800487a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f838 	bl	8004894 <I2C_IsErrorOccurred>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e02d      	b.n	800488a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482e:	f7fe fd5d 	bl	80032ec <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	d302      	bcc.n	8004844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11a      	bne.n	800487a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b20      	cmp	r3, #32
 8004850:	d013      	beq.n	800487a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e007      	b.n	800488a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b20      	cmp	r3, #32
 8004886:	d1c8      	bne.n	800481a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	; 0x28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d068      	beq.n	8004992 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2210      	movs	r2, #16
 80048c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048c8:	e049      	b.n	800495e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d0:	d045      	beq.n	800495e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048d2:	f7fe fd0b 	bl	80032ec <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d302      	bcc.n	80048e8 <I2C_IsErrorOccurred+0x54>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d13a      	bne.n	800495e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490a:	d121      	bne.n	8004950 <I2C_IsErrorOccurred+0xbc>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004912:	d01d      	beq.n	8004950 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004914:	7cfb      	ldrb	r3, [r7, #19]
 8004916:	2b20      	cmp	r3, #32
 8004918:	d01a      	beq.n	8004950 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004928:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800492a:	f7fe fcdf 	bl	80032ec <HAL_GetTick>
 800492e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004930:	e00e      	b.n	8004950 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004932:	f7fe fcdb 	bl	80032ec <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b19      	cmp	r3, #25
 800493e:	d907      	bls.n	8004950 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f043 0320 	orr.w	r3, r3, #32
 8004946:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800494e:	e006      	b.n	800495e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b20      	cmp	r3, #32
 800495c:	d1e9      	bne.n	8004932 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b20      	cmp	r3, #32
 800496a:	d003      	beq.n	8004974 <I2C_IsErrorOccurred+0xe0>
 800496c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0aa      	beq.n	80048ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2220      	movs	r2, #32
 8004982:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	f043 0304 	orr.w	r3, r3, #4
 800498a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	f043 0308 	orr.w	r3, r3, #8
 80049cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	f043 0302 	orr.w	r3, r3, #2
 80049ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01c      	beq.n	8004a42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff fe45 	bl	8004698 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <I2C_IsErrorOccurred+0x1bc>)
 8004a1a:	400b      	ands	r3, r1
 8004a1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3728      	adds	r7, #40	; 0x28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	fe00e800 	.word	0xfe00e800

08004a54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	817b      	strh	r3, [r7, #10]
 8004a62:	4613      	mov	r3, r2
 8004a64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a66:	897b      	ldrh	r3, [r7, #10]
 8004a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a6c:	7a7b      	ldrb	r3, [r7, #9]
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	0d5b      	lsrs	r3, r3, #21
 8004a8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <I2C_TransferConfig+0x60>)
 8004a94:	430b      	orrs	r3, r1
 8004a96:	43db      	mvns	r3, r3
 8004a98:	ea02 0103 	and.w	r1, r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	03ff63ff 	.word	0x03ff63ff

08004ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d138      	bne.n	8004b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e032      	b.n	8004b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2224      	movs	r2, #36	; 0x24
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6819      	ldr	r1, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e000      	b.n	8004b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d139      	bne.n	8004bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e033      	b.n	8004bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2224      	movs	r2, #36	; 0x24
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	e000      	b.n	8004bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bd8:	2302      	movs	r3, #2
  }
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40007000 	.word	0x40007000

08004c04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c12:	d130      	bne.n	8004c76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c14:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c20:	d038      	beq.n	8004c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c32:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2232      	movs	r2, #50	; 0x32
 8004c38:	fb02 f303 	mul.w	r3, r2, r3
 8004c3c:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0c9b      	lsrs	r3, r3, #18
 8004c44:	3301      	adds	r3, #1
 8004c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c48:	e002      	b.n	8004c50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5c:	d102      	bne.n	8004c64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f2      	bne.n	8004c4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d110      	bne.n	8004c94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e00f      	b.n	8004c96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c82:	d007      	beq.n	8004c94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c8c:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	200012d0 	.word	0x200012d0
 8004cac:	431bde83 	.word	0x431bde83

08004cb0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004cb8:	f7fe fb18 	bl	80032ec <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e063      	b.n	8004d90 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7fd fee9 	bl	8002ab4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004ce2:	f241 3188 	movw	r1, #5000	; 0x1388
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fb03 	bl	80052f2 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	021a      	lsls	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2120      	movs	r1, #32
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fafb 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004d1c:	7afb      	ldrb	r3, [r7, #11]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d131      	bne.n	8004d86 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004d2c:	f023 0310 	bic.w	r3, r3, #16
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6852      	ldr	r2, [r2, #4]
 8004d34:	0611      	lsls	r1, r2, #24
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68d2      	ldr	r2, [r2, #12]
 8004d3a:	4311      	orrs	r1, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <HAL_QSPI_Init+0xe8>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6912      	ldr	r2, [r2, #16]
 8004d52:	0411      	lsls	r1, r2, #16
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6952      	ldr	r2, [r2, #20]
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6992      	ldr	r2, [r2, #24]
 8004d5e:	4311      	orrs	r1, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	ffe0f8fe 	.word	0xffe0f8fe

08004d9c <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e016      	b.n	8004ddc <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fd febc 	bl	8002b3c <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7fe fa7c 	bl	80032ec <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_QSPI_Command+0x22>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e048      	b.n	8004e98 <HAL_QSPI_Command+0xb4>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d137      	bne.n	8004e8a <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2120      	movs	r1, #32
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fa6b 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d125      	bne.n	8004e8e <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004e42:	2200      	movs	r2, #0
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fa98 	bl	800537c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d115      	bne.n	8004e80 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	2102      	movs	r1, #2
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fa55 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2202      	movs	r2, #2
 8004e74:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004e7e:	e006      	b.n	8004e8e <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004e88:	e001      	b.n	8004e8e <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004eb0:	f7fe fa1c 	bl	80032ec <HAL_GetTick>
 8004eb4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3320      	adds	r3, #32
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_QSPI_Transmit+0x2e>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e07b      	b.n	8004fc6 <HAL_QSPI_Transmit+0x126>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d16a      	bne.n	8004fb8 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d05b      	beq.n	8004fa6 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2212      	movs	r2, #18
 8004ef2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004f22:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004f24:	e01b      	b.n	8004f5e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2104      	movs	r1, #4
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f9ec 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004f3a:	7ffb      	ldrb	r3, [r7, #31]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d113      	bne.n	8004f68 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	1e5a      	subs	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1df      	bne.n	8004f26 <HAL_QSPI_Transmit+0x86>
 8004f66:	e000      	b.n	8004f6a <HAL_QSPI_Transmit+0xca>
          break;
 8004f68:	bf00      	nop
      }

      if (status == HAL_OK)
 8004f6a:	7ffb      	ldrb	r3, [r7, #31]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d115      	bne.n	8004f9c <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2201      	movs	r2, #1
 8004f78:	2102      	movs	r1, #2
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f9c7 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004f84:	7ffb      	ldrb	r3, [r7, #31]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d108      	bne.n	8004f9c <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f934 	bl	8005200 <HAL_QSPI_Abort>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004fa4:	e00a      	b.n	8004fbc <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	f043 0208 	orr.w	r2, r3, #8
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e001      	b.n	8004fbc <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08a      	sub	sp, #40	; 0x28
 8004fd2:	af02      	add	r7, sp, #8
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004fde:	f7fe f985 	bl	80032ec <HAL_GetTick>
 8004fe2:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3320      	adds	r3, #32
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_QSPI_Receive+0x36>
 8005000:	2302      	movs	r3, #2
 8005002:	e082      	b.n	800510a <HAL_QSPI_Receive+0x13c>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	d171      	bne.n	80050fc <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	63da      	str	r2, [r3, #60]	; 0x3c

    if(pData != NULL )
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d062      	beq.n	80050ea <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2222      	movs	r2, #34	; 0x22
 8005028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->pRxBuffPtr = pData;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800505c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8005066:	e01c      	b.n	80050a2 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	2201      	movs	r2, #1
 8005070:	2106      	movs	r1, #6
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f94b 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800507c:	7ffb      	ldrb	r3, [r7, #31]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d114      	bne.n	80050ac <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->RxXferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	1e5a      	subs	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1de      	bne.n	8005068 <HAL_QSPI_Receive+0x9a>
 80050aa:	e000      	b.n	80050ae <HAL_QSPI_Receive+0xe0>
          break;
 80050ac:	bf00      	nop
      }

      if (status == HAL_OK)
 80050ae:	7ffb      	ldrb	r3, [r7, #31]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d115      	bne.n	80050e0 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2201      	movs	r2, #1
 80050bc:	2102      	movs	r1, #2
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f925 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80050c8:	7ffb      	ldrb	r3, [r7, #31]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d108      	bne.n	80050e0 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2202      	movs	r2, #2
 80050d4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f892 	bl	8005200 <HAL_QSPI_Abort>
 80050dc:	4603      	mov	r3, r0
 80050de:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80050e8:	e00a      	b.n	8005100 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	f043 0208 	orr.w	r2, r3, #8
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	63da      	str	r2, [r3, #60]	; 0x3c
      status = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	77fb      	strb	r3, [r7, #31]
 80050fa:	e001      	b.n	8005100 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
 80050fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8005108:	7ffb      	ldrb	r3, [r7, #31]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b088      	sub	sp, #32
 8005116:	af02      	add	r7, sp, #8
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005120:	f7fe f8e4 	bl	80032ec <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_QSPI_AutoPolling+0x24>
 8005132:	2302      	movs	r3, #2
 8005134:	e060      	b.n	80051f8 <HAL_QSPI_AutoPolling+0xe6>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	d14f      	bne.n	80051ea <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2242      	movs	r2, #66	; 0x42
 8005154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2200      	movs	r2, #0
 8005160:	2120      	movs	r1, #32
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f8d3 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d13d      	bne.n	80051ee <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6852      	ldr	r2, [r2, #4]
 8005184:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6892      	ldr	r2, [r2, #8]
 800518e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	431a      	orrs	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80051a8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80051b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f8df 	bl	800537c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2201      	movs	r2, #1
 80051c6:	2108      	movs	r1, #8
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f8a0 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2208      	movs	r2, #8
 80051de:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80051e8:	e001      	b.n	80051ee <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80051ea:	2302      	movs	r3, #2
 80051ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800520c:	f7fe f86e 	bl	80032ec <HAL_GetTick>
 8005210:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d062      	beq.n	80052e8 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d017      	beq.n	8005268 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0204 	bic.w	r2, r2, #4
 8005246:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	4618      	mov	r0, r3
 800524e:	f7fe fb66 	bl	800391e <HAL_DMA_Abort>
 8005252:	4603      	mov	r3, r0
 8005254:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005260:	f043 0204 	orr.w	r2, r3, #4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d034      	beq.n	80052e0 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0202 	orr.w	r2, r2, #2
 8005284:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2201      	movs	r2, #1
 8005290:	2102      	movs	r1, #2
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f83b 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10e      	bne.n	80052c0 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2202      	movs	r2, #2
 80052a8:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	2120      	movs	r1, #32
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f829 	bl	800530e <QSPI_WaitFlagStateUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d110      	bne.n	80052e8 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80052d4:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80052de:	e003      	b.n	80052e8 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
  }

  return status;
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800531e:	e01a      	b.n	8005356 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005326:	d016      	beq.n	8005356 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005328:	f7fd ffe0 	bl	80032ec <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	429a      	cmp	r2, r3
 8005336:	d302      	bcc.n	800533e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10b      	bne.n	8005356 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2204      	movs	r2, #4
 8005342:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e00e      	b.n	8005374 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	429a      	cmp	r2, r3
 8005370:	d1d6      	bne.n	8005320 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <QSPI_Config+0x28>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005396:	d005      	beq.n	80053a4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3a01      	subs	r2, #1
 80053a2:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80b9 	beq.w	8005520 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d05f      	beq.n	8005476 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	6892      	ldr	r2, [r2, #8]
 80053be:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d031      	beq.n	800542c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	431a      	orrs	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	049b      	lsls	r3, r3, #18
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	431a      	orrs	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	ea42 0103 	orr.w	r1, r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	430a      	orrs	r2, r1
 8005414:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800541c:	f000 812e 	beq.w	800567c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	6852      	ldr	r2, [r2, #4]
 8005428:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800542a:	e127      	b.n	800567c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	431a      	orrs	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	431a      	orrs	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	431a      	orrs	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	049b      	lsls	r3, r3, #18
 8005448:	431a      	orrs	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	431a      	orrs	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	431a      	orrs	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	431a      	orrs	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	431a      	orrs	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	ea42 0103 	orr.w	r1, r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	430a      	orrs	r2, r1
 8005472:	615a      	str	r2, [r3, #20]
}
 8005474:	e102      	b.n	800567c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d02e      	beq.n	80054dc <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	431a      	orrs	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	431a      	orrs	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	431a      	orrs	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	049b      	lsls	r3, r3, #18
 800549a:	431a      	orrs	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	ea42 0103 	orr.w	r1, r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054cc:	f000 80d6 	beq.w	800567c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	6852      	ldr	r2, [r2, #4]
 80054d8:	619a      	str	r2, [r3, #24]
}
 80054da:	e0cf      	b.n	800567c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	431a      	orrs	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	431a      	orrs	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	431a      	orrs	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	049b      	lsls	r3, r3, #18
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	431a      	orrs	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	431a      	orrs	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	431a      	orrs	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	ea42 0103 	orr.w	r1, r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	430a      	orrs	r2, r1
 800551c:	615a      	str	r2, [r3, #20]
}
 800551e:	e0ad      	b.n	800567c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d058      	beq.n	80055da <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	6892      	ldr	r2, [r2, #8]
 8005530:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d02d      	beq.n	8005596 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	431a      	orrs	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005548:	431a      	orrs	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	431a      	orrs	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	049b      	lsls	r3, r3, #18
 8005556:	431a      	orrs	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	431a      	orrs	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	431a      	orrs	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	431a      	orrs	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	431a      	orrs	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	ea42 0103 	orr.w	r1, r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	430a      	orrs	r2, r1
 8005580:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005588:	d078      	beq.n	800567c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	6852      	ldr	r2, [r2, #4]
 8005592:	619a      	str	r2, [r3, #24]
}
 8005594:	e072      	b.n	800567c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	431a      	orrs	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	431a      	orrs	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	049b      	lsls	r3, r3, #18
 80055b2:	431a      	orrs	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	431a      	orrs	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	ea42 0103 	orr.w	r1, r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	615a      	str	r2, [r3, #20]
}
 80055d8:	e050      	b.n	800567c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d02a      	beq.n	8005638 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	431a      	orrs	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f0:	431a      	orrs	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	431a      	orrs	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	049b      	lsls	r3, r3, #18
 80055fe:	431a      	orrs	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	431a      	orrs	r2, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	431a      	orrs	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	431a      	orrs	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	ea42 0103 	orr.w	r1, r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	430a      	orrs	r2, r1
 8005622:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800562a:	d027      	beq.n	800567c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	6852      	ldr	r2, [r2, #4]
 8005634:	619a      	str	r2, [r3, #24]
}
 8005636:	e021      	b.n	800567c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01d      	beq.n	800567c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	431a      	orrs	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564e:	431a      	orrs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	431a      	orrs	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	049b      	lsls	r3, r3, #18
 800565c:	431a      	orrs	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	431a      	orrs	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	431a      	orrs	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	ea42 0103 	orr.w	r1, r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	430a      	orrs	r2, r1
 800567a:	615a      	str	r2, [r3, #20]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e3ca      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800569a:	4b97      	ldr	r3, [pc, #604]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056a4:	4b94      	ldr	r3, [pc, #592]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 80e4 	beq.w	8005884 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_RCC_OscConfig+0x4a>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	f040 808b 	bne.w	80057e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	f040 8087 	bne.w	80057e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056d2:	4b89      	ldr	r3, [pc, #548]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_RCC_OscConfig+0x62>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e3a2      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1a      	ldr	r2, [r3, #32]
 80056ee:	4b82      	ldr	r3, [pc, #520]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <HAL_RCC_OscConfig+0x7c>
 80056fa:	4b7f      	ldr	r3, [pc, #508]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005702:	e005      	b.n	8005710 <HAL_RCC_OscConfig+0x88>
 8005704:	4b7c      	ldr	r3, [pc, #496]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570a:	091b      	lsrs	r3, r3, #4
 800570c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005710:	4293      	cmp	r3, r2
 8005712:	d223      	bcs.n	800575c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fd55 	bl	80061c8 <RCC_SetFlashLatencyFromMSIRange>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e383      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005728:	4b73      	ldr	r3, [pc, #460]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a72      	ldr	r2, [pc, #456]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 800572e:	f043 0308 	orr.w	r3, r3, #8
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	4b70      	ldr	r3, [pc, #448]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	496d      	ldr	r1, [pc, #436]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005742:	4313      	orrs	r3, r2
 8005744:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005746:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	4968      	ldr	r1, [pc, #416]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005756:	4313      	orrs	r3, r2
 8005758:	604b      	str	r3, [r1, #4]
 800575a:	e025      	b.n	80057a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800575c:	4b66      	ldr	r3, [pc, #408]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a65      	ldr	r2, [pc, #404]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005762:	f043 0308 	orr.w	r3, r3, #8
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	4b63      	ldr	r3, [pc, #396]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	4960      	ldr	r1, [pc, #384]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800577a:	4b5f      	ldr	r3, [pc, #380]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	495b      	ldr	r1, [pc, #364]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 800578a:	4313      	orrs	r3, r2
 800578c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fd15 	bl	80061c8 <RCC_SetFlashLatencyFromMSIRange>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e343      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057a8:	f000 fc4a 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 80057ac:	4602      	mov	r2, r0
 80057ae:	4b52      	ldr	r3, [pc, #328]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	091b      	lsrs	r3, r3, #4
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	4950      	ldr	r1, [pc, #320]	; (80058fc <HAL_RCC_OscConfig+0x274>)
 80057ba:	5ccb      	ldrb	r3, [r1, r3]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
 80057c4:	4a4e      	ldr	r2, [pc, #312]	; (8005900 <HAL_RCC_OscConfig+0x278>)
 80057c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80057c8:	4b4e      	ldr	r3, [pc, #312]	; (8005904 <HAL_RCC_OscConfig+0x27c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fd fd3d 	bl	800324c <HAL_InitTick>
 80057d2:	4603      	mov	r3, r0
 80057d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d052      	beq.n	8005882 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	e327      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d032      	beq.n	800584e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057e8:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a42      	ldr	r2, [pc, #264]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057f4:	f7fd fd7a 	bl	80032ec <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057fc:	f7fd fd76 	bl	80032ec <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e310      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800580e:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800581a:	4b37      	ldr	r3, [pc, #220]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a36      	ldr	r2, [pc, #216]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005820:	f043 0308 	orr.w	r3, r3, #8
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4931      	ldr	r1, [pc, #196]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005838:	4b2f      	ldr	r3, [pc, #188]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	492c      	ldr	r1, [pc, #176]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]
 800584c:	e01a      	b.n	8005884 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800584e:	4b2a      	ldr	r3, [pc, #168]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800585a:	f7fd fd47 	bl	80032ec <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005862:	f7fd fd43 	bl	80032ec <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e2dd      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005874:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f0      	bne.n	8005862 <HAL_RCC_OscConfig+0x1da>
 8005880:	e000      	b.n	8005884 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005882:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d074      	beq.n	800597a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2b08      	cmp	r3, #8
 8005894:	d005      	beq.n	80058a2 <HAL_RCC_OscConfig+0x21a>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b0c      	cmp	r3, #12
 800589a:	d10e      	bne.n	80058ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d10b      	bne.n	80058ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d064      	beq.n	8005978 <HAL_RCC_OscConfig+0x2f0>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d160      	bne.n	8005978 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e2ba      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c2:	d106      	bne.n	80058d2 <HAL_RCC_OscConfig+0x24a>
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a0b      	ldr	r2, [pc, #44]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80058ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	e026      	b.n	8005920 <HAL_RCC_OscConfig+0x298>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058da:	d115      	bne.n	8005908 <HAL_RCC_OscConfig+0x280>
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a05      	ldr	r2, [pc, #20]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80058e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a02      	ldr	r2, [pc, #8]	; (80058f8 <HAL_RCC_OscConfig+0x270>)
 80058ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	e014      	b.n	8005920 <HAL_RCC_OscConfig+0x298>
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000
 80058fc:	0808a6b0 	.word	0x0808a6b0
 8005900:	200012d0 	.word	0x200012d0
 8005904:	20001308 	.word	0x20001308
 8005908:	4ba0      	ldr	r3, [pc, #640]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a9f      	ldr	r2, [pc, #636]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 800590e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	4b9d      	ldr	r3, [pc, #628]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a9c      	ldr	r2, [pc, #624]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 800591a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800591e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d013      	beq.n	8005950 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fd fce0 	bl	80032ec <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005930:	f7fd fcdc 	bl	80032ec <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b64      	cmp	r3, #100	; 0x64
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e276      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005942:	4b92      	ldr	r3, [pc, #584]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0f0      	beq.n	8005930 <HAL_RCC_OscConfig+0x2a8>
 800594e:	e014      	b.n	800597a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fd fccc 	bl	80032ec <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005958:	f7fd fcc8 	bl	80032ec <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b64      	cmp	r3, #100	; 0x64
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e262      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800596a:	4b88      	ldr	r3, [pc, #544]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x2d0>
 8005976:	e000      	b.n	800597a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d060      	beq.n	8005a48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d005      	beq.n	8005998 <HAL_RCC_OscConfig+0x310>
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d119      	bne.n	80059c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d116      	bne.n	80059c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005998:	4b7c      	ldr	r3, [pc, #496]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <HAL_RCC_OscConfig+0x328>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e23f      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b0:	4b76      	ldr	r3, [pc, #472]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	061b      	lsls	r3, r3, #24
 80059be:	4973      	ldr	r1, [pc, #460]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059c4:	e040      	b.n	8005a48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d023      	beq.n	8005a16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ce:	4b6f      	ldr	r3, [pc, #444]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6e      	ldr	r2, [pc, #440]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 80059d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059da:	f7fd fc87 	bl	80032ec <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059e2:	f7fd fc83 	bl	80032ec <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e21d      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059f4:	4b65      	ldr	r3, [pc, #404]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0f0      	beq.n	80059e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a00:	4b62      	ldr	r3, [pc, #392]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	061b      	lsls	r3, r3, #24
 8005a0e:	495f      	ldr	r1, [pc, #380]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	604b      	str	r3, [r1, #4]
 8005a14:	e018      	b.n	8005a48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a16:	4b5d      	ldr	r3, [pc, #372]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a5c      	ldr	r2, [pc, #368]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a22:	f7fd fc63 	bl	80032ec <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a2a:	f7fd fc5f 	bl	80032ec <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e1f9      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a3c:	4b53      	ldr	r3, [pc, #332]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1f0      	bne.n	8005a2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d03c      	beq.n	8005ace <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01c      	beq.n	8005a96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a5c:	4b4b      	ldr	r3, [pc, #300]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a62:	4a4a      	ldr	r2, [pc, #296]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a64:	f043 0301 	orr.w	r3, r3, #1
 8005a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fd fc3e 	bl	80032ec <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fd fc3a 	bl	80032ec <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e1d4      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a86:	4b41      	ldr	r3, [pc, #260]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0ef      	beq.n	8005a74 <HAL_RCC_OscConfig+0x3ec>
 8005a94:	e01b      	b.n	8005ace <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a96:	4b3d      	ldr	r3, [pc, #244]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a9c:	4a3b      	ldr	r2, [pc, #236]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa6:	f7fd fc21 	bl	80032ec <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aae:	f7fd fc1d 	bl	80032ec <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e1b7      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ac0:	4b32      	ldr	r3, [pc, #200]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1ef      	bne.n	8005aae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0304 	and.w	r3, r3, #4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80a6 	beq.w	8005c28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005adc:	2300      	movs	r3, #0
 8005ade:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005ae0:	4b2a      	ldr	r3, [pc, #168]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10d      	bne.n	8005b08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aec:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af0:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af6:	6593      	str	r3, [r2, #88]	; 0x58
 8005af8:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b04:	2301      	movs	r3, #1
 8005b06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b08:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <HAL_RCC_OscConfig+0x508>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d118      	bne.n	8005b46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b14:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <HAL_RCC_OscConfig+0x508>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1d      	ldr	r2, [pc, #116]	; (8005b90 <HAL_RCC_OscConfig+0x508>)
 8005b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b20:	f7fd fbe4 	bl	80032ec <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b28:	f7fd fbe0 	bl	80032ec <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e17a      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b3a:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <HAL_RCC_OscConfig+0x508>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d108      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4d8>
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b54:	4a0d      	ldr	r2, [pc, #52]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b5e:	e029      	b.n	8005bb4 <HAL_RCC_OscConfig+0x52c>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b05      	cmp	r3, #5
 8005b66:	d115      	bne.n	8005b94 <HAL_RCC_OscConfig+0x50c>
 8005b68:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	4a07      	ldr	r2, [pc, #28]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b78:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7e:	4a03      	ldr	r2, [pc, #12]	; (8005b8c <HAL_RCC_OscConfig+0x504>)
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b88:	e014      	b.n	8005bb4 <HAL_RCC_OscConfig+0x52c>
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	40007000 	.word	0x40007000
 8005b94:	4b9c      	ldr	r3, [pc, #624]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9a:	4a9b      	ldr	r2, [pc, #620]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ba4:	4b98      	ldr	r3, [pc, #608]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005baa:	4a97      	ldr	r2, [pc, #604]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005bac:	f023 0304 	bic.w	r3, r3, #4
 8005bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d016      	beq.n	8005bea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fd fb96 	bl	80032ec <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bc2:	e00a      	b.n	8005bda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc4:	f7fd fb92 	bl	80032ec <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e12a      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bda:	4b8b      	ldr	r3, [pc, #556]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d0ed      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x53c>
 8005be8:	e015      	b.n	8005c16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bea:	f7fd fb7f 	bl	80032ec <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bf0:	e00a      	b.n	8005c08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf2:	f7fd fb7b 	bl	80032ec <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e113      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c08:	4b7f      	ldr	r3, [pc, #508]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1ed      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c16:	7ffb      	ldrb	r3, [r7, #31]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d105      	bne.n	8005c28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c1c:	4b7a      	ldr	r3, [pc, #488]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	4a79      	ldr	r2, [pc, #484]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80fe 	beq.w	8005e2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	f040 80d0 	bne.w	8005ddc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c3c:	4b72      	ldr	r3, [pc, #456]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f003 0203 	and.w	r2, r3, #3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d130      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d127      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d11f      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c7c:	2a07      	cmp	r2, #7
 8005c7e:	bf14      	ite	ne
 8005c80:	2201      	movne	r2, #1
 8005c82:	2200      	moveq	r2, #0
 8005c84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d113      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	3b01      	subs	r3, #1
 8005c98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d109      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	3b01      	subs	r3, #1
 8005cac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d06e      	beq.n	8005d90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b0c      	cmp	r3, #12
 8005cb6:	d069      	beq.n	8005d8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005cb8:	4b53      	ldr	r3, [pc, #332]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d105      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005cc4:	4b50      	ldr	r3, [pc, #320]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0ad      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005cd4:	4b4c      	ldr	r3, [pc, #304]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a4b      	ldr	r2, [pc, #300]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cde:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ce0:	f7fd fb04 	bl	80032ec <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce8:	f7fd fb00 	bl	80032ec <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e09a      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cfa:	4b43      	ldr	r3, [pc, #268]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1f0      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d06:	4b40      	ldr	r3, [pc, #256]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	4b40      	ldr	r3, [pc, #256]	; (8005e0c <HAL_RCC_OscConfig+0x784>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d16:	3a01      	subs	r2, #1
 8005d18:	0112      	lsls	r2, r2, #4
 8005d1a:	4311      	orrs	r1, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d20:	0212      	lsls	r2, r2, #8
 8005d22:	4311      	orrs	r1, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d28:	0852      	lsrs	r2, r2, #1
 8005d2a:	3a01      	subs	r2, #1
 8005d2c:	0552      	lsls	r2, r2, #21
 8005d2e:	4311      	orrs	r1, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d34:	0852      	lsrs	r2, r2, #1
 8005d36:	3a01      	subs	r2, #1
 8005d38:	0652      	lsls	r2, r2, #25
 8005d3a:	4311      	orrs	r1, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d40:	0912      	lsrs	r2, r2, #4
 8005d42:	0452      	lsls	r2, r2, #17
 8005d44:	430a      	orrs	r2, r1
 8005d46:	4930      	ldr	r1, [pc, #192]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d4c:	4b2e      	ldr	r3, [pc, #184]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2d      	ldr	r2, [pc, #180]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d58:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4a2a      	ldr	r2, [pc, #168]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d64:	f7fd fac2 	bl	80032ec <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6c:	f7fd fabe 	bl	80032ec <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e058      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d7e:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d8a:	e050      	b.n	8005e2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e04f      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d148      	bne.n	8005e2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a19      	ldr	r2, [pc, #100]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005da6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005da8:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005db2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005db4:	f7fd fa9a 	bl	80032ec <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dbc:	f7fd fa96 	bl	80032ec <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e030      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dce:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f0      	beq.n	8005dbc <HAL_RCC_OscConfig+0x734>
 8005dda:	e028      	b.n	8005e2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b0c      	cmp	r3, #12
 8005de0:	d023      	beq.n	8005e2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de2:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a08      	ldr	r2, [pc, #32]	; (8005e08 <HAL_RCC_OscConfig+0x780>)
 8005de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fd fa7d 	bl	80032ec <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005df4:	e00c      	b.n	8005e10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df6:	f7fd fa79 	bl	80032ec <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d905      	bls.n	8005e10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e013      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e10:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <HAL_RCC_OscConfig+0x7b0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ec      	bne.n	8005df6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <HAL_RCC_OscConfig+0x7b0>)
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	4905      	ldr	r1, [pc, #20]	; (8005e38 <HAL_RCC_OscConfig+0x7b0>)
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_RCC_OscConfig+0x7b4>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	60cb      	str	r3, [r1, #12]
 8005e28:	e001      	b.n	8005e2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	feeefffc 	.word	0xfeeefffc

08005e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0e7      	b.n	8006024 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e54:	4b75      	ldr	r3, [pc, #468]	; (800602c <HAL_RCC_ClockConfig+0x1ec>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d910      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e62:	4b72      	ldr	r3, [pc, #456]	; (800602c <HAL_RCC_ClockConfig+0x1ec>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 0207 	bic.w	r2, r3, #7
 8005e6a:	4970      	ldr	r1, [pc, #448]	; (800602c <HAL_RCC_ClockConfig+0x1ec>)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b6e      	ldr	r3, [pc, #440]	; (800602c <HAL_RCC_ClockConfig+0x1ec>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0cf      	b.n	8006024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d010      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	4b66      	ldr	r3, [pc, #408]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d908      	bls.n	8005eb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ea0:	4b63      	ldr	r3, [pc, #396]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	4960      	ldr	r1, [pc, #384]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d04c      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec6:	4b5a      	ldr	r3, [pc, #360]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d121      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e0a6      	b.n	8006024 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d107      	bne.n	8005eee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ede:	4b54      	ldr	r3, [pc, #336]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d115      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e09a      	b.n	8006024 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ef6:	4b4e      	ldr	r3, [pc, #312]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d109      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e08e      	b.n	8006024 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f06:	4b4a      	ldr	r3, [pc, #296]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e086      	b.n	8006024 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f16:	4b46      	ldr	r3, [pc, #280]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f023 0203 	bic.w	r2, r3, #3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4943      	ldr	r1, [pc, #268]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f28:	f7fd f9e0 	bl	80032ec <HAL_GetTick>
 8005f2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f30:	f7fd f9dc 	bl	80032ec <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e06e      	b.n	8006024 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f46:	4b3a      	ldr	r3, [pc, #232]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 020c 	and.w	r2, r3, #12
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d1eb      	bne.n	8005f30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d010      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	4b31      	ldr	r3, [pc, #196]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d208      	bcs.n	8005f86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f74:	4b2e      	ldr	r3, [pc, #184]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	492b      	ldr	r1, [pc, #172]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f86:	4b29      	ldr	r3, [pc, #164]	; (800602c <HAL_RCC_ClockConfig+0x1ec>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d210      	bcs.n	8005fb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f94:	4b25      	ldr	r3, [pc, #148]	; (800602c <HAL_RCC_ClockConfig+0x1ec>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f023 0207 	bic.w	r2, r3, #7
 8005f9c:	4923      	ldr	r1, [pc, #140]	; (800602c <HAL_RCC_ClockConfig+0x1ec>)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa4:	4b21      	ldr	r3, [pc, #132]	; (800602c <HAL_RCC_ClockConfig+0x1ec>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d001      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e036      	b.n	8006024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fc2:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	4918      	ldr	r1, [pc, #96]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fe0:	4b13      	ldr	r3, [pc, #76]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4910      	ldr	r1, [pc, #64]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ff4:	f000 f824 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <HAL_RCC_ClockConfig+0x1f0>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	091b      	lsrs	r3, r3, #4
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	490b      	ldr	r1, [pc, #44]	; (8006034 <HAL_RCC_ClockConfig+0x1f4>)
 8006006:	5ccb      	ldrb	r3, [r1, r3]
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	fa22 f303 	lsr.w	r3, r2, r3
 8006010:	4a09      	ldr	r2, [pc, #36]	; (8006038 <HAL_RCC_ClockConfig+0x1f8>)
 8006012:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006014:	4b09      	ldr	r3, [pc, #36]	; (800603c <HAL_RCC_ClockConfig+0x1fc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4618      	mov	r0, r3
 800601a:	f7fd f917 	bl	800324c <HAL_InitTick>
 800601e:	4603      	mov	r3, r0
 8006020:	72fb      	strb	r3, [r7, #11]

  return status;
 8006022:	7afb      	ldrb	r3, [r7, #11]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40022000 	.word	0x40022000
 8006030:	40021000 	.word	0x40021000
 8006034:	0808a6b0 	.word	0x0808a6b0
 8006038:	200012d0 	.word	0x200012d0
 800603c:	20001308 	.word	0x20001308

08006040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006040:	b480      	push	{r7}
 8006042:	b089      	sub	sp, #36	; 0x24
 8006044:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	2300      	movs	r3, #0
 800604c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800604e:	4b3e      	ldr	r3, [pc, #248]	; (8006148 <HAL_RCC_GetSysClockFreq+0x108>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 030c 	and.w	r3, r3, #12
 8006056:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006058:	4b3b      	ldr	r3, [pc, #236]	; (8006148 <HAL_RCC_GetSysClockFreq+0x108>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_RCC_GetSysClockFreq+0x34>
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b0c      	cmp	r3, #12
 800606c:	d121      	bne.n	80060b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d11e      	bne.n	80060b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006074:	4b34      	ldr	r3, [pc, #208]	; (8006148 <HAL_RCC_GetSysClockFreq+0x108>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d107      	bne.n	8006090 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006080:	4b31      	ldr	r3, [pc, #196]	; (8006148 <HAL_RCC_GetSysClockFreq+0x108>)
 8006082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	61fb      	str	r3, [r7, #28]
 800608e:	e005      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006090:	4b2d      	ldr	r3, [pc, #180]	; (8006148 <HAL_RCC_GetSysClockFreq+0x108>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	091b      	lsrs	r3, r3, #4
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800609c:	4a2b      	ldr	r2, [pc, #172]	; (800614c <HAL_RCC_GetSysClockFreq+0x10c>)
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10d      	bne.n	80060c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060b0:	e00a      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d102      	bne.n	80060be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060b8:	4b25      	ldr	r3, [pc, #148]	; (8006150 <HAL_RCC_GetSysClockFreq+0x110>)
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	e004      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d101      	bne.n	80060c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060c4:	4b23      	ldr	r3, [pc, #140]	; (8006154 <HAL_RCC_GetSysClockFreq+0x114>)
 80060c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b0c      	cmp	r3, #12
 80060cc:	d134      	bne.n	8006138 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ce:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <HAL_RCC_GetSysClockFreq+0x108>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d003      	beq.n	80060e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d003      	beq.n	80060ec <HAL_RCC_GetSysClockFreq+0xac>
 80060e4:	e005      	b.n	80060f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80060e6:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <HAL_RCC_GetSysClockFreq+0x110>)
 80060e8:	617b      	str	r3, [r7, #20]
      break;
 80060ea:	e005      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <HAL_RCC_GetSysClockFreq+0x114>)
 80060ee:	617b      	str	r3, [r7, #20]
      break;
 80060f0:	e002      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	617b      	str	r3, [r7, #20]
      break;
 80060f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060f8:	4b13      	ldr	r3, [pc, #76]	; (8006148 <HAL_RCC_GetSysClockFreq+0x108>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	3301      	adds	r3, #1
 8006104:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <HAL_RCC_GetSysClockFreq+0x108>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	fb03 f202 	mul.w	r2, r3, r2
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800611e:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <HAL_RCC_GetSysClockFreq+0x108>)
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	0e5b      	lsrs	r3, r3, #25
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	3301      	adds	r3, #1
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	fbb2 f3f3 	udiv	r3, r2, r3
 8006136:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006138:	69bb      	ldr	r3, [r7, #24]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3724      	adds	r7, #36	; 0x24
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000
 800614c:	0808a6c8 	.word	0x0808a6c8
 8006150:	00f42400 	.word	0x00f42400
 8006154:	007a1200 	.word	0x007a1200

08006158 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800615c:	4b03      	ldr	r3, [pc, #12]	; (800616c <HAL_RCC_GetHCLKFreq+0x14>)
 800615e:	681b      	ldr	r3, [r3, #0]
}
 8006160:	4618      	mov	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	200012d0 	.word	0x200012d0

08006170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006174:	f7ff fff0 	bl	8006158 <HAL_RCC_GetHCLKFreq>
 8006178:	4602      	mov	r2, r0
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	4904      	ldr	r1, [pc, #16]	; (8006198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006186:	5ccb      	ldrb	r3, [r1, r3]
 8006188:	f003 031f 	and.w	r3, r3, #31
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006190:	4618      	mov	r0, r3
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40021000 	.word	0x40021000
 8006198:	0808a6c0 	.word	0x0808a6c0

0800619c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061a0:	f7ff ffda 	bl	8006158 <HAL_RCC_GetHCLKFreq>
 80061a4:	4602      	mov	r2, r0
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	0adb      	lsrs	r3, r3, #11
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	4904      	ldr	r1, [pc, #16]	; (80061c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061b2:	5ccb      	ldrb	r3, [r1, r3]
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061bc:	4618      	mov	r0, r3
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40021000 	.word	0x40021000
 80061c4:	0808a6c0 	.word	0x0808a6c0

080061c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80061d4:	4b2a      	ldr	r3, [pc, #168]	; (8006280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80061e0:	f7fe fd02 	bl	8004be8 <HAL_PWREx_GetVoltageRange>
 80061e4:	6178      	str	r0, [r7, #20]
 80061e6:	e014      	b.n	8006212 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80061e8:	4b25      	ldr	r3, [pc, #148]	; (8006280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ec:	4a24      	ldr	r2, [pc, #144]	; (8006280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f2:	6593      	str	r3, [r2, #88]	; 0x58
 80061f4:	4b22      	ldr	r3, [pc, #136]	; (8006280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006200:	f7fe fcf2 	bl	8004be8 <HAL_PWREx_GetVoltageRange>
 8006204:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006206:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800620c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006210:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006218:	d10b      	bne.n	8006232 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b80      	cmp	r3, #128	; 0x80
 800621e:	d919      	bls.n	8006254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2ba0      	cmp	r3, #160	; 0xa0
 8006224:	d902      	bls.n	800622c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006226:	2302      	movs	r3, #2
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	e013      	b.n	8006254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800622c:	2301      	movs	r3, #1
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	e010      	b.n	8006254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b80      	cmp	r3, #128	; 0x80
 8006236:	d902      	bls.n	800623e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006238:	2303      	movs	r3, #3
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	e00a      	b.n	8006254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b80      	cmp	r3, #128	; 0x80
 8006242:	d102      	bne.n	800624a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006244:	2302      	movs	r3, #2
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	e004      	b.n	8006254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b70      	cmp	r3, #112	; 0x70
 800624e:	d101      	bne.n	8006254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006250:	2301      	movs	r3, #1
 8006252:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f023 0207 	bic.w	r2, r3, #7
 800625c:	4909      	ldr	r1, [pc, #36]	; (8006284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006264:	4b07      	ldr	r3, [pc, #28]	; (8006284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	429a      	cmp	r2, r3
 8006270:	d001      	beq.n	8006276 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40021000 	.word	0x40021000
 8006284:	40022000 	.word	0x40022000

08006288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006290:	2300      	movs	r3, #0
 8006292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006294:	2300      	movs	r3, #0
 8006296:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d041      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062ac:	d02a      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062b2:	d824      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062b8:	d008      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80062ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062be:	d81e      	bhi.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80062c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c8:	d010      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062ca:	e018      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062cc:	4b86      	ldr	r3, [pc, #536]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4a85      	ldr	r2, [pc, #532]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062d8:	e015      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3304      	adds	r3, #4
 80062de:	2100      	movs	r1, #0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fabb 	bl	800685c <RCCEx_PLLSAI1_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062ea:	e00c      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3320      	adds	r3, #32
 80062f0:	2100      	movs	r1, #0
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fba6 	bl	8006a44 <RCCEx_PLLSAI2_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062fc:	e003      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	74fb      	strb	r3, [r7, #19]
      break;
 8006302:	e000      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006306:	7cfb      	ldrb	r3, [r7, #19]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800630c:	4b76      	ldr	r3, [pc, #472]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006312:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800631a:	4973      	ldr	r1, [pc, #460]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006322:	e001      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006324:	7cfb      	ldrb	r3, [r7, #19]
 8006326:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d041      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006338:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800633c:	d02a      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800633e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006342:	d824      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006348:	d008      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800634a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800634e:	d81e      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006358:	d010      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800635a:	e018      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800635c:	4b62      	ldr	r3, [pc, #392]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	4a61      	ldr	r2, [pc, #388]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006366:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006368:	e015      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fa73 	bl	800685c <RCCEx_PLLSAI1_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800637a:	e00c      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3320      	adds	r3, #32
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fb5e 	bl	8006a44 <RCCEx_PLLSAI2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800638c:	e003      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	74fb      	strb	r3, [r7, #19]
      break;
 8006392:	e000      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006396:	7cfb      	ldrb	r3, [r7, #19]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10b      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800639c:	4b52      	ldr	r3, [pc, #328]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063aa:	494f      	ldr	r1, [pc, #316]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063b2:	e001      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	7cfb      	ldrb	r3, [r7, #19]
 80063b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80a0 	beq.w	8006506 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063c6:	2300      	movs	r3, #0
 80063c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063ca:	4b47      	ldr	r3, [pc, #284]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00d      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063e0:	4b41      	ldr	r3, [pc, #260]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e4:	4a40      	ldr	r2, [pc, #256]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ea:	6593      	str	r3, [r2, #88]	; 0x58
 80063ec:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063f8:	2301      	movs	r3, #1
 80063fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063fc:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a3a      	ldr	r2, [pc, #232]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006408:	f7fc ff70 	bl	80032ec <HAL_GetTick>
 800640c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800640e:	e009      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006410:	f7fc ff6c 	bl	80032ec <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d902      	bls.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	74fb      	strb	r3, [r7, #19]
        break;
 8006422:	e005      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006424:	4b31      	ldr	r3, [pc, #196]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0ef      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006430:	7cfb      	ldrb	r3, [r7, #19]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d15c      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006436:	4b2c      	ldr	r3, [pc, #176]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006440:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01f      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	429a      	cmp	r2, r3
 8006452:	d019      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006454:	4b24      	ldr	r3, [pc, #144]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006460:	4b21      	ldr	r3, [pc, #132]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006466:	4a20      	ldr	r2, [pc, #128]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006470:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006476:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006480:	4a19      	ldr	r2, [pc, #100]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d016      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006492:	f7fc ff2b 	bl	80032ec <HAL_GetTick>
 8006496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006498:	e00b      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800649a:	f7fc ff27 	bl	80032ec <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d902      	bls.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	74fb      	strb	r3, [r7, #19]
            break;
 80064b0:	e006      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064b2:	4b0d      	ldr	r3, [pc, #52]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0ec      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80064c0:	7cfb      	ldrb	r3, [r7, #19]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064c6:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d6:	4904      	ldr	r1, [pc, #16]	; (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064de:	e009      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064e0:	7cfb      	ldrb	r3, [r7, #19]
 80064e2:	74bb      	strb	r3, [r7, #18]
 80064e4:	e006      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80064e6:	bf00      	nop
 80064e8:	40021000 	.word	0x40021000
 80064ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f0:	7cfb      	ldrb	r3, [r7, #19]
 80064f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064f4:	7c7b      	ldrb	r3, [r7, #17]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d105      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064fa:	4b9e      	ldr	r3, [pc, #632]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fe:	4a9d      	ldr	r2, [pc, #628]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006504:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006512:	4b98      	ldr	r3, [pc, #608]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006518:	f023 0203 	bic.w	r2, r3, #3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	4994      	ldr	r1, [pc, #592]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006534:	4b8f      	ldr	r3, [pc, #572]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	f023 020c 	bic.w	r2, r3, #12
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	498c      	ldr	r1, [pc, #560]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006556:	4b87      	ldr	r3, [pc, #540]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	4983      	ldr	r1, [pc, #524]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006578:	4b7e      	ldr	r3, [pc, #504]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	497b      	ldr	r1, [pc, #492]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0310 	and.w	r3, r3, #16
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800659a:	4b76      	ldr	r3, [pc, #472]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065a8:	4972      	ldr	r1, [pc, #456]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065bc:	4b6d      	ldr	r3, [pc, #436]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ca:	496a      	ldr	r1, [pc, #424]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065de:	4b65      	ldr	r3, [pc, #404]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	4961      	ldr	r1, [pc, #388]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006600:	4b5c      	ldr	r3, [pc, #368]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006606:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660e:	4959      	ldr	r1, [pc, #356]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006622:	4b54      	ldr	r3, [pc, #336]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006628:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006630:	4950      	ldr	r1, [pc, #320]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006644:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	4948      	ldr	r1, [pc, #288]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006666:	4b43      	ldr	r3, [pc, #268]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006674:	493f      	ldr	r1, [pc, #252]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006676:	4313      	orrs	r3, r2
 8006678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d028      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006688:	4b3a      	ldr	r3, [pc, #232]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006696:	4937      	ldr	r1, [pc, #220]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006698:	4313      	orrs	r3, r2
 800669a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066a6:	d106      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066a8:	4b32      	ldr	r3, [pc, #200]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	4a31      	ldr	r2, [pc, #196]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b2:	60d3      	str	r3, [r2, #12]
 80066b4:	e011      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066be:	d10c      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	2101      	movs	r1, #1
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f8c8 	bl	800685c <RCCEx_PLLSAI1_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80066d0:	7cfb      	ldrb	r3, [r7, #19]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80066d6:	7cfb      	ldrb	r3, [r7, #19]
 80066d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d028      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80066e6:	4b23      	ldr	r3, [pc, #140]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f4:	491f      	ldr	r1, [pc, #124]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006704:	d106      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006706:	4b1b      	ldr	r3, [pc, #108]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	4a1a      	ldr	r2, [pc, #104]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006710:	60d3      	str	r3, [r2, #12]
 8006712:	e011      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800671c:	d10c      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3304      	adds	r3, #4
 8006722:	2101      	movs	r1, #1
 8006724:	4618      	mov	r0, r3
 8006726:	f000 f899 	bl	800685c <RCCEx_PLLSAI1_Config>
 800672a:	4603      	mov	r3, r0
 800672c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800672e:	7cfb      	ldrb	r3, [r7, #19]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006734:	7cfb      	ldrb	r3, [r7, #19]
 8006736:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d02b      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	4908      	ldr	r1, [pc, #32]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006762:	d109      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006764:	4b03      	ldr	r3, [pc, #12]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4a02      	ldr	r2, [pc, #8]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800676a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800676e:	60d3      	str	r3, [r2, #12]
 8006770:	e014      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006772:	bf00      	nop
 8006774:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006780:	d10c      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3304      	adds	r3, #4
 8006786:	2101      	movs	r1, #1
 8006788:	4618      	mov	r0, r3
 800678a:	f000 f867 	bl	800685c <RCCEx_PLLSAI1_Config>
 800678e:	4603      	mov	r3, r0
 8006790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006792:	7cfb      	ldrb	r3, [r7, #19]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006798:	7cfb      	ldrb	r3, [r7, #19]
 800679a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d02f      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067a8:	4b2b      	ldr	r3, [pc, #172]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067b6:	4928      	ldr	r1, [pc, #160]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c6:	d10d      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	2102      	movs	r1, #2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 f844 	bl	800685c <RCCEx_PLLSAI1_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067d8:	7cfb      	ldrb	r3, [r7, #19]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d014      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80067de:	7cfb      	ldrb	r3, [r7, #19]
 80067e0:	74bb      	strb	r3, [r7, #18]
 80067e2:	e011      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ec:	d10c      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3320      	adds	r3, #32
 80067f2:	2102      	movs	r1, #2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f925 	bl	8006a44 <RCCEx_PLLSAI2_Config>
 80067fa:	4603      	mov	r3, r0
 80067fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067fe:	7cfb      	ldrb	r3, [r7, #19]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006804:	7cfb      	ldrb	r3, [r7, #19]
 8006806:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006814:	4b10      	ldr	r3, [pc, #64]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006822:	490d      	ldr	r1, [pc, #52]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006836:	4b08      	ldr	r3, [pc, #32]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006846:	4904      	ldr	r1, [pc, #16]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006848:	4313      	orrs	r3, r2
 800684a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800684e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	40021000 	.word	0x40021000

0800685c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800686a:	4b75      	ldr	r3, [pc, #468]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d018      	beq.n	80068a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006876:	4b72      	ldr	r3, [pc, #456]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f003 0203 	and.w	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d10d      	bne.n	80068a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
       ||
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800688e:	4b6c      	ldr	r3, [pc, #432]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	091b      	lsrs	r3, r3, #4
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
       ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d047      	beq.n	8006932 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	73fb      	strb	r3, [r7, #15]
 80068a6:	e044      	b.n	8006932 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d018      	beq.n	80068e2 <RCCEx_PLLSAI1_Config+0x86>
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d825      	bhi.n	8006900 <RCCEx_PLLSAI1_Config+0xa4>
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d002      	beq.n	80068be <RCCEx_PLLSAI1_Config+0x62>
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d009      	beq.n	80068d0 <RCCEx_PLLSAI1_Config+0x74>
 80068bc:	e020      	b.n	8006900 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068be:	4b60      	ldr	r3, [pc, #384]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d11d      	bne.n	8006906 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ce:	e01a      	b.n	8006906 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068d0:	4b5b      	ldr	r3, [pc, #364]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d116      	bne.n	800690a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068e0:	e013      	b.n	800690a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068e2:	4b57      	ldr	r3, [pc, #348]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10f      	bne.n	800690e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068ee:	4b54      	ldr	r3, [pc, #336]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068fe:	e006      	b.n	800690e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
      break;
 8006904:	e004      	b.n	8006910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006906:	bf00      	nop
 8006908:	e002      	b.n	8006910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800690a:	bf00      	nop
 800690c:	e000      	b.n	8006910 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800690e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10d      	bne.n	8006932 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006916:	4b4a      	ldr	r3, [pc, #296]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6819      	ldr	r1, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	3b01      	subs	r3, #1
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	430b      	orrs	r3, r1
 800692c:	4944      	ldr	r1, [pc, #272]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800692e:	4313      	orrs	r3, r2
 8006930:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d17d      	bne.n	8006a34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006938:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a40      	ldr	r2, [pc, #256]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800693e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006944:	f7fc fcd2 	bl	80032ec <HAL_GetTick>
 8006948:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800694a:	e009      	b.n	8006960 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800694c:	f7fc fcce 	bl	80032ec <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d902      	bls.n	8006960 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	73fb      	strb	r3, [r7, #15]
        break;
 800695e:	e005      	b.n	800696c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006960:	4b37      	ldr	r3, [pc, #220]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1ef      	bne.n	800694c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d160      	bne.n	8006a34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d111      	bne.n	800699c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006978:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6892      	ldr	r2, [r2, #8]
 8006988:	0211      	lsls	r1, r2, #8
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	68d2      	ldr	r2, [r2, #12]
 800698e:	0912      	lsrs	r2, r2, #4
 8006990:	0452      	lsls	r2, r2, #17
 8006992:	430a      	orrs	r2, r1
 8006994:	492a      	ldr	r1, [pc, #168]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006996:	4313      	orrs	r3, r2
 8006998:	610b      	str	r3, [r1, #16]
 800699a:	e027      	b.n	80069ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d112      	bne.n	80069c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069a2:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80069aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6892      	ldr	r2, [r2, #8]
 80069b2:	0211      	lsls	r1, r2, #8
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6912      	ldr	r2, [r2, #16]
 80069b8:	0852      	lsrs	r2, r2, #1
 80069ba:	3a01      	subs	r2, #1
 80069bc:	0552      	lsls	r2, r2, #21
 80069be:	430a      	orrs	r2, r1
 80069c0:	491f      	ldr	r1, [pc, #124]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	610b      	str	r3, [r1, #16]
 80069c6:	e011      	b.n	80069ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069c8:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6892      	ldr	r2, [r2, #8]
 80069d8:	0211      	lsls	r1, r2, #8
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6952      	ldr	r2, [r2, #20]
 80069de:	0852      	lsrs	r2, r2, #1
 80069e0:	3a01      	subs	r2, #1
 80069e2:	0652      	lsls	r2, r2, #25
 80069e4:	430a      	orrs	r2, r1
 80069e6:	4916      	ldr	r1, [pc, #88]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f8:	f7fc fc78 	bl	80032ec <HAL_GetTick>
 80069fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069fe:	e009      	b.n	8006a14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a00:	f7fc fc74 	bl	80032ec <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d902      	bls.n	8006a14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	73fb      	strb	r3, [r7, #15]
          break;
 8006a12:	e005      	b.n	8006a20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a14:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0ef      	beq.n	8006a00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	4904      	ldr	r1, [pc, #16]	; (8006a40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40021000 	.word	0x40021000

08006a44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a52:	4b6a      	ldr	r3, [pc, #424]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d018      	beq.n	8006a90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a5e:	4b67      	ldr	r3, [pc, #412]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f003 0203 	and.w	r2, r3, #3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d10d      	bne.n	8006a8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
       ||
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006a76:	4b61      	ldr	r3, [pc, #388]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	091b      	lsrs	r3, r3, #4
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
       ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d047      	beq.n	8006b1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	e044      	b.n	8006b1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d018      	beq.n	8006aca <RCCEx_PLLSAI2_Config+0x86>
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d825      	bhi.n	8006ae8 <RCCEx_PLLSAI2_Config+0xa4>
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d002      	beq.n	8006aa6 <RCCEx_PLLSAI2_Config+0x62>
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d009      	beq.n	8006ab8 <RCCEx_PLLSAI2_Config+0x74>
 8006aa4:	e020      	b.n	8006ae8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006aa6:	4b55      	ldr	r3, [pc, #340]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d11d      	bne.n	8006aee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ab6:	e01a      	b.n	8006aee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ab8:	4b50      	ldr	r3, [pc, #320]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d116      	bne.n	8006af2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ac8:	e013      	b.n	8006af2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006aca:	4b4c      	ldr	r3, [pc, #304]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10f      	bne.n	8006af6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ad6:	4b49      	ldr	r3, [pc, #292]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ae6:	e006      	b.n	8006af6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
      break;
 8006aec:	e004      	b.n	8006af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006aee:	bf00      	nop
 8006af0:	e002      	b.n	8006af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006af2:	bf00      	nop
 8006af4:	e000      	b.n	8006af8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10d      	bne.n	8006b1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006afe:	4b3f      	ldr	r3, [pc, #252]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6819      	ldr	r1, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	430b      	orrs	r3, r1
 8006b14:	4939      	ldr	r1, [pc, #228]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d167      	bne.n	8006bf0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b20:	4b36      	ldr	r3, [pc, #216]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a35      	ldr	r2, [pc, #212]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b2c:	f7fc fbde 	bl	80032ec <HAL_GetTick>
 8006b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b32:	e009      	b.n	8006b48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b34:	f7fc fbda 	bl	80032ec <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d902      	bls.n	8006b48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	73fb      	strb	r3, [r7, #15]
        break;
 8006b46:	e005      	b.n	8006b54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b48:	4b2c      	ldr	r3, [pc, #176]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1ef      	bne.n	8006b34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d14a      	bne.n	8006bf0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d111      	bne.n	8006b84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b60:	4b26      	ldr	r3, [pc, #152]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6892      	ldr	r2, [r2, #8]
 8006b70:	0211      	lsls	r1, r2, #8
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68d2      	ldr	r2, [r2, #12]
 8006b76:	0912      	lsrs	r2, r2, #4
 8006b78:	0452      	lsls	r2, r2, #17
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	491f      	ldr	r1, [pc, #124]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	614b      	str	r3, [r1, #20]
 8006b82:	e011      	b.n	8006ba8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b84:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6892      	ldr	r2, [r2, #8]
 8006b94:	0211      	lsls	r1, r2, #8
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6912      	ldr	r2, [r2, #16]
 8006b9a:	0852      	lsrs	r2, r2, #1
 8006b9c:	3a01      	subs	r2, #1
 8006b9e:	0652      	lsls	r2, r2, #25
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	4916      	ldr	r1, [pc, #88]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006ba8:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb4:	f7fc fb9a 	bl	80032ec <HAL_GetTick>
 8006bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006bba:	e009      	b.n	8006bd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bbc:	f7fc fb96 	bl	80032ec <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d902      	bls.n	8006bd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8006bce:	e005      	b.n	8006bdc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0ef      	beq.n	8006bbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	4904      	ldr	r1, [pc, #16]	; (8006bfc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40021000 	.word	0x40021000

08006c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e049      	b.n	8006ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fb ffa6 	bl	8002b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f000 fa9a 	bl	8007178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d001      	beq.n	8006cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e04f      	b.n	8006d68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a23      	ldr	r2, [pc, #140]	; (8006d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01d      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x76>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf2:	d018      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x76>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d013      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x76>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1e      	ldr	r2, [pc, #120]	; (8006d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00e      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x76>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a1c      	ldr	r2, [pc, #112]	; (8006d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d009      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x76>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1b      	ldr	r2, [pc, #108]	; (8006d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d004      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x76>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d115      	bne.n	8006d52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	4b17      	ldr	r3, [pc, #92]	; (8006d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b06      	cmp	r3, #6
 8006d36:	d015      	beq.n	8006d64 <HAL_TIM_Base_Start_IT+0xb4>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3e:	d011      	beq.n	8006d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0201 	orr.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d50:	e008      	b.n	8006d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e000      	b.n	8006d66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40000400 	.word	0x40000400
 8006d7c:	40000800 	.word	0x40000800
 8006d80:	40000c00 	.word	0x40000c00
 8006d84:	40013400 	.word	0x40013400
 8006d88:	40014000 	.word	0x40014000
 8006d8c:	00010007 	.word	0x00010007

08006d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d020      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01b      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0202 	mvn.w	r2, #2
 8006dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f9ad 	bl	800713a <HAL_TIM_IC_CaptureCallback>
 8006de0:	e005      	b.n	8006dee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f99f 	bl	8007126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f9b0 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d020      	beq.n	8006e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01b      	beq.n	8006e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0204 	mvn.w	r2, #4
 8006e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f987 	bl	800713a <HAL_TIM_IC_CaptureCallback>
 8006e2c:	e005      	b.n	8006e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f979 	bl	8007126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f98a 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d020      	beq.n	8006e8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d01b      	beq.n	8006e8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f06f 0208 	mvn.w	r2, #8
 8006e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2204      	movs	r2, #4
 8006e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	f003 0303 	and.w	r3, r3, #3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f961 	bl	800713a <HAL_TIM_IC_CaptureCallback>
 8006e78:	e005      	b.n	8006e86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f953 	bl	8007126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f964 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d020      	beq.n	8006ed8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01b      	beq.n	8006ed8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f06f 0210 	mvn.w	r2, #16
 8006ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2208      	movs	r2, #8
 8006eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f93b 	bl	800713a <HAL_TIM_IC_CaptureCallback>
 8006ec4:	e005      	b.n	8006ed2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f92d 	bl	8007126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f93e 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00c      	beq.n	8006efc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0201 	mvn.w	r2, #1
 8006ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7fa fc00 	bl	80016fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00c      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d007      	beq.n	8006f20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 faf2 	bl	8007504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00c      	beq.n	8006f44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 faea 	bl	8007518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00c      	beq.n	8006f68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f8fd 	bl	8007162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00c      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f06f 0220 	mvn.w	r2, #32
 8006f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fab2 	bl	80074f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e0b6      	b.n	800711e <HAL_TIM_ConfigClockSource+0x18a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fec:	d03e      	beq.n	800706c <HAL_TIM_ConfigClockSource+0xd8>
 8006fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff2:	f200 8087 	bhi.w	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffa:	f000 8086 	beq.w	800710a <HAL_TIM_ConfigClockSource+0x176>
 8006ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007002:	d87f      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8007004:	2b70      	cmp	r3, #112	; 0x70
 8007006:	d01a      	beq.n	800703e <HAL_TIM_ConfigClockSource+0xaa>
 8007008:	2b70      	cmp	r3, #112	; 0x70
 800700a:	d87b      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 800700c:	2b60      	cmp	r3, #96	; 0x60
 800700e:	d050      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0x11e>
 8007010:	2b60      	cmp	r3, #96	; 0x60
 8007012:	d877      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8007014:	2b50      	cmp	r3, #80	; 0x50
 8007016:	d03c      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0xfe>
 8007018:	2b50      	cmp	r3, #80	; 0x50
 800701a:	d873      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d058      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x13e>
 8007020:	2b40      	cmp	r3, #64	; 0x40
 8007022:	d86f      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8007024:	2b30      	cmp	r3, #48	; 0x30
 8007026:	d064      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x15e>
 8007028:	2b30      	cmp	r3, #48	; 0x30
 800702a:	d86b      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 800702c:	2b20      	cmp	r3, #32
 800702e:	d060      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x15e>
 8007030:	2b20      	cmp	r3, #32
 8007032:	d867      	bhi.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05c      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x15e>
 8007038:	2b10      	cmp	r3, #16
 800703a:	d05a      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x15e>
 800703c:	e062      	b.n	8007104 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800704e:	f000 f9a7 	bl	80073a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	609a      	str	r2, [r3, #8]
      break;
 800706a:	e04f      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800707c:	f000 f990 	bl	80073a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800708e:	609a      	str	r2, [r3, #8]
      break;
 8007090:	e03c      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800709e:	461a      	mov	r2, r3
 80070a0:	f000 f904 	bl	80072ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2150      	movs	r1, #80	; 0x50
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f95d 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 80070b0:	e02c      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070be:	461a      	mov	r2, r3
 80070c0:	f000 f923 	bl	800730a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2160      	movs	r1, #96	; 0x60
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f94d 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 80070d0:	e01c      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070de:	461a      	mov	r2, r3
 80070e0:	f000 f8e4 	bl	80072ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2140      	movs	r1, #64	; 0x40
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f93d 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 80070f0:	e00c      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f000 f934 	bl	800736a <TIM_ITRx_SetConfig>
      break;
 8007102:	e003      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	73fb      	strb	r3, [r7, #15]
      break;
 8007108:	e000      	b.n	800710c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800710a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a40      	ldr	r2, [pc, #256]	; (800728c <TIM_Base_SetConfig+0x114>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d013      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007196:	d00f      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a3d      	ldr	r2, [pc, #244]	; (8007290 <TIM_Base_SetConfig+0x118>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00b      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a3c      	ldr	r2, [pc, #240]	; (8007294 <TIM_Base_SetConfig+0x11c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d007      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a3b      	ldr	r2, [pc, #236]	; (8007298 <TIM_Base_SetConfig+0x120>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a3a      	ldr	r2, [pc, #232]	; (800729c <TIM_Base_SetConfig+0x124>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d108      	bne.n	80071ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a2f      	ldr	r2, [pc, #188]	; (800728c <TIM_Base_SetConfig+0x114>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01f      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d8:	d01b      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <TIM_Base_SetConfig+0x118>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d017      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a2b      	ldr	r2, [pc, #172]	; (8007294 <TIM_Base_SetConfig+0x11c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a2a      	ldr	r2, [pc, #168]	; (8007298 <TIM_Base_SetConfig+0x120>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00f      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a29      	ldr	r2, [pc, #164]	; (800729c <TIM_Base_SetConfig+0x124>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00b      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a28      	ldr	r2, [pc, #160]	; (80072a0 <TIM_Base_SetConfig+0x128>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <TIM_Base_SetConfig+0x12c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <TIM_Base_SetConfig+0x9a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a26      	ldr	r2, [pc, #152]	; (80072a8 <TIM_Base_SetConfig+0x130>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d108      	bne.n	8007224 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a10      	ldr	r2, [pc, #64]	; (800728c <TIM_Base_SetConfig+0x114>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00f      	beq.n	8007270 <TIM_Base_SetConfig+0xf8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a12      	ldr	r2, [pc, #72]	; (800729c <TIM_Base_SetConfig+0x124>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00b      	beq.n	8007270 <TIM_Base_SetConfig+0xf8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a11      	ldr	r2, [pc, #68]	; (80072a0 <TIM_Base_SetConfig+0x128>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d007      	beq.n	8007270 <TIM_Base_SetConfig+0xf8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a10      	ldr	r2, [pc, #64]	; (80072a4 <TIM_Base_SetConfig+0x12c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_Base_SetConfig+0xf8>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a0f      	ldr	r2, [pc, #60]	; (80072a8 <TIM_Base_SetConfig+0x130>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d103      	bne.n	8007278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	615a      	str	r2, [r3, #20]
}
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	40012c00 	.word	0x40012c00
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40013400 	.word	0x40013400
 80072a0:	40014000 	.word	0x40014000
 80072a4:	40014400 	.word	0x40014400
 80072a8:	40014800 	.word	0x40014800

080072ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	011b      	lsls	r3, r3, #4
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f023 030a 	bic.w	r3, r3, #10
 80072e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	621a      	str	r2, [r3, #32]
}
 80072fe:	bf00      	nop
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800730a:	b480      	push	{r7}
 800730c:	b087      	sub	sp, #28
 800730e:	af00      	add	r7, sp, #0
 8007310:	60f8      	str	r0, [r7, #12]
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	f023 0210 	bic.w	r2, r3, #16
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	031b      	lsls	r3, r3, #12
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007346:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	f043 0307 	orr.w	r3, r3, #7
 800738c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	609a      	str	r2, [r3, #8]
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	021a      	lsls	r2, r3, #8
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	431a      	orrs	r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	609a      	str	r2, [r3, #8]
}
 80073d4:	bf00      	nop
 80073d6:	371c      	adds	r7, #28
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e068      	b.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a2e      	ldr	r2, [pc, #184]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2d      	ldr	r2, [pc, #180]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d108      	bne.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007432:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007444:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1e      	ldr	r2, [pc, #120]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d01d      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746a:	d018      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a13      	ldr	r2, [pc, #76]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a14      	ldr	r2, [pc, #80]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10c      	bne.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40013400 	.word	0x40013400
 80074e0:	40000400 	.word	0x40000400
 80074e4:	40000800 	.word	0x40000800
 80074e8:	40000c00 	.word	0x40000c00
 80074ec:	40014000 	.word	0x40014000

080074f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e040      	b.n	80075c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fb fb8a 	bl	8002c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2224      	movs	r2, #36	; 0x24
 8007558:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0201 	bic.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 feb6 	bl	80082e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fbfb 	bl	8007d74 <UART_SetConfig>
 800757e:	4603      	mov	r3, r0
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e01b      	b.n	80075c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 ff35 	bl	8008428 <UART_CheckIdleState>
 80075be:	4603      	mov	r3, r0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	; 0x28
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d178      	bne.n	80076d2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <HAL_UART_Transmit+0x24>
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e071      	b.n	80076d4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2221      	movs	r2, #33	; 0x21
 80075fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075fe:	f7fb fe75 	bl	80032ec <HAL_GetTick>
 8007602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761c:	d108      	bne.n	8007630 <HAL_UART_Transmit+0x68>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d104      	bne.n	8007630 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	e003      	b.n	8007638 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007634:	2300      	movs	r3, #0
 8007636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007638:	e030      	b.n	800769c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2200      	movs	r2, #0
 8007642:	2180      	movs	r1, #128	; 0x80
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 ff97 	bl	8008578 <UART_WaitOnFlagUntilTimeout>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e03c      	b.n	80076d4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10b      	bne.n	8007678 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800766c:	b292      	uxth	r2, r2
 800766e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	3302      	adds	r3, #2
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	e008      	b.n	800768a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	781a      	ldrb	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	b292      	uxth	r2, r2
 8007682:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	3301      	adds	r3, #1
 8007688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007690:	b29b      	uxth	r3, r3
 8007692:	3b01      	subs	r3, #1
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1c8      	bne.n	800763a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2200      	movs	r2, #0
 80076b0:	2140      	movs	r1, #64	; 0x40
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 ff60 	bl	8008578 <UART_WaitOnFlagUntilTimeout>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d004      	beq.n	80076c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e005      	b.n	80076d4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e000      	b.n	80076d4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
  }
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3720      	adds	r7, #32
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	d137      	bne.n	8007764 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_UART_Receive_IT+0x24>
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e030      	b.n	8007766 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a18      	ldr	r2, [pc, #96]	; (8007770 <HAL_UART_Receive_IT+0x94>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d01f      	beq.n	8007754 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d018      	beq.n	8007754 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	613b      	str	r3, [r7, #16]
   return(result);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	461a      	mov	r2, r3
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	623b      	str	r3, [r7, #32]
 8007742:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	69f9      	ldr	r1, [r7, #28]
 8007746:	6a3a      	ldr	r2, [r7, #32]
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	61bb      	str	r3, [r7, #24]
   return(result);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e6      	bne.n	8007722 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	461a      	mov	r2, r3
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 ff74 	bl	8008648 <UART_Start_Receive_IT>
 8007760:	4603      	mov	r3, r0
 8007762:	e000      	b.n	8007766 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007764:	2302      	movs	r3, #2
  }
}
 8007766:	4618      	mov	r0, r3
 8007768:	3728      	adds	r7, #40	; 0x28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40008000 	.word	0x40008000

08007774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b0ba      	sub	sp, #232	; 0xe8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800779a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800779e:	f640 030f 	movw	r3, #2063	; 0x80f
 80077a2:	4013      	ands	r3, r2
 80077a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d115      	bne.n	80077dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00f      	beq.n	80077dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c0:	f003 0320 	and.w	r3, r3, #32
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d009      	beq.n	80077dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 82ae 	beq.w	8007d2e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
      }
      return;
 80077da:	e2a8      	b.n	8007d2e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80077dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8117 	beq.w	8007a14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80077f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80077f6:	4b85      	ldr	r3, [pc, #532]	; (8007a0c <HAL_UART_IRQHandler+0x298>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 810a 	beq.w	8007a14 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d011      	beq.n	8007830 <HAL_UART_IRQHandler+0xbc>
 800780c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2201      	movs	r2, #1
 800781e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007826:	f043 0201 	orr.w	r2, r3, #1
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d011      	beq.n	8007860 <HAL_UART_IRQHandler+0xec>
 800783c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2202      	movs	r2, #2
 800784e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007856:	f043 0204 	orr.w	r2, r3, #4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d011      	beq.n	8007890 <HAL_UART_IRQHandler+0x11c>
 800786c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2204      	movs	r2, #4
 800787e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007886:	f043 0202 	orr.w	r2, r3, #2
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007894:	f003 0308 	and.w	r3, r3, #8
 8007898:	2b00      	cmp	r3, #0
 800789a:	d017      	beq.n	80078cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800789c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d105      	bne.n	80078b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2208      	movs	r2, #8
 80078ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c2:	f043 0208 	orr.w	r2, r3, #8
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d012      	beq.n	80078fe <HAL_UART_IRQHandler+0x18a>
 80078d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00c      	beq.n	80078fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f4:	f043 0220 	orr.w	r2, r3, #32
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8214 	beq.w	8007d32 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800790a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00d      	beq.n	8007932 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d007      	beq.n	8007932 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007938:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d005      	beq.n	8007956 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800794a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800794e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007952:	2b00      	cmp	r3, #0
 8007954:	d04f      	beq.n	80079f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 ff3c 	bl	80087d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d141      	bne.n	80079ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3308      	adds	r3, #8
 8007992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800799a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1d9      	bne.n	800796a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d013      	beq.n	80079e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c2:	4a13      	ldr	r2, [pc, #76]	; (8007a10 <HAL_UART_IRQHandler+0x29c>)
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fb ffe5 	bl	800399a <HAL_DMA_Abort_IT>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d017      	beq.n	8007a06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079e0:	4610      	mov	r0, r2
 80079e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e4:	e00f      	b.n	8007a06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7fa f87a 	bl	8001ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ec:	e00b      	b.n	8007a06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fa f876 	bl	8001ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f4:	e007      	b.n	8007a06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fa f872 	bl	8001ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007a04:	e195      	b.n	8007d32 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a06:	bf00      	nop
    return;
 8007a08:	e193      	b.n	8007d32 <HAL_UART_IRQHandler+0x5be>
 8007a0a:	bf00      	nop
 8007a0c:	04000120 	.word	0x04000120
 8007a10:	0800889d 	.word	0x0800889d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	f040 814e 	bne.w	8007cba <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a22:	f003 0310 	and.w	r3, r3, #16
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8147 	beq.w	8007cba <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8140 	beq.w	8007cba <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2210      	movs	r2, #16
 8007a40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	f040 80b8 	bne.w	8007bc2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8167 	beq.w	8007d36 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a72:	429a      	cmp	r2, r3
 8007a74:	f080 815f 	bcs.w	8007d36 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f040 8086 	bne.w	8007ba0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007abe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ac2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1da      	bne.n	8007a94 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3308      	adds	r3, #8
 8007afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e1      	bne.n	8007ade <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e3      	bne.n	8007b1a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b70:	f023 0310 	bic.w	r3, r3, #16
 8007b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b82:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b84:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e4      	bne.n	8007b60 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fb febf 	bl	800391e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f8ce 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bc0:	e0b9      	b.n	8007d36 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80ab 	beq.w	8007d3a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f000 80a6 	beq.w	8007d3a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c10:	647b      	str	r3, [r7, #68]	; 0x44
 8007c12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e4      	bne.n	8007bee <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	623b      	str	r3, [r7, #32]
   return(result);
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	f023 0301 	bic.w	r3, r3, #1
 8007c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3308      	adds	r3, #8
 8007c44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c48:	633a      	str	r2, [r7, #48]	; 0x30
 8007c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e3      	bne.n	8007c24 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f023 0310 	bic.w	r3, r3, #16
 8007c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c92:	61fb      	str	r3, [r7, #28]
 8007c94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c96:	69b9      	ldr	r1, [r7, #24]
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	617b      	str	r3, [r7, #20]
   return(result);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e4      	bne.n	8007c70 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f852 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cb8:	e03f      	b.n	8007d3a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x570>
 8007cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 ffd9 	bl	8008c94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ce2:	e02d      	b.n	8007d40 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00e      	beq.n	8007d0e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d008      	beq.n	8007d0e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01c      	beq.n	8007d3e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
    }
    return;
 8007d0c:	e017      	b.n	8007d3e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d012      	beq.n	8007d40 <HAL_UART_IRQHandler+0x5cc>
 8007d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00c      	beq.n	8007d40 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fdce 	bl	80088c8 <UART_EndTransmit_IT>
    return;
 8007d2c:	e008      	b.n	8007d40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007d2e:	bf00      	nop
 8007d30:	e006      	b.n	8007d40 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007d32:	bf00      	nop
 8007d34:	e004      	b.n	8007d40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007d36:	bf00      	nop
 8007d38:	e002      	b.n	8007d40 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007d3a:	bf00      	nop
 8007d3c:	e000      	b.n	8007d40 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007d3e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d40:	37e8      	adds	r7, #232	; 0xe8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop

08007d48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d78:	b08a      	sub	sp, #40	; 0x28
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	431a      	orrs	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	4ba4      	ldr	r3, [pc, #656]	; (8008034 <UART_SetConfig+0x2c0>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dac:	430b      	orrs	r3, r1
 8007dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a99      	ldr	r2, [pc, #612]	; (8008038 <UART_SetConfig+0x2c4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d004      	beq.n	8007de0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df0:	430a      	orrs	r2, r1
 8007df2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a90      	ldr	r2, [pc, #576]	; (800803c <UART_SetConfig+0x2c8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d126      	bne.n	8007e4c <UART_SetConfig+0xd8>
 8007dfe:	4b90      	ldr	r3, [pc, #576]	; (8008040 <UART_SetConfig+0x2cc>)
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d81b      	bhi.n	8007e44 <UART_SetConfig+0xd0>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0xa0>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007e35 	.word	0x08007e35
 8007e1c:	08007e2d 	.word	0x08007e2d
 8007e20:	08007e3d 	.word	0x08007e3d
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e2a:	e116      	b.n	800805a <UART_SetConfig+0x2e6>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e32:	e112      	b.n	800805a <UART_SetConfig+0x2e6>
 8007e34:	2304      	movs	r3, #4
 8007e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e3a:	e10e      	b.n	800805a <UART_SetConfig+0x2e6>
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e42:	e10a      	b.n	800805a <UART_SetConfig+0x2e6>
 8007e44:	2310      	movs	r3, #16
 8007e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e4a:	e106      	b.n	800805a <UART_SetConfig+0x2e6>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a7c      	ldr	r2, [pc, #496]	; (8008044 <UART_SetConfig+0x2d0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d138      	bne.n	8007ec8 <UART_SetConfig+0x154>
 8007e56:	4b7a      	ldr	r3, [pc, #488]	; (8008040 <UART_SetConfig+0x2cc>)
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5c:	f003 030c 	and.w	r3, r3, #12
 8007e60:	2b0c      	cmp	r3, #12
 8007e62:	d82d      	bhi.n	8007ec0 <UART_SetConfig+0x14c>
 8007e64:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <UART_SetConfig+0xf8>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007ea1 	.word	0x08007ea1
 8007e70:	08007ec1 	.word	0x08007ec1
 8007e74:	08007ec1 	.word	0x08007ec1
 8007e78:	08007ec1 	.word	0x08007ec1
 8007e7c:	08007eb1 	.word	0x08007eb1
 8007e80:	08007ec1 	.word	0x08007ec1
 8007e84:	08007ec1 	.word	0x08007ec1
 8007e88:	08007ec1 	.word	0x08007ec1
 8007e8c:	08007ea9 	.word	0x08007ea9
 8007e90:	08007ec1 	.word	0x08007ec1
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	08007ec1 	.word	0x08007ec1
 8007e9c:	08007eb9 	.word	0x08007eb9
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ea6:	e0d8      	b.n	800805a <UART_SetConfig+0x2e6>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eae:	e0d4      	b.n	800805a <UART_SetConfig+0x2e6>
 8007eb0:	2304      	movs	r3, #4
 8007eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eb6:	e0d0      	b.n	800805a <UART_SetConfig+0x2e6>
 8007eb8:	2308      	movs	r3, #8
 8007eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ebe:	e0cc      	b.n	800805a <UART_SetConfig+0x2e6>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ec6:	e0c8      	b.n	800805a <UART_SetConfig+0x2e6>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a5e      	ldr	r2, [pc, #376]	; (8008048 <UART_SetConfig+0x2d4>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d125      	bne.n	8007f1e <UART_SetConfig+0x1aa>
 8007ed2:	4b5b      	ldr	r3, [pc, #364]	; (8008040 <UART_SetConfig+0x2cc>)
 8007ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007edc:	2b30      	cmp	r3, #48	; 0x30
 8007ede:	d016      	beq.n	8007f0e <UART_SetConfig+0x19a>
 8007ee0:	2b30      	cmp	r3, #48	; 0x30
 8007ee2:	d818      	bhi.n	8007f16 <UART_SetConfig+0x1a2>
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d00a      	beq.n	8007efe <UART_SetConfig+0x18a>
 8007ee8:	2b20      	cmp	r3, #32
 8007eea:	d814      	bhi.n	8007f16 <UART_SetConfig+0x1a2>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <UART_SetConfig+0x182>
 8007ef0:	2b10      	cmp	r3, #16
 8007ef2:	d008      	beq.n	8007f06 <UART_SetConfig+0x192>
 8007ef4:	e00f      	b.n	8007f16 <UART_SetConfig+0x1a2>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007efc:	e0ad      	b.n	800805a <UART_SetConfig+0x2e6>
 8007efe:	2302      	movs	r3, #2
 8007f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f04:	e0a9      	b.n	800805a <UART_SetConfig+0x2e6>
 8007f06:	2304      	movs	r3, #4
 8007f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f0c:	e0a5      	b.n	800805a <UART_SetConfig+0x2e6>
 8007f0e:	2308      	movs	r3, #8
 8007f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f14:	e0a1      	b.n	800805a <UART_SetConfig+0x2e6>
 8007f16:	2310      	movs	r3, #16
 8007f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f1c:	e09d      	b.n	800805a <UART_SetConfig+0x2e6>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a4a      	ldr	r2, [pc, #296]	; (800804c <UART_SetConfig+0x2d8>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d125      	bne.n	8007f74 <UART_SetConfig+0x200>
 8007f28:	4b45      	ldr	r3, [pc, #276]	; (8008040 <UART_SetConfig+0x2cc>)
 8007f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f32:	2bc0      	cmp	r3, #192	; 0xc0
 8007f34:	d016      	beq.n	8007f64 <UART_SetConfig+0x1f0>
 8007f36:	2bc0      	cmp	r3, #192	; 0xc0
 8007f38:	d818      	bhi.n	8007f6c <UART_SetConfig+0x1f8>
 8007f3a:	2b80      	cmp	r3, #128	; 0x80
 8007f3c:	d00a      	beq.n	8007f54 <UART_SetConfig+0x1e0>
 8007f3e:	2b80      	cmp	r3, #128	; 0x80
 8007f40:	d814      	bhi.n	8007f6c <UART_SetConfig+0x1f8>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <UART_SetConfig+0x1d8>
 8007f46:	2b40      	cmp	r3, #64	; 0x40
 8007f48:	d008      	beq.n	8007f5c <UART_SetConfig+0x1e8>
 8007f4a:	e00f      	b.n	8007f6c <UART_SetConfig+0x1f8>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f52:	e082      	b.n	800805a <UART_SetConfig+0x2e6>
 8007f54:	2302      	movs	r3, #2
 8007f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f5a:	e07e      	b.n	800805a <UART_SetConfig+0x2e6>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f62:	e07a      	b.n	800805a <UART_SetConfig+0x2e6>
 8007f64:	2308      	movs	r3, #8
 8007f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f6a:	e076      	b.n	800805a <UART_SetConfig+0x2e6>
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f72:	e072      	b.n	800805a <UART_SetConfig+0x2e6>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a35      	ldr	r2, [pc, #212]	; (8008050 <UART_SetConfig+0x2dc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d12a      	bne.n	8007fd4 <UART_SetConfig+0x260>
 8007f7e:	4b30      	ldr	r3, [pc, #192]	; (8008040 <UART_SetConfig+0x2cc>)
 8007f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f8c:	d01a      	beq.n	8007fc4 <UART_SetConfig+0x250>
 8007f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f92:	d81b      	bhi.n	8007fcc <UART_SetConfig+0x258>
 8007f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f98:	d00c      	beq.n	8007fb4 <UART_SetConfig+0x240>
 8007f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f9e:	d815      	bhi.n	8007fcc <UART_SetConfig+0x258>
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <UART_SetConfig+0x238>
 8007fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa8:	d008      	beq.n	8007fbc <UART_SetConfig+0x248>
 8007faa:	e00f      	b.n	8007fcc <UART_SetConfig+0x258>
 8007fac:	2300      	movs	r3, #0
 8007fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fb2:	e052      	b.n	800805a <UART_SetConfig+0x2e6>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fba:	e04e      	b.n	800805a <UART_SetConfig+0x2e6>
 8007fbc:	2304      	movs	r3, #4
 8007fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fc2:	e04a      	b.n	800805a <UART_SetConfig+0x2e6>
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fca:	e046      	b.n	800805a <UART_SetConfig+0x2e6>
 8007fcc:	2310      	movs	r3, #16
 8007fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd2:	e042      	b.n	800805a <UART_SetConfig+0x2e6>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a17      	ldr	r2, [pc, #92]	; (8008038 <UART_SetConfig+0x2c4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d13a      	bne.n	8008054 <UART_SetConfig+0x2e0>
 8007fde:	4b18      	ldr	r3, [pc, #96]	; (8008040 <UART_SetConfig+0x2cc>)
 8007fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fec:	d01a      	beq.n	8008024 <UART_SetConfig+0x2b0>
 8007fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff2:	d81b      	bhi.n	800802c <UART_SetConfig+0x2b8>
 8007ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff8:	d00c      	beq.n	8008014 <UART_SetConfig+0x2a0>
 8007ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffe:	d815      	bhi.n	800802c <UART_SetConfig+0x2b8>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <UART_SetConfig+0x298>
 8008004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008008:	d008      	beq.n	800801c <UART_SetConfig+0x2a8>
 800800a:	e00f      	b.n	800802c <UART_SetConfig+0x2b8>
 800800c:	2300      	movs	r3, #0
 800800e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008012:	e022      	b.n	800805a <UART_SetConfig+0x2e6>
 8008014:	2302      	movs	r3, #2
 8008016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800801a:	e01e      	b.n	800805a <UART_SetConfig+0x2e6>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008022:	e01a      	b.n	800805a <UART_SetConfig+0x2e6>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800802a:	e016      	b.n	800805a <UART_SetConfig+0x2e6>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008032:	e012      	b.n	800805a <UART_SetConfig+0x2e6>
 8008034:	efff69f3 	.word	0xefff69f3
 8008038:	40008000 	.word	0x40008000
 800803c:	40013800 	.word	0x40013800
 8008040:	40021000 	.word	0x40021000
 8008044:	40004400 	.word	0x40004400
 8008048:	40004800 	.word	0x40004800
 800804c:	40004c00 	.word	0x40004c00
 8008050:	40005000 	.word	0x40005000
 8008054:	2310      	movs	r3, #16
 8008056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a9f      	ldr	r2, [pc, #636]	; (80082dc <UART_SetConfig+0x568>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d17a      	bne.n	800815a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008068:	2b08      	cmp	r3, #8
 800806a:	d824      	bhi.n	80080b6 <UART_SetConfig+0x342>
 800806c:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <UART_SetConfig+0x300>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	08008099 	.word	0x08008099
 8008078:	080080b7 	.word	0x080080b7
 800807c:	080080a1 	.word	0x080080a1
 8008080:	080080b7 	.word	0x080080b7
 8008084:	080080a7 	.word	0x080080a7
 8008088:	080080b7 	.word	0x080080b7
 800808c:	080080b7 	.word	0x080080b7
 8008090:	080080b7 	.word	0x080080b7
 8008094:	080080af 	.word	0x080080af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008098:	f7fe f86a 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 800809c:	61f8      	str	r0, [r7, #28]
        break;
 800809e:	e010      	b.n	80080c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080a0:	4b8f      	ldr	r3, [pc, #572]	; (80082e0 <UART_SetConfig+0x56c>)
 80080a2:	61fb      	str	r3, [r7, #28]
        break;
 80080a4:	e00d      	b.n	80080c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080a6:	f7fd ffcb 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 80080aa:	61f8      	str	r0, [r7, #28]
        break;
 80080ac:	e009      	b.n	80080c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080b2:	61fb      	str	r3, [r7, #28]
        break;
 80080b4:	e005      	b.n	80080c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80080c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 80fb 	beq.w	80082c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	4613      	mov	r3, r2
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	4413      	add	r3, r2
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d305      	bcc.n	80080e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d903      	bls.n	80080ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80080ec:	e0e8      	b.n	80082c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	2200      	movs	r2, #0
 80080f2:	461c      	mov	r4, r3
 80080f4:	4615      	mov	r5, r2
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	022b      	lsls	r3, r5, #8
 8008100:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008104:	0222      	lsls	r2, r4, #8
 8008106:	68f9      	ldr	r1, [r7, #12]
 8008108:	6849      	ldr	r1, [r1, #4]
 800810a:	0849      	lsrs	r1, r1, #1
 800810c:	2000      	movs	r0, #0
 800810e:	4688      	mov	r8, r1
 8008110:	4681      	mov	r9, r0
 8008112:	eb12 0a08 	adds.w	sl, r2, r8
 8008116:	eb43 0b09 	adc.w	fp, r3, r9
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	603b      	str	r3, [r7, #0]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008128:	4650      	mov	r0, sl
 800812a:	4659      	mov	r1, fp
 800812c:	f7f8 fd84 	bl	8000c38 <__aeabi_uldivmod>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4613      	mov	r3, r2
 8008136:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800813e:	d308      	bcc.n	8008152 <UART_SetConfig+0x3de>
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008146:	d204      	bcs.n	8008152 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	60da      	str	r2, [r3, #12]
 8008150:	e0b6      	b.n	80082c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008158:	e0b2      	b.n	80082c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008162:	d15e      	bne.n	8008222 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008168:	2b08      	cmp	r3, #8
 800816a:	d828      	bhi.n	80081be <UART_SetConfig+0x44a>
 800816c:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <UART_SetConfig+0x400>)
 800816e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008172:	bf00      	nop
 8008174:	08008199 	.word	0x08008199
 8008178:	080081a1 	.word	0x080081a1
 800817c:	080081a9 	.word	0x080081a9
 8008180:	080081bf 	.word	0x080081bf
 8008184:	080081af 	.word	0x080081af
 8008188:	080081bf 	.word	0x080081bf
 800818c:	080081bf 	.word	0x080081bf
 8008190:	080081bf 	.word	0x080081bf
 8008194:	080081b7 	.word	0x080081b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008198:	f7fd ffea 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 800819c:	61f8      	str	r0, [r7, #28]
        break;
 800819e:	e014      	b.n	80081ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081a0:	f7fd fffc 	bl	800619c <HAL_RCC_GetPCLK2Freq>
 80081a4:	61f8      	str	r0, [r7, #28]
        break;
 80081a6:	e010      	b.n	80081ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a8:	4b4d      	ldr	r3, [pc, #308]	; (80082e0 <UART_SetConfig+0x56c>)
 80081aa:	61fb      	str	r3, [r7, #28]
        break;
 80081ac:	e00d      	b.n	80081ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ae:	f7fd ff47 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 80081b2:	61f8      	str	r0, [r7, #28]
        break;
 80081b4:	e009      	b.n	80081ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ba:	61fb      	str	r3, [r7, #28]
        break;
 80081bc:	e005      	b.n	80081ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80081c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d077      	beq.n	80082c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	005a      	lsls	r2, r3, #1
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	085b      	lsrs	r3, r3, #1
 80081da:	441a      	add	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	2b0f      	cmp	r3, #15
 80081ea:	d916      	bls.n	800821a <UART_SetConfig+0x4a6>
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f2:	d212      	bcs.n	800821a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f023 030f 	bic.w	r3, r3, #15
 80081fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	b29b      	uxth	r3, r3
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	b29a      	uxth	r2, r3
 800820a:	8afb      	ldrh	r3, [r7, #22]
 800820c:	4313      	orrs	r3, r2
 800820e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	8afa      	ldrh	r2, [r7, #22]
 8008216:	60da      	str	r2, [r3, #12]
 8008218:	e052      	b.n	80082c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008220:	e04e      	b.n	80082c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008226:	2b08      	cmp	r3, #8
 8008228:	d827      	bhi.n	800827a <UART_SetConfig+0x506>
 800822a:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <UART_SetConfig+0x4bc>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	08008255 	.word	0x08008255
 8008234:	0800825d 	.word	0x0800825d
 8008238:	08008265 	.word	0x08008265
 800823c:	0800827b 	.word	0x0800827b
 8008240:	0800826b 	.word	0x0800826b
 8008244:	0800827b 	.word	0x0800827b
 8008248:	0800827b 	.word	0x0800827b
 800824c:	0800827b 	.word	0x0800827b
 8008250:	08008273 	.word	0x08008273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008254:	f7fd ff8c 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 8008258:	61f8      	str	r0, [r7, #28]
        break;
 800825a:	e014      	b.n	8008286 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800825c:	f7fd ff9e 	bl	800619c <HAL_RCC_GetPCLK2Freq>
 8008260:	61f8      	str	r0, [r7, #28]
        break;
 8008262:	e010      	b.n	8008286 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008264:	4b1e      	ldr	r3, [pc, #120]	; (80082e0 <UART_SetConfig+0x56c>)
 8008266:	61fb      	str	r3, [r7, #28]
        break;
 8008268:	e00d      	b.n	8008286 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800826a:	f7fd fee9 	bl	8006040 <HAL_RCC_GetSysClockFreq>
 800826e:	61f8      	str	r0, [r7, #28]
        break;
 8008270:	e009      	b.n	8008286 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008276:	61fb      	str	r3, [r7, #28]
        break;
 8008278:	e005      	b.n	8008286 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008284:	bf00      	nop
    }

    if (pclk != 0U)
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d019      	beq.n	80082c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	085a      	lsrs	r2, r3, #1
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	441a      	add	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	fbb2 f3f3 	udiv	r3, r2, r3
 800829e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b0f      	cmp	r3, #15
 80082a4:	d909      	bls.n	80082ba <UART_SetConfig+0x546>
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ac:	d205      	bcs.n	80082ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	60da      	str	r2, [r3, #12]
 80082b8:	e002      	b.n	80082c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80082cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3728      	adds	r7, #40	; 0x28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082da:	bf00      	nop
 80082dc:	40008000 	.word	0x40008000
 80082e0:	00f42400 	.word	0x00f42400

080082e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	f003 0304 	and.w	r3, r3, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d01a      	beq.n	80083fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083e2:	d10a      	bne.n	80083fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	605a      	str	r2, [r3, #4]
  }
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b098      	sub	sp, #96	; 0x60
 800842c:	af02      	add	r7, sp, #8
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008438:	f7fa ff58 	bl	80032ec <HAL_GetTick>
 800843c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b08      	cmp	r3, #8
 800844a:	d12e      	bne.n	80084aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800844c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008454:	2200      	movs	r2, #0
 8008456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f88c 	bl	8008578 <UART_WaitOnFlagUntilTimeout>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d021      	beq.n	80084aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800847a:	653b      	str	r3, [r7, #80]	; 0x50
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008484:	647b      	str	r3, [r7, #68]	; 0x44
 8008486:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800848a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e6      	bne.n	8008466 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2220      	movs	r2, #32
 800849c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e062      	b.n	8008570 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d149      	bne.n	800854c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084c0:	2200      	movs	r2, #0
 80084c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f856 	bl	8008578 <UART_WaitOnFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d03c      	beq.n	800854c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	623b      	str	r3, [r7, #32]
   return(result);
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f0:	633b      	str	r3, [r7, #48]	; 0x30
 80084f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e6      	bne.n	80084d2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3308      	adds	r3, #8
 800850a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	60fb      	str	r3, [r7, #12]
   return(result);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0301 	bic.w	r3, r3, #1
 800851a:	64bb      	str	r3, [r7, #72]	; 0x48
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3308      	adds	r3, #8
 8008522:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008524:	61fa      	str	r2, [r7, #28]
 8008526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	69b9      	ldr	r1, [r7, #24]
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	617b      	str	r3, [r7, #20]
   return(result);
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e5      	bne.n	8008504 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2220      	movs	r2, #32
 800853c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e011      	b.n	8008570 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2220      	movs	r2, #32
 8008556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3758      	adds	r7, #88	; 0x58
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	4613      	mov	r3, r2
 8008586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008588:	e049      	b.n	800861e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008590:	d045      	beq.n	800861e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008592:	f7fa feab 	bl	80032ec <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d302      	bcc.n	80085a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e048      	b.n	800863e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0304 	and.w	r3, r3, #4
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d031      	beq.n	800861e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d110      	bne.n	80085ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2208      	movs	r2, #8
 80085ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 f8ff 	bl	80087d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2208      	movs	r2, #8
 80085da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e029      	b.n	800863e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085f8:	d111      	bne.n	800861e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f8e5 	bl	80087d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e00f      	b.n	800863e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69da      	ldr	r2, [r3, #28]
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	4013      	ands	r3, r2
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	429a      	cmp	r2, r3
 800862c:	bf0c      	ite	eq
 800862e:	2301      	moveq	r3, #1
 8008630:	2300      	movne	r3, #0
 8008632:	b2db      	uxtb	r3, r3
 8008634:	461a      	mov	r2, r3
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	429a      	cmp	r2, r3
 800863a:	d0a6      	beq.n	800858a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008648:	b480      	push	{r7}
 800864a:	b097      	sub	sp, #92	; 0x5c
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	88fa      	ldrh	r2, [r7, #6]
 8008660:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	88fa      	ldrh	r2, [r7, #6]
 8008668:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867a:	d10e      	bne.n	800869a <UART_Start_Receive_IT+0x52>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d105      	bne.n	8008690 <UART_Start_Receive_IT+0x48>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f240 12ff 	movw	r2, #511	; 0x1ff
 800868a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800868e:	e02d      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	22ff      	movs	r2, #255	; 0xff
 8008694:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008698:	e028      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10d      	bne.n	80086be <UART_Start_Receive_IT+0x76>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <UART_Start_Receive_IT+0x6c>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	22ff      	movs	r2, #255	; 0xff
 80086ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086b2:	e01b      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	227f      	movs	r2, #127	; 0x7f
 80086b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086bc:	e016      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086c6:	d10d      	bne.n	80086e4 <UART_Start_Receive_IT+0x9c>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d104      	bne.n	80086da <UART_Start_Receive_IT+0x92>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	227f      	movs	r2, #127	; 0x7f
 80086d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086d8:	e008      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	223f      	movs	r2, #63	; 0x3f
 80086de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086e2:	e003      	b.n	80086ec <UART_Start_Receive_IT+0xa4>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2222      	movs	r2, #34	; 0x22
 80086f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3308      	adds	r3, #8
 8008702:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	657b      	str	r3, [r7, #84]	; 0x54
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800871c:	64ba      	str	r2, [r7, #72]	; 0x48
 800871e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800872a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e5      	bne.n	80086fc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008738:	d107      	bne.n	800874a <UART_Start_Receive_IT+0x102>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d103      	bne.n	800874a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4a21      	ldr	r2, [pc, #132]	; (80087cc <UART_Start_Receive_IT+0x184>)
 8008746:	669a      	str	r2, [r3, #104]	; 0x68
 8008748:	e002      	b.n	8008750 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4a20      	ldr	r2, [pc, #128]	; (80087d0 <UART_Start_Receive_IT+0x188>)
 800874e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d019      	beq.n	800878c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800876c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008776:	637b      	str	r3, [r7, #52]	; 0x34
 8008778:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800877c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e6      	bne.n	8008758 <UART_Start_Receive_IT+0x110>
 800878a:	e018      	b.n	80087be <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	613b      	str	r3, [r7, #16]
   return(result);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f043 0320 	orr.w	r3, r3, #32
 80087a0:	653b      	str	r3, [r7, #80]	; 0x50
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087aa:	623b      	str	r3, [r7, #32]
 80087ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	69f9      	ldr	r1, [r7, #28]
 80087b0:	6a3a      	ldr	r2, [r7, #32]
 80087b2:	e841 2300 	strex	r3, r2, [r1]
 80087b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e6      	bne.n	800878c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	375c      	adds	r7, #92	; 0x5c
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	08008ad9 	.word	0x08008ad9
 80087d0:	0800891d 	.word	0x0800891d

080087d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b095      	sub	sp, #84	; 0x54
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fa:	643b      	str	r3, [r7, #64]	; 0x40
 80087fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e6      	bne.n	80087dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	61fb      	str	r3, [r7, #28]
   return(result);
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	f023 0301 	bic.w	r3, r3, #1
 8008824:	64bb      	str	r3, [r7, #72]	; 0x48
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800882e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008830:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e5      	bne.n	800880e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008846:	2b01      	cmp	r3, #1
 8008848:	d118      	bne.n	800887c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	60bb      	str	r3, [r7, #8]
   return(result);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f023 0310 	bic.w	r3, r3, #16
 800885e:	647b      	str	r3, [r7, #68]	; 0x44
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008868:	61bb      	str	r3, [r7, #24]
 800886a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	6979      	ldr	r1, [r7, #20]
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	e841 2300 	strex	r3, r2, [r1]
 8008874:	613b      	str	r3, [r7, #16]
   return(result);
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e6      	bne.n	800884a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2220      	movs	r2, #32
 8008880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008890:	bf00      	nop
 8008892:	3754      	adds	r7, #84	; 0x54
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7f9 f910 	bl	8001ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b088      	sub	sp, #32
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088e4:	61fb      	str	r3, [r7, #28]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	61bb      	str	r3, [r7, #24]
 80088f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	6979      	ldr	r1, [r7, #20]
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	613b      	str	r3, [r7, #16]
   return(result);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e6      	bne.n	80088d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2220      	movs	r2, #32
 8008906:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff fa1a 	bl	8007d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008914:	bf00      	nop
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b09c      	sub	sp, #112	; 0x70
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800892a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008934:	2b22      	cmp	r3, #34	; 0x22
 8008936:	f040 80be 	bne.w	8008ab6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008940:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008944:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008948:	b2d9      	uxtb	r1, r3
 800894a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800894e:	b2da      	uxtb	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008954:	400a      	ands	r2, r1
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800896a:	b29b      	uxth	r3, r3
 800896c:	3b01      	subs	r3, #1
 800896e:	b29a      	uxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	f040 80a3 	bne.w	8008aca <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008998:	66bb      	str	r3, [r7, #104]	; 0x68
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80089a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e6      	bne.n	8008984 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3308      	adds	r3, #8
 80089bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	667b      	str	r3, [r7, #100]	; 0x64
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3308      	adds	r3, #8
 80089d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80089d6:	647a      	str	r2, [r7, #68]	; 0x44
 80089d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089de:	e841 2300 	strex	r3, r2, [r1]
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e5      	bne.n	80089b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2220      	movs	r2, #32
 80089ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a34      	ldr	r2, [pc, #208]	; (8008ad4 <UART_RxISR_8BIT+0x1b8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d01f      	beq.n	8008a48 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d018      	beq.n	8008a48 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	e853 3f00 	ldrex	r3, [r3]
 8008a22:	623b      	str	r3, [r7, #32]
   return(result);
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	461a      	mov	r2, r3
 8008a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a34:	633b      	str	r3, [r7, #48]	; 0x30
 8008a36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a3c:	e841 2300 	strex	r3, r2, [r1]
 8008a40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e6      	bne.n	8008a16 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d12e      	bne.n	8008aae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0310 	bic.w	r3, r3, #16
 8008a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	69b9      	ldr	r1, [r7, #24]
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	617b      	str	r3, [r7, #20]
   return(result);
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e6      	bne.n	8008a56 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f003 0310 	and.w	r3, r3, #16
 8008a92:	2b10      	cmp	r3, #16
 8008a94:	d103      	bne.n	8008a9e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2210      	movs	r2, #16
 8008a9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff f958 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008aac:	e00d      	b.n	8008aca <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7f8 ff38 	bl	8001924 <HAL_UART_RxCpltCallback>
}
 8008ab4:	e009      	b.n	8008aca <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	8b1b      	ldrh	r3, [r3, #24]
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0208 	orr.w	r2, r2, #8
 8008ac6:	b292      	uxth	r2, r2
 8008ac8:	831a      	strh	r2, [r3, #24]
}
 8008aca:	bf00      	nop
 8008acc:	3770      	adds	r7, #112	; 0x70
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	40008000 	.word	0x40008000

08008ad8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b09c      	sub	sp, #112	; 0x70
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ae6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008af0:	2b22      	cmp	r3, #34	; 0x22
 8008af2:	f040 80be 	bne.w	8008c72 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008afc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b04:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b06:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008b0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008b0e:	4013      	ands	r3, r2
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1a:	1c9a      	adds	r2, r3, #2
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f040 80a3 	bne.w	8008c86 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b54:	667b      	str	r3, [r7, #100]	; 0x64
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8008b60:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e6      	bne.n	8008b40 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	663b      	str	r3, [r7, #96]	; 0x60
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b92:	643a      	str	r2, [r7, #64]	; 0x40
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e5      	bne.n	8008b72 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a34      	ldr	r2, [pc, #208]	; (8008c90 <UART_RxISR_16BIT+0x1b8>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d01f      	beq.n	8008c04 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d018      	beq.n	8008c04 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bf2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e6      	bne.n	8008bd2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d12e      	bne.n	8008c6a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f023 0310 	bic.w	r3, r3, #16
 8008c26:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c30:	61bb      	str	r3, [r7, #24]
 8008c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	6979      	ldr	r1, [r7, #20]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e6      	bne.n	8008c12 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f003 0310 	and.w	r3, r3, #16
 8008c4e:	2b10      	cmp	r3, #16
 8008c50:	d103      	bne.n	8008c5a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2210      	movs	r2, #16
 8008c58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff f87a 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c68:	e00d      	b.n	8008c86 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7f8 fe5a 	bl	8001924 <HAL_UART_RxCpltCallback>
}
 8008c70:	e009      	b.n	8008c86 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	8b1b      	ldrh	r3, [r3, #24]
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f042 0208 	orr.w	r2, r2, #8
 8008c82:	b292      	uxth	r2, r2
 8008c84:	831a      	strh	r2, [r3, #24]
}
 8008c86:	bf00      	nop
 8008c88:	3770      	adds	r7, #112	; 0x70
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	40008000 	.word	0x40008000

08008c94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <atof>:
 8008ca8:	2100      	movs	r1, #0
 8008caa:	f000 bec5 	b.w	8009a38 <strtod>

08008cae <atoi>:
 8008cae:	220a      	movs	r2, #10
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	f000 bf4f 	b.w	8009b54 <strtol>
	...

08008cb8 <siprintf>:
 8008cb8:	b40e      	push	{r1, r2, r3}
 8008cba:	b500      	push	{lr}
 8008cbc:	b09c      	sub	sp, #112	; 0x70
 8008cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8008cc0:	9002      	str	r0, [sp, #8]
 8008cc2:	9006      	str	r0, [sp, #24]
 8008cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cc8:	4809      	ldr	r0, [pc, #36]	; (8008cf0 <siprintf+0x38>)
 8008cca:	9107      	str	r1, [sp, #28]
 8008ccc:	9104      	str	r1, [sp, #16]
 8008cce:	4909      	ldr	r1, [pc, #36]	; (8008cf4 <siprintf+0x3c>)
 8008cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd4:	9105      	str	r1, [sp, #20]
 8008cd6:	6800      	ldr	r0, [r0, #0]
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	a902      	add	r1, sp, #8
 8008cdc:	f001 fbec 	bl	800a4b8 <_svfiprintf_r>
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	b01c      	add	sp, #112	; 0x70
 8008ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cec:	b003      	add	sp, #12
 8008cee:	4770      	bx	lr
 8008cf0:	200014d4 	.word	0x200014d4
 8008cf4:	ffff0208 	.word	0xffff0208

08008cf8 <std>:
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	b510      	push	{r4, lr}
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8008d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d06:	6083      	str	r3, [r0, #8]
 8008d08:	8181      	strh	r1, [r0, #12]
 8008d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d0c:	81c2      	strh	r2, [r0, #14]
 8008d0e:	6183      	str	r3, [r0, #24]
 8008d10:	4619      	mov	r1, r3
 8008d12:	2208      	movs	r2, #8
 8008d14:	305c      	adds	r0, #92	; 0x5c
 8008d16:	f000 ffb3 	bl	8009c80 <memset>
 8008d1a:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <std+0x38>)
 8008d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d1e:	4b05      	ldr	r3, [pc, #20]	; (8008d34 <std+0x3c>)
 8008d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <std+0x40>)
 8008d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <std+0x44>)
 8008d28:	6224      	str	r4, [r4, #32]
 8008d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d2c:	bd10      	pop	{r4, pc}
 8008d2e:	bf00      	nop
 8008d30:	0800b617 	.word	0x0800b617
 8008d34:	0800b639 	.word	0x0800b639
 8008d38:	0800b671 	.word	0x0800b671
 8008d3c:	0800b695 	.word	0x0800b695

08008d40 <stdio_exit_handler>:
 8008d40:	4a02      	ldr	r2, [pc, #8]	; (8008d4c <stdio_exit_handler+0xc>)
 8008d42:	4903      	ldr	r1, [pc, #12]	; (8008d50 <stdio_exit_handler+0x10>)
 8008d44:	4803      	ldr	r0, [pc, #12]	; (8008d54 <stdio_exit_handler+0x14>)
 8008d46:	f000 bf0f 	b.w	8009b68 <_fwalk_sglue>
 8008d4a:	bf00      	nop
 8008d4c:	20001310 	.word	0x20001310
 8008d50:	0800ac55 	.word	0x0800ac55
 8008d54:	20001488 	.word	0x20001488

08008d58 <cleanup_stdio>:
 8008d58:	6841      	ldr	r1, [r0, #4]
 8008d5a:	4b0c      	ldr	r3, [pc, #48]	; (8008d8c <cleanup_stdio+0x34>)
 8008d5c:	4299      	cmp	r1, r3
 8008d5e:	b510      	push	{r4, lr}
 8008d60:	4604      	mov	r4, r0
 8008d62:	d001      	beq.n	8008d68 <cleanup_stdio+0x10>
 8008d64:	f001 ff76 	bl	800ac54 <_fflush_r>
 8008d68:	68a1      	ldr	r1, [r4, #8]
 8008d6a:	4b09      	ldr	r3, [pc, #36]	; (8008d90 <cleanup_stdio+0x38>)
 8008d6c:	4299      	cmp	r1, r3
 8008d6e:	d002      	beq.n	8008d76 <cleanup_stdio+0x1e>
 8008d70:	4620      	mov	r0, r4
 8008d72:	f001 ff6f 	bl	800ac54 <_fflush_r>
 8008d76:	68e1      	ldr	r1, [r4, #12]
 8008d78:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <cleanup_stdio+0x3c>)
 8008d7a:	4299      	cmp	r1, r3
 8008d7c:	d004      	beq.n	8008d88 <cleanup_stdio+0x30>
 8008d7e:	4620      	mov	r0, r4
 8008d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d84:	f001 bf66 	b.w	800ac54 <_fflush_r>
 8008d88:	bd10      	pop	{r4, pc}
 8008d8a:	bf00      	nop
 8008d8c:	2000194c 	.word	0x2000194c
 8008d90:	200019b4 	.word	0x200019b4
 8008d94:	20001a1c 	.word	0x20001a1c

08008d98 <global_stdio_init.part.0>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <global_stdio_init.part.0+0x30>)
 8008d9c:	4c0b      	ldr	r4, [pc, #44]	; (8008dcc <global_stdio_init.part.0+0x34>)
 8008d9e:	4a0c      	ldr	r2, [pc, #48]	; (8008dd0 <global_stdio_init.part.0+0x38>)
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	4620      	mov	r0, r4
 8008da4:	2200      	movs	r2, #0
 8008da6:	2104      	movs	r1, #4
 8008da8:	f7ff ffa6 	bl	8008cf8 <std>
 8008dac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008db0:	2201      	movs	r2, #1
 8008db2:	2109      	movs	r1, #9
 8008db4:	f7ff ffa0 	bl	8008cf8 <std>
 8008db8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc2:	2112      	movs	r1, #18
 8008dc4:	f7ff bf98 	b.w	8008cf8 <std>
 8008dc8:	20001a84 	.word	0x20001a84
 8008dcc:	2000194c 	.word	0x2000194c
 8008dd0:	08008d41 	.word	0x08008d41

08008dd4 <__sfp_lock_acquire>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	; (8008ddc <__sfp_lock_acquire+0x8>)
 8008dd6:	f000 bf85 	b.w	8009ce4 <__retarget_lock_acquire_recursive>
 8008dda:	bf00      	nop
 8008ddc:	20001a89 	.word	0x20001a89

08008de0 <__sfp_lock_release>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__sfp_lock_release+0x8>)
 8008de2:	f000 bf80 	b.w	8009ce6 <__retarget_lock_release_recursive>
 8008de6:	bf00      	nop
 8008de8:	20001a89 	.word	0x20001a89

08008dec <__sinit>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	4604      	mov	r4, r0
 8008df0:	f7ff fff0 	bl	8008dd4 <__sfp_lock_acquire>
 8008df4:	6a23      	ldr	r3, [r4, #32]
 8008df6:	b11b      	cbz	r3, 8008e00 <__sinit+0x14>
 8008df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfc:	f7ff bff0 	b.w	8008de0 <__sfp_lock_release>
 8008e00:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <__sinit+0x28>)
 8008e02:	6223      	str	r3, [r4, #32]
 8008e04:	4b04      	ldr	r3, [pc, #16]	; (8008e18 <__sinit+0x2c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1f5      	bne.n	8008df8 <__sinit+0xc>
 8008e0c:	f7ff ffc4 	bl	8008d98 <global_stdio_init.part.0>
 8008e10:	e7f2      	b.n	8008df8 <__sinit+0xc>
 8008e12:	bf00      	nop
 8008e14:	08008d59 	.word	0x08008d59
 8008e18:	20001a84 	.word	0x20001a84

08008e1c <sulp>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	460d      	mov	r5, r1
 8008e22:	ec45 4b10 	vmov	d0, r4, r5
 8008e26:	4616      	mov	r6, r2
 8008e28:	f002 fab4 	bl	800b394 <__ulp>
 8008e2c:	ec51 0b10 	vmov	r0, r1, d0
 8008e30:	b17e      	cbz	r6, 8008e52 <sulp+0x36>
 8008e32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dd09      	ble.n	8008e52 <sulp+0x36>
 8008e3e:	051b      	lsls	r3, r3, #20
 8008e40:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008e44:	2400      	movs	r4, #0
 8008e46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	f7f7 fbd3 	bl	80005f8 <__aeabi_dmul>
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	0000      	movs	r0, r0
	...

08008e58 <_strtod_l>:
 8008e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e5c:	ed2d 8b02 	vpush	{d8}
 8008e60:	b09b      	sub	sp, #108	; 0x6c
 8008e62:	4604      	mov	r4, r0
 8008e64:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e66:	2200      	movs	r2, #0
 8008e68:	9216      	str	r2, [sp, #88]	; 0x58
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	f04f 0800 	mov.w	r8, #0
 8008e70:	f04f 0900 	mov.w	r9, #0
 8008e74:	460a      	mov	r2, r1
 8008e76:	9215      	str	r2, [sp, #84]	; 0x54
 8008e78:	7811      	ldrb	r1, [r2, #0]
 8008e7a:	292b      	cmp	r1, #43	; 0x2b
 8008e7c:	d04c      	beq.n	8008f18 <_strtod_l+0xc0>
 8008e7e:	d83a      	bhi.n	8008ef6 <_strtod_l+0x9e>
 8008e80:	290d      	cmp	r1, #13
 8008e82:	d834      	bhi.n	8008eee <_strtod_l+0x96>
 8008e84:	2908      	cmp	r1, #8
 8008e86:	d834      	bhi.n	8008ef2 <_strtod_l+0x9a>
 8008e88:	2900      	cmp	r1, #0
 8008e8a:	d03d      	beq.n	8008f08 <_strtod_l+0xb0>
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	920a      	str	r2, [sp, #40]	; 0x28
 8008e90:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008e92:	7832      	ldrb	r2, [r6, #0]
 8008e94:	2a30      	cmp	r2, #48	; 0x30
 8008e96:	f040 80b4 	bne.w	8009002 <_strtod_l+0x1aa>
 8008e9a:	7872      	ldrb	r2, [r6, #1]
 8008e9c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008ea0:	2a58      	cmp	r2, #88	; 0x58
 8008ea2:	d170      	bne.n	8008f86 <_strtod_l+0x12e>
 8008ea4:	9302      	str	r3, [sp, #8]
 8008ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	ab16      	add	r3, sp, #88	; 0x58
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	4a8e      	ldr	r2, [pc, #568]	; (80090e8 <_strtod_l+0x290>)
 8008eb0:	ab17      	add	r3, sp, #92	; 0x5c
 8008eb2:	a915      	add	r1, sp, #84	; 0x54
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 ffb5 	bl	8009e24 <__gethex>
 8008eba:	f010 070f 	ands.w	r7, r0, #15
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	d005      	beq.n	8008ece <_strtod_l+0x76>
 8008ec2:	2f06      	cmp	r7, #6
 8008ec4:	d12a      	bne.n	8008f1c <_strtod_l+0xc4>
 8008ec6:	3601      	adds	r6, #1
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9615      	str	r6, [sp, #84]	; 0x54
 8008ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8008ece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f040 857f 	bne.w	80099d4 <_strtod_l+0xb7c>
 8008ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed8:	b1db      	cbz	r3, 8008f12 <_strtod_l+0xba>
 8008eda:	4642      	mov	r2, r8
 8008edc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ee0:	ec43 2b10 	vmov	d0, r2, r3
 8008ee4:	b01b      	add	sp, #108	; 0x6c
 8008ee6:	ecbd 8b02 	vpop	{d8}
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	2920      	cmp	r1, #32
 8008ef0:	d1cc      	bne.n	8008e8c <_strtod_l+0x34>
 8008ef2:	3201      	adds	r2, #1
 8008ef4:	e7bf      	b.n	8008e76 <_strtod_l+0x1e>
 8008ef6:	292d      	cmp	r1, #45	; 0x2d
 8008ef8:	d1c8      	bne.n	8008e8c <_strtod_l+0x34>
 8008efa:	2101      	movs	r1, #1
 8008efc:	910a      	str	r1, [sp, #40]	; 0x28
 8008efe:	1c51      	adds	r1, r2, #1
 8008f00:	9115      	str	r1, [sp, #84]	; 0x54
 8008f02:	7852      	ldrb	r2, [r2, #1]
 8008f04:	2a00      	cmp	r2, #0
 8008f06:	d1c3      	bne.n	8008e90 <_strtod_l+0x38>
 8008f08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f0a:	9515      	str	r5, [sp, #84]	; 0x54
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f040 855f 	bne.w	80099d0 <_strtod_l+0xb78>
 8008f12:	4642      	mov	r2, r8
 8008f14:	464b      	mov	r3, r9
 8008f16:	e7e3      	b.n	8008ee0 <_strtod_l+0x88>
 8008f18:	2100      	movs	r1, #0
 8008f1a:	e7ef      	b.n	8008efc <_strtod_l+0xa4>
 8008f1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f1e:	b13a      	cbz	r2, 8008f30 <_strtod_l+0xd8>
 8008f20:	2135      	movs	r1, #53	; 0x35
 8008f22:	a818      	add	r0, sp, #96	; 0x60
 8008f24:	f002 fb33 	bl	800b58e <__copybits>
 8008f28:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f001 ff06 	bl	800ad3c <_Bfree>
 8008f30:	3f01      	subs	r7, #1
 8008f32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f34:	2f04      	cmp	r7, #4
 8008f36:	d806      	bhi.n	8008f46 <_strtod_l+0xee>
 8008f38:	e8df f007 	tbb	[pc, r7]
 8008f3c:	201d0314 	.word	0x201d0314
 8008f40:	14          	.byte	0x14
 8008f41:	00          	.byte	0x00
 8008f42:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008f46:	05e9      	lsls	r1, r5, #23
 8008f48:	bf48      	it	mi
 8008f4a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008f4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f52:	0d1b      	lsrs	r3, r3, #20
 8008f54:	051b      	lsls	r3, r3, #20
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1b9      	bne.n	8008ece <_strtod_l+0x76>
 8008f5a:	f000 fe99 	bl	8009c90 <__errno>
 8008f5e:	2322      	movs	r3, #34	; 0x22
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	e7b4      	b.n	8008ece <_strtod_l+0x76>
 8008f64:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008f68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008f74:	e7e7      	b.n	8008f46 <_strtod_l+0xee>
 8008f76:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80090f0 <_strtod_l+0x298>
 8008f7a:	e7e4      	b.n	8008f46 <_strtod_l+0xee>
 8008f7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008f80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008f84:	e7df      	b.n	8008f46 <_strtod_l+0xee>
 8008f86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f88:	1c5a      	adds	r2, r3, #1
 8008f8a:	9215      	str	r2, [sp, #84]	; 0x54
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	2b30      	cmp	r3, #48	; 0x30
 8008f90:	d0f9      	beq.n	8008f86 <_strtod_l+0x12e>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d09b      	beq.n	8008ece <_strtod_l+0x76>
 8008f96:	2301      	movs	r3, #1
 8008f98:	f04f 0a00 	mov.w	sl, #0
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fa2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008fa6:	46d3      	mov	fp, sl
 8008fa8:	220a      	movs	r2, #10
 8008faa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008fac:	7806      	ldrb	r6, [r0, #0]
 8008fae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008fb2:	b2d9      	uxtb	r1, r3
 8008fb4:	2909      	cmp	r1, #9
 8008fb6:	d926      	bls.n	8009006 <_strtod_l+0x1ae>
 8008fb8:	494c      	ldr	r1, [pc, #304]	; (80090ec <_strtod_l+0x294>)
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f000 fdf2 	bl	8009ba4 <strncmp>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d030      	beq.n	8009026 <_strtod_l+0x1ce>
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	4632      	mov	r2, r6
 8008fc8:	9005      	str	r0, [sp, #20]
 8008fca:	465e      	mov	r6, fp
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2a65      	cmp	r2, #101	; 0x65
 8008fd0:	d001      	beq.n	8008fd6 <_strtod_l+0x17e>
 8008fd2:	2a45      	cmp	r2, #69	; 0x45
 8008fd4:	d113      	bne.n	8008ffe <_strtod_l+0x1a6>
 8008fd6:	b91e      	cbnz	r6, 8008fe0 <_strtod_l+0x188>
 8008fd8:	9a04      	ldr	r2, [sp, #16]
 8008fda:	4302      	orrs	r2, r0
 8008fdc:	d094      	beq.n	8008f08 <_strtod_l+0xb0>
 8008fde:	2600      	movs	r6, #0
 8008fe0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008fe2:	1c6a      	adds	r2, r5, #1
 8008fe4:	9215      	str	r2, [sp, #84]	; 0x54
 8008fe6:	786a      	ldrb	r2, [r5, #1]
 8008fe8:	2a2b      	cmp	r2, #43	; 0x2b
 8008fea:	d074      	beq.n	80090d6 <_strtod_l+0x27e>
 8008fec:	2a2d      	cmp	r2, #45	; 0x2d
 8008fee:	d078      	beq.n	80090e2 <_strtod_l+0x28a>
 8008ff0:	f04f 0c00 	mov.w	ip, #0
 8008ff4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008ff8:	2909      	cmp	r1, #9
 8008ffa:	d97f      	bls.n	80090fc <_strtod_l+0x2a4>
 8008ffc:	9515      	str	r5, [sp, #84]	; 0x54
 8008ffe:	2700      	movs	r7, #0
 8009000:	e09e      	b.n	8009140 <_strtod_l+0x2e8>
 8009002:	2300      	movs	r3, #0
 8009004:	e7c8      	b.n	8008f98 <_strtod_l+0x140>
 8009006:	f1bb 0f08 	cmp.w	fp, #8
 800900a:	bfd8      	it	le
 800900c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800900e:	f100 0001 	add.w	r0, r0, #1
 8009012:	bfda      	itte	le
 8009014:	fb02 3301 	mlale	r3, r2, r1, r3
 8009018:	9309      	strle	r3, [sp, #36]	; 0x24
 800901a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800901e:	f10b 0b01 	add.w	fp, fp, #1
 8009022:	9015      	str	r0, [sp, #84]	; 0x54
 8009024:	e7c1      	b.n	8008faa <_strtod_l+0x152>
 8009026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	9215      	str	r2, [sp, #84]	; 0x54
 800902c:	785a      	ldrb	r2, [r3, #1]
 800902e:	f1bb 0f00 	cmp.w	fp, #0
 8009032:	d037      	beq.n	80090a4 <_strtod_l+0x24c>
 8009034:	9005      	str	r0, [sp, #20]
 8009036:	465e      	mov	r6, fp
 8009038:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800903c:	2b09      	cmp	r3, #9
 800903e:	d912      	bls.n	8009066 <_strtod_l+0x20e>
 8009040:	2301      	movs	r3, #1
 8009042:	e7c4      	b.n	8008fce <_strtod_l+0x176>
 8009044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	9215      	str	r2, [sp, #84]	; 0x54
 800904a:	785a      	ldrb	r2, [r3, #1]
 800904c:	3001      	adds	r0, #1
 800904e:	2a30      	cmp	r2, #48	; 0x30
 8009050:	d0f8      	beq.n	8009044 <_strtod_l+0x1ec>
 8009052:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009056:	2b08      	cmp	r3, #8
 8009058:	f200 84c1 	bhi.w	80099de <_strtod_l+0xb86>
 800905c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800905e:	9005      	str	r0, [sp, #20]
 8009060:	2000      	movs	r0, #0
 8009062:	930b      	str	r3, [sp, #44]	; 0x2c
 8009064:	4606      	mov	r6, r0
 8009066:	3a30      	subs	r2, #48	; 0x30
 8009068:	f100 0301 	add.w	r3, r0, #1
 800906c:	d014      	beq.n	8009098 <_strtod_l+0x240>
 800906e:	9905      	ldr	r1, [sp, #20]
 8009070:	4419      	add	r1, r3
 8009072:	9105      	str	r1, [sp, #20]
 8009074:	4633      	mov	r3, r6
 8009076:	eb00 0c06 	add.w	ip, r0, r6
 800907a:	210a      	movs	r1, #10
 800907c:	4563      	cmp	r3, ip
 800907e:	d113      	bne.n	80090a8 <_strtod_l+0x250>
 8009080:	1833      	adds	r3, r6, r0
 8009082:	2b08      	cmp	r3, #8
 8009084:	f106 0601 	add.w	r6, r6, #1
 8009088:	4406      	add	r6, r0
 800908a:	dc1a      	bgt.n	80090c2 <_strtod_l+0x26a>
 800908c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800908e:	230a      	movs	r3, #10
 8009090:	fb03 2301 	mla	r3, r3, r1, r2
 8009094:	9309      	str	r3, [sp, #36]	; 0x24
 8009096:	2300      	movs	r3, #0
 8009098:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800909a:	1c51      	adds	r1, r2, #1
 800909c:	9115      	str	r1, [sp, #84]	; 0x54
 800909e:	7852      	ldrb	r2, [r2, #1]
 80090a0:	4618      	mov	r0, r3
 80090a2:	e7c9      	b.n	8009038 <_strtod_l+0x1e0>
 80090a4:	4658      	mov	r0, fp
 80090a6:	e7d2      	b.n	800904e <_strtod_l+0x1f6>
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	f103 0301 	add.w	r3, r3, #1
 80090ae:	dc03      	bgt.n	80090b8 <_strtod_l+0x260>
 80090b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80090b2:	434f      	muls	r7, r1
 80090b4:	9709      	str	r7, [sp, #36]	; 0x24
 80090b6:	e7e1      	b.n	800907c <_strtod_l+0x224>
 80090b8:	2b10      	cmp	r3, #16
 80090ba:	bfd8      	it	le
 80090bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80090c0:	e7dc      	b.n	800907c <_strtod_l+0x224>
 80090c2:	2e10      	cmp	r6, #16
 80090c4:	bfdc      	itt	le
 80090c6:	230a      	movle	r3, #10
 80090c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80090cc:	e7e3      	b.n	8009096 <_strtod_l+0x23e>
 80090ce:	2300      	movs	r3, #0
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	2301      	movs	r3, #1
 80090d4:	e780      	b.n	8008fd8 <_strtod_l+0x180>
 80090d6:	f04f 0c00 	mov.w	ip, #0
 80090da:	1caa      	adds	r2, r5, #2
 80090dc:	9215      	str	r2, [sp, #84]	; 0x54
 80090de:	78aa      	ldrb	r2, [r5, #2]
 80090e0:	e788      	b.n	8008ff4 <_strtod_l+0x19c>
 80090e2:	f04f 0c01 	mov.w	ip, #1
 80090e6:	e7f8      	b.n	80090da <_strtod_l+0x282>
 80090e8:	0808a708 	.word	0x0808a708
 80090ec:	0808a6f8 	.word	0x0808a6f8
 80090f0:	7ff00000 	.word	0x7ff00000
 80090f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80090f6:	1c51      	adds	r1, r2, #1
 80090f8:	9115      	str	r1, [sp, #84]	; 0x54
 80090fa:	7852      	ldrb	r2, [r2, #1]
 80090fc:	2a30      	cmp	r2, #48	; 0x30
 80090fe:	d0f9      	beq.n	80090f4 <_strtod_l+0x29c>
 8009100:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009104:	2908      	cmp	r1, #8
 8009106:	f63f af7a 	bhi.w	8008ffe <_strtod_l+0x1a6>
 800910a:	3a30      	subs	r2, #48	; 0x30
 800910c:	9208      	str	r2, [sp, #32]
 800910e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009110:	920c      	str	r2, [sp, #48]	; 0x30
 8009112:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009114:	1c57      	adds	r7, r2, #1
 8009116:	9715      	str	r7, [sp, #84]	; 0x54
 8009118:	7852      	ldrb	r2, [r2, #1]
 800911a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800911e:	f1be 0f09 	cmp.w	lr, #9
 8009122:	d938      	bls.n	8009196 <_strtod_l+0x33e>
 8009124:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009126:	1a7f      	subs	r7, r7, r1
 8009128:	2f08      	cmp	r7, #8
 800912a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800912e:	dc03      	bgt.n	8009138 <_strtod_l+0x2e0>
 8009130:	9908      	ldr	r1, [sp, #32]
 8009132:	428f      	cmp	r7, r1
 8009134:	bfa8      	it	ge
 8009136:	460f      	movge	r7, r1
 8009138:	f1bc 0f00 	cmp.w	ip, #0
 800913c:	d000      	beq.n	8009140 <_strtod_l+0x2e8>
 800913e:	427f      	negs	r7, r7
 8009140:	2e00      	cmp	r6, #0
 8009142:	d14f      	bne.n	80091e4 <_strtod_l+0x38c>
 8009144:	9904      	ldr	r1, [sp, #16]
 8009146:	4301      	orrs	r1, r0
 8009148:	f47f aec1 	bne.w	8008ece <_strtod_l+0x76>
 800914c:	2b00      	cmp	r3, #0
 800914e:	f47f aedb 	bne.w	8008f08 <_strtod_l+0xb0>
 8009152:	2a69      	cmp	r2, #105	; 0x69
 8009154:	d029      	beq.n	80091aa <_strtod_l+0x352>
 8009156:	dc26      	bgt.n	80091a6 <_strtod_l+0x34e>
 8009158:	2a49      	cmp	r2, #73	; 0x49
 800915a:	d026      	beq.n	80091aa <_strtod_l+0x352>
 800915c:	2a4e      	cmp	r2, #78	; 0x4e
 800915e:	f47f aed3 	bne.w	8008f08 <_strtod_l+0xb0>
 8009162:	499b      	ldr	r1, [pc, #620]	; (80093d0 <_strtod_l+0x578>)
 8009164:	a815      	add	r0, sp, #84	; 0x54
 8009166:	f001 f89d 	bl	800a2a4 <__match>
 800916a:	2800      	cmp	r0, #0
 800916c:	f43f aecc 	beq.w	8008f08 <_strtod_l+0xb0>
 8009170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b28      	cmp	r3, #40	; 0x28
 8009176:	d12f      	bne.n	80091d8 <_strtod_l+0x380>
 8009178:	4996      	ldr	r1, [pc, #600]	; (80093d4 <_strtod_l+0x57c>)
 800917a:	aa18      	add	r2, sp, #96	; 0x60
 800917c:	a815      	add	r0, sp, #84	; 0x54
 800917e:	f001 f8a5 	bl	800a2cc <__hexnan>
 8009182:	2805      	cmp	r0, #5
 8009184:	d128      	bne.n	80091d8 <_strtod_l+0x380>
 8009186:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009188:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800918c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009190:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009194:	e69b      	b.n	8008ece <_strtod_l+0x76>
 8009196:	9f08      	ldr	r7, [sp, #32]
 8009198:	210a      	movs	r1, #10
 800919a:	fb01 2107 	mla	r1, r1, r7, r2
 800919e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80091a2:	9208      	str	r2, [sp, #32]
 80091a4:	e7b5      	b.n	8009112 <_strtod_l+0x2ba>
 80091a6:	2a6e      	cmp	r2, #110	; 0x6e
 80091a8:	e7d9      	b.n	800915e <_strtod_l+0x306>
 80091aa:	498b      	ldr	r1, [pc, #556]	; (80093d8 <_strtod_l+0x580>)
 80091ac:	a815      	add	r0, sp, #84	; 0x54
 80091ae:	f001 f879 	bl	800a2a4 <__match>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f43f aea8 	beq.w	8008f08 <_strtod_l+0xb0>
 80091b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091ba:	4988      	ldr	r1, [pc, #544]	; (80093dc <_strtod_l+0x584>)
 80091bc:	3b01      	subs	r3, #1
 80091be:	a815      	add	r0, sp, #84	; 0x54
 80091c0:	9315      	str	r3, [sp, #84]	; 0x54
 80091c2:	f001 f86f 	bl	800a2a4 <__match>
 80091c6:	b910      	cbnz	r0, 80091ce <_strtod_l+0x376>
 80091c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091ca:	3301      	adds	r3, #1
 80091cc:	9315      	str	r3, [sp, #84]	; 0x54
 80091ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80093ec <_strtod_l+0x594>
 80091d2:	f04f 0800 	mov.w	r8, #0
 80091d6:	e67a      	b.n	8008ece <_strtod_l+0x76>
 80091d8:	4881      	ldr	r0, [pc, #516]	; (80093e0 <_strtod_l+0x588>)
 80091da:	f000 fd95 	bl	8009d08 <nan>
 80091de:	ec59 8b10 	vmov	r8, r9, d0
 80091e2:	e674      	b.n	8008ece <_strtod_l+0x76>
 80091e4:	9b05      	ldr	r3, [sp, #20]
 80091e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091e8:	1afb      	subs	r3, r7, r3
 80091ea:	f1bb 0f00 	cmp.w	fp, #0
 80091ee:	bf08      	it	eq
 80091f0:	46b3      	moveq	fp, r6
 80091f2:	2e10      	cmp	r6, #16
 80091f4:	9308      	str	r3, [sp, #32]
 80091f6:	4635      	mov	r5, r6
 80091f8:	bfa8      	it	ge
 80091fa:	2510      	movge	r5, #16
 80091fc:	f7f7 f982 	bl	8000504 <__aeabi_ui2d>
 8009200:	2e09      	cmp	r6, #9
 8009202:	4680      	mov	r8, r0
 8009204:	4689      	mov	r9, r1
 8009206:	dd13      	ble.n	8009230 <_strtod_l+0x3d8>
 8009208:	4b76      	ldr	r3, [pc, #472]	; (80093e4 <_strtod_l+0x58c>)
 800920a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800920e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009212:	f7f7 f9f1 	bl	80005f8 <__aeabi_dmul>
 8009216:	4680      	mov	r8, r0
 8009218:	4650      	mov	r0, sl
 800921a:	4689      	mov	r9, r1
 800921c:	f7f7 f972 	bl	8000504 <__aeabi_ui2d>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4640      	mov	r0, r8
 8009226:	4649      	mov	r1, r9
 8009228:	f7f7 f830 	bl	800028c <__adddf3>
 800922c:	4680      	mov	r8, r0
 800922e:	4689      	mov	r9, r1
 8009230:	2e0f      	cmp	r6, #15
 8009232:	dc38      	bgt.n	80092a6 <_strtod_l+0x44e>
 8009234:	9b08      	ldr	r3, [sp, #32]
 8009236:	2b00      	cmp	r3, #0
 8009238:	f43f ae49 	beq.w	8008ece <_strtod_l+0x76>
 800923c:	dd24      	ble.n	8009288 <_strtod_l+0x430>
 800923e:	2b16      	cmp	r3, #22
 8009240:	dc0b      	bgt.n	800925a <_strtod_l+0x402>
 8009242:	4968      	ldr	r1, [pc, #416]	; (80093e4 <_strtod_l+0x58c>)
 8009244:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800924c:	4642      	mov	r2, r8
 800924e:	464b      	mov	r3, r9
 8009250:	f7f7 f9d2 	bl	80005f8 <__aeabi_dmul>
 8009254:	4680      	mov	r8, r0
 8009256:	4689      	mov	r9, r1
 8009258:	e639      	b.n	8008ece <_strtod_l+0x76>
 800925a:	9a08      	ldr	r2, [sp, #32]
 800925c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009260:	4293      	cmp	r3, r2
 8009262:	db20      	blt.n	80092a6 <_strtod_l+0x44e>
 8009264:	4c5f      	ldr	r4, [pc, #380]	; (80093e4 <_strtod_l+0x58c>)
 8009266:	f1c6 060f 	rsb	r6, r6, #15
 800926a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800926e:	4642      	mov	r2, r8
 8009270:	464b      	mov	r3, r9
 8009272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009276:	f7f7 f9bf 	bl	80005f8 <__aeabi_dmul>
 800927a:	9b08      	ldr	r3, [sp, #32]
 800927c:	1b9e      	subs	r6, r3, r6
 800927e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009282:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009286:	e7e3      	b.n	8009250 <_strtod_l+0x3f8>
 8009288:	9b08      	ldr	r3, [sp, #32]
 800928a:	3316      	adds	r3, #22
 800928c:	db0b      	blt.n	80092a6 <_strtod_l+0x44e>
 800928e:	9b05      	ldr	r3, [sp, #20]
 8009290:	1bdf      	subs	r7, r3, r7
 8009292:	4b54      	ldr	r3, [pc, #336]	; (80093e4 <_strtod_l+0x58c>)
 8009294:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800929c:	4640      	mov	r0, r8
 800929e:	4649      	mov	r1, r9
 80092a0:	f7f7 fad4 	bl	800084c <__aeabi_ddiv>
 80092a4:	e7d6      	b.n	8009254 <_strtod_l+0x3fc>
 80092a6:	9b08      	ldr	r3, [sp, #32]
 80092a8:	1b75      	subs	r5, r6, r5
 80092aa:	441d      	add	r5, r3
 80092ac:	2d00      	cmp	r5, #0
 80092ae:	dd70      	ble.n	8009392 <_strtod_l+0x53a>
 80092b0:	f015 030f 	ands.w	r3, r5, #15
 80092b4:	d00a      	beq.n	80092cc <_strtod_l+0x474>
 80092b6:	494b      	ldr	r1, [pc, #300]	; (80093e4 <_strtod_l+0x58c>)
 80092b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092bc:	4642      	mov	r2, r8
 80092be:	464b      	mov	r3, r9
 80092c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c4:	f7f7 f998 	bl	80005f8 <__aeabi_dmul>
 80092c8:	4680      	mov	r8, r0
 80092ca:	4689      	mov	r9, r1
 80092cc:	f035 050f 	bics.w	r5, r5, #15
 80092d0:	d04d      	beq.n	800936e <_strtod_l+0x516>
 80092d2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80092d6:	dd22      	ble.n	800931e <_strtod_l+0x4c6>
 80092d8:	2500      	movs	r5, #0
 80092da:	46ab      	mov	fp, r5
 80092dc:	9509      	str	r5, [sp, #36]	; 0x24
 80092de:	9505      	str	r5, [sp, #20]
 80092e0:	2322      	movs	r3, #34	; 0x22
 80092e2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80093ec <_strtod_l+0x594>
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	f04f 0800 	mov.w	r8, #0
 80092ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f43f aded 	beq.w	8008ece <_strtod_l+0x76>
 80092f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80092f6:	4620      	mov	r0, r4
 80092f8:	f001 fd20 	bl	800ad3c <_Bfree>
 80092fc:	9905      	ldr	r1, [sp, #20]
 80092fe:	4620      	mov	r0, r4
 8009300:	f001 fd1c 	bl	800ad3c <_Bfree>
 8009304:	4659      	mov	r1, fp
 8009306:	4620      	mov	r0, r4
 8009308:	f001 fd18 	bl	800ad3c <_Bfree>
 800930c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800930e:	4620      	mov	r0, r4
 8009310:	f001 fd14 	bl	800ad3c <_Bfree>
 8009314:	4629      	mov	r1, r5
 8009316:	4620      	mov	r0, r4
 8009318:	f001 fd10 	bl	800ad3c <_Bfree>
 800931c:	e5d7      	b.n	8008ece <_strtod_l+0x76>
 800931e:	4b32      	ldr	r3, [pc, #200]	; (80093e8 <_strtod_l+0x590>)
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	2300      	movs	r3, #0
 8009324:	112d      	asrs	r5, r5, #4
 8009326:	4640      	mov	r0, r8
 8009328:	4649      	mov	r1, r9
 800932a:	469a      	mov	sl, r3
 800932c:	2d01      	cmp	r5, #1
 800932e:	dc21      	bgt.n	8009374 <_strtod_l+0x51c>
 8009330:	b10b      	cbz	r3, 8009336 <_strtod_l+0x4de>
 8009332:	4680      	mov	r8, r0
 8009334:	4689      	mov	r9, r1
 8009336:	492c      	ldr	r1, [pc, #176]	; (80093e8 <_strtod_l+0x590>)
 8009338:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800933c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009340:	4642      	mov	r2, r8
 8009342:	464b      	mov	r3, r9
 8009344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009348:	f7f7 f956 	bl	80005f8 <__aeabi_dmul>
 800934c:	4b27      	ldr	r3, [pc, #156]	; (80093ec <_strtod_l+0x594>)
 800934e:	460a      	mov	r2, r1
 8009350:	400b      	ands	r3, r1
 8009352:	4927      	ldr	r1, [pc, #156]	; (80093f0 <_strtod_l+0x598>)
 8009354:	428b      	cmp	r3, r1
 8009356:	4680      	mov	r8, r0
 8009358:	d8be      	bhi.n	80092d8 <_strtod_l+0x480>
 800935a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800935e:	428b      	cmp	r3, r1
 8009360:	bf86      	itte	hi
 8009362:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80093f4 <_strtod_l+0x59c>
 8009366:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800936a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800936e:	2300      	movs	r3, #0
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	e07b      	b.n	800946c <_strtod_l+0x614>
 8009374:	07ea      	lsls	r2, r5, #31
 8009376:	d505      	bpl.n	8009384 <_strtod_l+0x52c>
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7f7 f93b 	bl	80005f8 <__aeabi_dmul>
 8009382:	2301      	movs	r3, #1
 8009384:	9a04      	ldr	r2, [sp, #16]
 8009386:	3208      	adds	r2, #8
 8009388:	f10a 0a01 	add.w	sl, sl, #1
 800938c:	106d      	asrs	r5, r5, #1
 800938e:	9204      	str	r2, [sp, #16]
 8009390:	e7cc      	b.n	800932c <_strtod_l+0x4d4>
 8009392:	d0ec      	beq.n	800936e <_strtod_l+0x516>
 8009394:	426d      	negs	r5, r5
 8009396:	f015 020f 	ands.w	r2, r5, #15
 800939a:	d00a      	beq.n	80093b2 <_strtod_l+0x55a>
 800939c:	4b11      	ldr	r3, [pc, #68]	; (80093e4 <_strtod_l+0x58c>)
 800939e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093a2:	4640      	mov	r0, r8
 80093a4:	4649      	mov	r1, r9
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	f7f7 fa4f 	bl	800084c <__aeabi_ddiv>
 80093ae:	4680      	mov	r8, r0
 80093b0:	4689      	mov	r9, r1
 80093b2:	112d      	asrs	r5, r5, #4
 80093b4:	d0db      	beq.n	800936e <_strtod_l+0x516>
 80093b6:	2d1f      	cmp	r5, #31
 80093b8:	dd1e      	ble.n	80093f8 <_strtod_l+0x5a0>
 80093ba:	2500      	movs	r5, #0
 80093bc:	46ab      	mov	fp, r5
 80093be:	9509      	str	r5, [sp, #36]	; 0x24
 80093c0:	9505      	str	r5, [sp, #20]
 80093c2:	2322      	movs	r3, #34	; 0x22
 80093c4:	f04f 0800 	mov.w	r8, #0
 80093c8:	f04f 0900 	mov.w	r9, #0
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	e78d      	b.n	80092ec <_strtod_l+0x494>
 80093d0:	0808a703 	.word	0x0808a703
 80093d4:	0808a71c 	.word	0x0808a71c
 80093d8:	0808a6fa 	.word	0x0808a6fa
 80093dc:	0808a6fd 	.word	0x0808a6fd
 80093e0:	0808a90d 	.word	0x0808a90d
 80093e4:	0808aa38 	.word	0x0808aa38
 80093e8:	0808aa10 	.word	0x0808aa10
 80093ec:	7ff00000 	.word	0x7ff00000
 80093f0:	7ca00000 	.word	0x7ca00000
 80093f4:	7fefffff 	.word	0x7fefffff
 80093f8:	f015 0310 	ands.w	r3, r5, #16
 80093fc:	bf18      	it	ne
 80093fe:	236a      	movne	r3, #106	; 0x6a
 8009400:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80097a4 <_strtod_l+0x94c>
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	4640      	mov	r0, r8
 8009408:	4649      	mov	r1, r9
 800940a:	2300      	movs	r3, #0
 800940c:	07ea      	lsls	r2, r5, #31
 800940e:	d504      	bpl.n	800941a <_strtod_l+0x5c2>
 8009410:	e9da 2300 	ldrd	r2, r3, [sl]
 8009414:	f7f7 f8f0 	bl	80005f8 <__aeabi_dmul>
 8009418:	2301      	movs	r3, #1
 800941a:	106d      	asrs	r5, r5, #1
 800941c:	f10a 0a08 	add.w	sl, sl, #8
 8009420:	d1f4      	bne.n	800940c <_strtod_l+0x5b4>
 8009422:	b10b      	cbz	r3, 8009428 <_strtod_l+0x5d0>
 8009424:	4680      	mov	r8, r0
 8009426:	4689      	mov	r9, r1
 8009428:	9b04      	ldr	r3, [sp, #16]
 800942a:	b1bb      	cbz	r3, 800945c <_strtod_l+0x604>
 800942c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009430:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009434:	2b00      	cmp	r3, #0
 8009436:	4649      	mov	r1, r9
 8009438:	dd10      	ble.n	800945c <_strtod_l+0x604>
 800943a:	2b1f      	cmp	r3, #31
 800943c:	f340 811e 	ble.w	800967c <_strtod_l+0x824>
 8009440:	2b34      	cmp	r3, #52	; 0x34
 8009442:	bfde      	ittt	le
 8009444:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009448:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800944c:	4093      	lslle	r3, r2
 800944e:	f04f 0800 	mov.w	r8, #0
 8009452:	bfcc      	ite	gt
 8009454:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009458:	ea03 0901 	andle.w	r9, r3, r1
 800945c:	2200      	movs	r2, #0
 800945e:	2300      	movs	r3, #0
 8009460:	4640      	mov	r0, r8
 8009462:	4649      	mov	r1, r9
 8009464:	f7f7 fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 8009468:	2800      	cmp	r0, #0
 800946a:	d1a6      	bne.n	80093ba <_strtod_l+0x562>
 800946c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009472:	4633      	mov	r3, r6
 8009474:	465a      	mov	r2, fp
 8009476:	4620      	mov	r0, r4
 8009478:	f001 fcc8 	bl	800ae0c <__s2b>
 800947c:	9009      	str	r0, [sp, #36]	; 0x24
 800947e:	2800      	cmp	r0, #0
 8009480:	f43f af2a 	beq.w	80092d8 <_strtod_l+0x480>
 8009484:	9a08      	ldr	r2, [sp, #32]
 8009486:	9b05      	ldr	r3, [sp, #20]
 8009488:	2a00      	cmp	r2, #0
 800948a:	eba3 0307 	sub.w	r3, r3, r7
 800948e:	bfa8      	it	ge
 8009490:	2300      	movge	r3, #0
 8009492:	930c      	str	r3, [sp, #48]	; 0x30
 8009494:	2500      	movs	r5, #0
 8009496:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800949a:	9312      	str	r3, [sp, #72]	; 0x48
 800949c:	46ab      	mov	fp, r5
 800949e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a0:	4620      	mov	r0, r4
 80094a2:	6859      	ldr	r1, [r3, #4]
 80094a4:	f001 fc0a 	bl	800acbc <_Balloc>
 80094a8:	9005      	str	r0, [sp, #20]
 80094aa:	2800      	cmp	r0, #0
 80094ac:	f43f af18 	beq.w	80092e0 <_strtod_l+0x488>
 80094b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	3202      	adds	r2, #2
 80094b6:	f103 010c 	add.w	r1, r3, #12
 80094ba:	0092      	lsls	r2, r2, #2
 80094bc:	300c      	adds	r0, #12
 80094be:	f000 fc13 	bl	8009ce8 <memcpy>
 80094c2:	ec49 8b10 	vmov	d0, r8, r9
 80094c6:	aa18      	add	r2, sp, #96	; 0x60
 80094c8:	a917      	add	r1, sp, #92	; 0x5c
 80094ca:	4620      	mov	r0, r4
 80094cc:	f001 ffd2 	bl	800b474 <__d2b>
 80094d0:	ec49 8b18 	vmov	d8, r8, r9
 80094d4:	9016      	str	r0, [sp, #88]	; 0x58
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f43f af02 	beq.w	80092e0 <_strtod_l+0x488>
 80094dc:	2101      	movs	r1, #1
 80094de:	4620      	mov	r0, r4
 80094e0:	f001 fd2c 	bl	800af3c <__i2b>
 80094e4:	4683      	mov	fp, r0
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f43f aefa 	beq.w	80092e0 <_strtod_l+0x488>
 80094ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80094ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80094f0:	2e00      	cmp	r6, #0
 80094f2:	bfab      	itete	ge
 80094f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80094f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80094f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80094fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80094fe:	bfac      	ite	ge
 8009500:	eb06 0a03 	addge.w	sl, r6, r3
 8009504:	1b9f      	sublt	r7, r3, r6
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	1af6      	subs	r6, r6, r3
 800950a:	4416      	add	r6, r2
 800950c:	4ba0      	ldr	r3, [pc, #640]	; (8009790 <_strtod_l+0x938>)
 800950e:	3e01      	subs	r6, #1
 8009510:	429e      	cmp	r6, r3
 8009512:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009516:	f280 80c4 	bge.w	80096a2 <_strtod_l+0x84a>
 800951a:	1b9b      	subs	r3, r3, r6
 800951c:	2b1f      	cmp	r3, #31
 800951e:	eba2 0203 	sub.w	r2, r2, r3
 8009522:	f04f 0101 	mov.w	r1, #1
 8009526:	f300 80b0 	bgt.w	800968a <_strtod_l+0x832>
 800952a:	fa01 f303 	lsl.w	r3, r1, r3
 800952e:	930e      	str	r3, [sp, #56]	; 0x38
 8009530:	2300      	movs	r3, #0
 8009532:	930d      	str	r3, [sp, #52]	; 0x34
 8009534:	eb0a 0602 	add.w	r6, sl, r2
 8009538:	9b04      	ldr	r3, [sp, #16]
 800953a:	45b2      	cmp	sl, r6
 800953c:	4417      	add	r7, r2
 800953e:	441f      	add	r7, r3
 8009540:	4653      	mov	r3, sl
 8009542:	bfa8      	it	ge
 8009544:	4633      	movge	r3, r6
 8009546:	42bb      	cmp	r3, r7
 8009548:	bfa8      	it	ge
 800954a:	463b      	movge	r3, r7
 800954c:	2b00      	cmp	r3, #0
 800954e:	bfc2      	ittt	gt
 8009550:	1af6      	subgt	r6, r6, r3
 8009552:	1aff      	subgt	r7, r7, r3
 8009554:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800955a:	2b00      	cmp	r3, #0
 800955c:	dd17      	ble.n	800958e <_strtod_l+0x736>
 800955e:	4659      	mov	r1, fp
 8009560:	461a      	mov	r2, r3
 8009562:	4620      	mov	r0, r4
 8009564:	f001 fdaa 	bl	800b0bc <__pow5mult>
 8009568:	4683      	mov	fp, r0
 800956a:	2800      	cmp	r0, #0
 800956c:	f43f aeb8 	beq.w	80092e0 <_strtod_l+0x488>
 8009570:	4601      	mov	r1, r0
 8009572:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009574:	4620      	mov	r0, r4
 8009576:	f001 fcf7 	bl	800af68 <__multiply>
 800957a:	900b      	str	r0, [sp, #44]	; 0x2c
 800957c:	2800      	cmp	r0, #0
 800957e:	f43f aeaf 	beq.w	80092e0 <_strtod_l+0x488>
 8009582:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009584:	4620      	mov	r0, r4
 8009586:	f001 fbd9 	bl	800ad3c <_Bfree>
 800958a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800958c:	9316      	str	r3, [sp, #88]	; 0x58
 800958e:	2e00      	cmp	r6, #0
 8009590:	f300 808c 	bgt.w	80096ac <_strtod_l+0x854>
 8009594:	9b08      	ldr	r3, [sp, #32]
 8009596:	2b00      	cmp	r3, #0
 8009598:	dd08      	ble.n	80095ac <_strtod_l+0x754>
 800959a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800959c:	9905      	ldr	r1, [sp, #20]
 800959e:	4620      	mov	r0, r4
 80095a0:	f001 fd8c 	bl	800b0bc <__pow5mult>
 80095a4:	9005      	str	r0, [sp, #20]
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f43f ae9a 	beq.w	80092e0 <_strtod_l+0x488>
 80095ac:	2f00      	cmp	r7, #0
 80095ae:	dd08      	ble.n	80095c2 <_strtod_l+0x76a>
 80095b0:	9905      	ldr	r1, [sp, #20]
 80095b2:	463a      	mov	r2, r7
 80095b4:	4620      	mov	r0, r4
 80095b6:	f001 fddb 	bl	800b170 <__lshift>
 80095ba:	9005      	str	r0, [sp, #20]
 80095bc:	2800      	cmp	r0, #0
 80095be:	f43f ae8f 	beq.w	80092e0 <_strtod_l+0x488>
 80095c2:	f1ba 0f00 	cmp.w	sl, #0
 80095c6:	dd08      	ble.n	80095da <_strtod_l+0x782>
 80095c8:	4659      	mov	r1, fp
 80095ca:	4652      	mov	r2, sl
 80095cc:	4620      	mov	r0, r4
 80095ce:	f001 fdcf 	bl	800b170 <__lshift>
 80095d2:	4683      	mov	fp, r0
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f43f ae83 	beq.w	80092e0 <_strtod_l+0x488>
 80095da:	9a05      	ldr	r2, [sp, #20]
 80095dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095de:	4620      	mov	r0, r4
 80095e0:	f001 fe4e 	bl	800b280 <__mdiff>
 80095e4:	4605      	mov	r5, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f43f ae7a 	beq.w	80092e0 <_strtod_l+0x488>
 80095ec:	68c3      	ldr	r3, [r0, #12]
 80095ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80095f0:	2300      	movs	r3, #0
 80095f2:	60c3      	str	r3, [r0, #12]
 80095f4:	4659      	mov	r1, fp
 80095f6:	f001 fe27 	bl	800b248 <__mcmp>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	da60      	bge.n	80096c0 <_strtod_l+0x868>
 80095fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009600:	ea53 0308 	orrs.w	r3, r3, r8
 8009604:	f040 8084 	bne.w	8009710 <_strtod_l+0x8b8>
 8009608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800960c:	2b00      	cmp	r3, #0
 800960e:	d17f      	bne.n	8009710 <_strtod_l+0x8b8>
 8009610:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009614:	0d1b      	lsrs	r3, r3, #20
 8009616:	051b      	lsls	r3, r3, #20
 8009618:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800961c:	d978      	bls.n	8009710 <_strtod_l+0x8b8>
 800961e:	696b      	ldr	r3, [r5, #20]
 8009620:	b913      	cbnz	r3, 8009628 <_strtod_l+0x7d0>
 8009622:	692b      	ldr	r3, [r5, #16]
 8009624:	2b01      	cmp	r3, #1
 8009626:	dd73      	ble.n	8009710 <_strtod_l+0x8b8>
 8009628:	4629      	mov	r1, r5
 800962a:	2201      	movs	r2, #1
 800962c:	4620      	mov	r0, r4
 800962e:	f001 fd9f 	bl	800b170 <__lshift>
 8009632:	4659      	mov	r1, fp
 8009634:	4605      	mov	r5, r0
 8009636:	f001 fe07 	bl	800b248 <__mcmp>
 800963a:	2800      	cmp	r0, #0
 800963c:	dd68      	ble.n	8009710 <_strtod_l+0x8b8>
 800963e:	9904      	ldr	r1, [sp, #16]
 8009640:	4a54      	ldr	r2, [pc, #336]	; (8009794 <_strtod_l+0x93c>)
 8009642:	464b      	mov	r3, r9
 8009644:	2900      	cmp	r1, #0
 8009646:	f000 8084 	beq.w	8009752 <_strtod_l+0x8fa>
 800964a:	ea02 0109 	and.w	r1, r2, r9
 800964e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009652:	dc7e      	bgt.n	8009752 <_strtod_l+0x8fa>
 8009654:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009658:	f77f aeb3 	ble.w	80093c2 <_strtod_l+0x56a>
 800965c:	4b4e      	ldr	r3, [pc, #312]	; (8009798 <_strtod_l+0x940>)
 800965e:	4640      	mov	r0, r8
 8009660:	4649      	mov	r1, r9
 8009662:	2200      	movs	r2, #0
 8009664:	f7f6 ffc8 	bl	80005f8 <__aeabi_dmul>
 8009668:	4b4a      	ldr	r3, [pc, #296]	; (8009794 <_strtod_l+0x93c>)
 800966a:	400b      	ands	r3, r1
 800966c:	4680      	mov	r8, r0
 800966e:	4689      	mov	r9, r1
 8009670:	2b00      	cmp	r3, #0
 8009672:	f47f ae3f 	bne.w	80092f4 <_strtod_l+0x49c>
 8009676:	2322      	movs	r3, #34	; 0x22
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	e63b      	b.n	80092f4 <_strtod_l+0x49c>
 800967c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009680:	fa02 f303 	lsl.w	r3, r2, r3
 8009684:	ea03 0808 	and.w	r8, r3, r8
 8009688:	e6e8      	b.n	800945c <_strtod_l+0x604>
 800968a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800968e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009692:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009696:	36e2      	adds	r6, #226	; 0xe2
 8009698:	fa01 f306 	lsl.w	r3, r1, r6
 800969c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80096a0:	e748      	b.n	8009534 <_strtod_l+0x6dc>
 80096a2:	2100      	movs	r1, #0
 80096a4:	2301      	movs	r3, #1
 80096a6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80096aa:	e743      	b.n	8009534 <_strtod_l+0x6dc>
 80096ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80096ae:	4632      	mov	r2, r6
 80096b0:	4620      	mov	r0, r4
 80096b2:	f001 fd5d 	bl	800b170 <__lshift>
 80096b6:	9016      	str	r0, [sp, #88]	; 0x58
 80096b8:	2800      	cmp	r0, #0
 80096ba:	f47f af6b 	bne.w	8009594 <_strtod_l+0x73c>
 80096be:	e60f      	b.n	80092e0 <_strtod_l+0x488>
 80096c0:	46ca      	mov	sl, r9
 80096c2:	d171      	bne.n	80097a8 <_strtod_l+0x950>
 80096c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096ca:	b352      	cbz	r2, 8009722 <_strtod_l+0x8ca>
 80096cc:	4a33      	ldr	r2, [pc, #204]	; (800979c <_strtod_l+0x944>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d12a      	bne.n	8009728 <_strtod_l+0x8d0>
 80096d2:	9b04      	ldr	r3, [sp, #16]
 80096d4:	4641      	mov	r1, r8
 80096d6:	b1fb      	cbz	r3, 8009718 <_strtod_l+0x8c0>
 80096d8:	4b2e      	ldr	r3, [pc, #184]	; (8009794 <_strtod_l+0x93c>)
 80096da:	ea09 0303 	and.w	r3, r9, r3
 80096de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096e6:	d81a      	bhi.n	800971e <_strtod_l+0x8c6>
 80096e8:	0d1b      	lsrs	r3, r3, #20
 80096ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	4299      	cmp	r1, r3
 80096f4:	d118      	bne.n	8009728 <_strtod_l+0x8d0>
 80096f6:	4b2a      	ldr	r3, [pc, #168]	; (80097a0 <_strtod_l+0x948>)
 80096f8:	459a      	cmp	sl, r3
 80096fa:	d102      	bne.n	8009702 <_strtod_l+0x8aa>
 80096fc:	3101      	adds	r1, #1
 80096fe:	f43f adef 	beq.w	80092e0 <_strtod_l+0x488>
 8009702:	4b24      	ldr	r3, [pc, #144]	; (8009794 <_strtod_l+0x93c>)
 8009704:	ea0a 0303 	and.w	r3, sl, r3
 8009708:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800970c:	f04f 0800 	mov.w	r8, #0
 8009710:	9b04      	ldr	r3, [sp, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1a2      	bne.n	800965c <_strtod_l+0x804>
 8009716:	e5ed      	b.n	80092f4 <_strtod_l+0x49c>
 8009718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800971c:	e7e9      	b.n	80096f2 <_strtod_l+0x89a>
 800971e:	4613      	mov	r3, r2
 8009720:	e7e7      	b.n	80096f2 <_strtod_l+0x89a>
 8009722:	ea53 0308 	orrs.w	r3, r3, r8
 8009726:	d08a      	beq.n	800963e <_strtod_l+0x7e6>
 8009728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800972a:	b1e3      	cbz	r3, 8009766 <_strtod_l+0x90e>
 800972c:	ea13 0f0a 	tst.w	r3, sl
 8009730:	d0ee      	beq.n	8009710 <_strtod_l+0x8b8>
 8009732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009734:	9a04      	ldr	r2, [sp, #16]
 8009736:	4640      	mov	r0, r8
 8009738:	4649      	mov	r1, r9
 800973a:	b1c3      	cbz	r3, 800976e <_strtod_l+0x916>
 800973c:	f7ff fb6e 	bl	8008e1c <sulp>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	ec51 0b18 	vmov	r0, r1, d8
 8009748:	f7f6 fda0 	bl	800028c <__adddf3>
 800974c:	4680      	mov	r8, r0
 800974e:	4689      	mov	r9, r1
 8009750:	e7de      	b.n	8009710 <_strtod_l+0x8b8>
 8009752:	4013      	ands	r3, r2
 8009754:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009758:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800975c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009760:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009764:	e7d4      	b.n	8009710 <_strtod_l+0x8b8>
 8009766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009768:	ea13 0f08 	tst.w	r3, r8
 800976c:	e7e0      	b.n	8009730 <_strtod_l+0x8d8>
 800976e:	f7ff fb55 	bl	8008e1c <sulp>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	ec51 0b18 	vmov	r0, r1, d8
 800977a:	f7f6 fd85 	bl	8000288 <__aeabi_dsub>
 800977e:	2200      	movs	r2, #0
 8009780:	2300      	movs	r3, #0
 8009782:	4680      	mov	r8, r0
 8009784:	4689      	mov	r9, r1
 8009786:	f7f7 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800978a:	2800      	cmp	r0, #0
 800978c:	d0c0      	beq.n	8009710 <_strtod_l+0x8b8>
 800978e:	e618      	b.n	80093c2 <_strtod_l+0x56a>
 8009790:	fffffc02 	.word	0xfffffc02
 8009794:	7ff00000 	.word	0x7ff00000
 8009798:	39500000 	.word	0x39500000
 800979c:	000fffff 	.word	0x000fffff
 80097a0:	7fefffff 	.word	0x7fefffff
 80097a4:	0808a730 	.word	0x0808a730
 80097a8:	4659      	mov	r1, fp
 80097aa:	4628      	mov	r0, r5
 80097ac:	f001 febc 	bl	800b528 <__ratio>
 80097b0:	ec57 6b10 	vmov	r6, r7, d0
 80097b4:	ee10 0a10 	vmov	r0, s0
 80097b8:	2200      	movs	r2, #0
 80097ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097be:	4639      	mov	r1, r7
 80097c0:	f7f7 f996 	bl	8000af0 <__aeabi_dcmple>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d071      	beq.n	80098ac <_strtod_l+0xa54>
 80097c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d17c      	bne.n	80098c8 <_strtod_l+0xa70>
 80097ce:	f1b8 0f00 	cmp.w	r8, #0
 80097d2:	d15a      	bne.n	800988a <_strtod_l+0xa32>
 80097d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d15d      	bne.n	8009898 <_strtod_l+0xa40>
 80097dc:	4b90      	ldr	r3, [pc, #576]	; (8009a20 <_strtod_l+0xbc8>)
 80097de:	2200      	movs	r2, #0
 80097e0:	4630      	mov	r0, r6
 80097e2:	4639      	mov	r1, r7
 80097e4:	f7f7 f97a 	bl	8000adc <__aeabi_dcmplt>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d15c      	bne.n	80098a6 <_strtod_l+0xa4e>
 80097ec:	4630      	mov	r0, r6
 80097ee:	4639      	mov	r1, r7
 80097f0:	4b8c      	ldr	r3, [pc, #560]	; (8009a24 <_strtod_l+0xbcc>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	f7f6 ff00 	bl	80005f8 <__aeabi_dmul>
 80097f8:	4606      	mov	r6, r0
 80097fa:	460f      	mov	r7, r1
 80097fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009800:	9606      	str	r6, [sp, #24]
 8009802:	9307      	str	r3, [sp, #28]
 8009804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009808:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800980c:	4b86      	ldr	r3, [pc, #536]	; (8009a28 <_strtod_l+0xbd0>)
 800980e:	ea0a 0303 	and.w	r3, sl, r3
 8009812:	930d      	str	r3, [sp, #52]	; 0x34
 8009814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009816:	4b85      	ldr	r3, [pc, #532]	; (8009a2c <_strtod_l+0xbd4>)
 8009818:	429a      	cmp	r2, r3
 800981a:	f040 8090 	bne.w	800993e <_strtod_l+0xae6>
 800981e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009822:	ec49 8b10 	vmov	d0, r8, r9
 8009826:	f001 fdb5 	bl	800b394 <__ulp>
 800982a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800982e:	ec51 0b10 	vmov	r0, r1, d0
 8009832:	f7f6 fee1 	bl	80005f8 <__aeabi_dmul>
 8009836:	4642      	mov	r2, r8
 8009838:	464b      	mov	r3, r9
 800983a:	f7f6 fd27 	bl	800028c <__adddf3>
 800983e:	460b      	mov	r3, r1
 8009840:	4979      	ldr	r1, [pc, #484]	; (8009a28 <_strtod_l+0xbd0>)
 8009842:	4a7b      	ldr	r2, [pc, #492]	; (8009a30 <_strtod_l+0xbd8>)
 8009844:	4019      	ands	r1, r3
 8009846:	4291      	cmp	r1, r2
 8009848:	4680      	mov	r8, r0
 800984a:	d944      	bls.n	80098d6 <_strtod_l+0xa7e>
 800984c:	ee18 2a90 	vmov	r2, s17
 8009850:	4b78      	ldr	r3, [pc, #480]	; (8009a34 <_strtod_l+0xbdc>)
 8009852:	429a      	cmp	r2, r3
 8009854:	d104      	bne.n	8009860 <_strtod_l+0xa08>
 8009856:	ee18 3a10 	vmov	r3, s16
 800985a:	3301      	adds	r3, #1
 800985c:	f43f ad40 	beq.w	80092e0 <_strtod_l+0x488>
 8009860:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009a34 <_strtod_l+0xbdc>
 8009864:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009868:	9916      	ldr	r1, [sp, #88]	; 0x58
 800986a:	4620      	mov	r0, r4
 800986c:	f001 fa66 	bl	800ad3c <_Bfree>
 8009870:	9905      	ldr	r1, [sp, #20]
 8009872:	4620      	mov	r0, r4
 8009874:	f001 fa62 	bl	800ad3c <_Bfree>
 8009878:	4659      	mov	r1, fp
 800987a:	4620      	mov	r0, r4
 800987c:	f001 fa5e 	bl	800ad3c <_Bfree>
 8009880:	4629      	mov	r1, r5
 8009882:	4620      	mov	r0, r4
 8009884:	f001 fa5a 	bl	800ad3c <_Bfree>
 8009888:	e609      	b.n	800949e <_strtod_l+0x646>
 800988a:	f1b8 0f01 	cmp.w	r8, #1
 800988e:	d103      	bne.n	8009898 <_strtod_l+0xa40>
 8009890:	f1b9 0f00 	cmp.w	r9, #0
 8009894:	f43f ad95 	beq.w	80093c2 <_strtod_l+0x56a>
 8009898:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80099f0 <_strtod_l+0xb98>
 800989c:	4f60      	ldr	r7, [pc, #384]	; (8009a20 <_strtod_l+0xbc8>)
 800989e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098a2:	2600      	movs	r6, #0
 80098a4:	e7ae      	b.n	8009804 <_strtod_l+0x9ac>
 80098a6:	4f5f      	ldr	r7, [pc, #380]	; (8009a24 <_strtod_l+0xbcc>)
 80098a8:	2600      	movs	r6, #0
 80098aa:	e7a7      	b.n	80097fc <_strtod_l+0x9a4>
 80098ac:	4b5d      	ldr	r3, [pc, #372]	; (8009a24 <_strtod_l+0xbcc>)
 80098ae:	4630      	mov	r0, r6
 80098b0:	4639      	mov	r1, r7
 80098b2:	2200      	movs	r2, #0
 80098b4:	f7f6 fea0 	bl	80005f8 <__aeabi_dmul>
 80098b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ba:	4606      	mov	r6, r0
 80098bc:	460f      	mov	r7, r1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d09c      	beq.n	80097fc <_strtod_l+0x9a4>
 80098c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80098c6:	e79d      	b.n	8009804 <_strtod_l+0x9ac>
 80098c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80099f8 <_strtod_l+0xba0>
 80098cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098d0:	ec57 6b17 	vmov	r6, r7, d7
 80098d4:	e796      	b.n	8009804 <_strtod_l+0x9ac>
 80098d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80098da:	9b04      	ldr	r3, [sp, #16]
 80098dc:	46ca      	mov	sl, r9
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1c2      	bne.n	8009868 <_strtod_l+0xa10>
 80098e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098e8:	0d1b      	lsrs	r3, r3, #20
 80098ea:	051b      	lsls	r3, r3, #20
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d1bb      	bne.n	8009868 <_strtod_l+0xa10>
 80098f0:	4630      	mov	r0, r6
 80098f2:	4639      	mov	r1, r7
 80098f4:	f7f7 f9b8 	bl	8000c68 <__aeabi_d2lz>
 80098f8:	f7f6 fe50 	bl	800059c <__aeabi_l2d>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	f7f6 fcc0 	bl	8000288 <__aeabi_dsub>
 8009908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800990a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800990e:	ea43 0308 	orr.w	r3, r3, r8
 8009912:	4313      	orrs	r3, r2
 8009914:	4606      	mov	r6, r0
 8009916:	460f      	mov	r7, r1
 8009918:	d054      	beq.n	80099c4 <_strtod_l+0xb6c>
 800991a:	a339      	add	r3, pc, #228	; (adr r3, 8009a00 <_strtod_l+0xba8>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f7 f8dc 	bl	8000adc <__aeabi_dcmplt>
 8009924:	2800      	cmp	r0, #0
 8009926:	f47f ace5 	bne.w	80092f4 <_strtod_l+0x49c>
 800992a:	a337      	add	r3, pc, #220	; (adr r3, 8009a08 <_strtod_l+0xbb0>)
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	4630      	mov	r0, r6
 8009932:	4639      	mov	r1, r7
 8009934:	f7f7 f8f0 	bl	8000b18 <__aeabi_dcmpgt>
 8009938:	2800      	cmp	r0, #0
 800993a:	d095      	beq.n	8009868 <_strtod_l+0xa10>
 800993c:	e4da      	b.n	80092f4 <_strtod_l+0x49c>
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	b333      	cbz	r3, 8009990 <_strtod_l+0xb38>
 8009942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009944:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009948:	d822      	bhi.n	8009990 <_strtod_l+0xb38>
 800994a:	a331      	add	r3, pc, #196	; (adr r3, 8009a10 <_strtod_l+0xbb8>)
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	4630      	mov	r0, r6
 8009952:	4639      	mov	r1, r7
 8009954:	f7f7 f8cc 	bl	8000af0 <__aeabi_dcmple>
 8009958:	b1a0      	cbz	r0, 8009984 <_strtod_l+0xb2c>
 800995a:	4639      	mov	r1, r7
 800995c:	4630      	mov	r0, r6
 800995e:	f7f7 f8fb 	bl	8000b58 <__aeabi_d2uiz>
 8009962:	2801      	cmp	r0, #1
 8009964:	bf38      	it	cc
 8009966:	2001      	movcc	r0, #1
 8009968:	f7f6 fdcc 	bl	8000504 <__aeabi_ui2d>
 800996c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800996e:	4606      	mov	r6, r0
 8009970:	460f      	mov	r7, r1
 8009972:	bb23      	cbnz	r3, 80099be <_strtod_l+0xb66>
 8009974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009978:	9010      	str	r0, [sp, #64]	; 0x40
 800997a:	9311      	str	r3, [sp, #68]	; 0x44
 800997c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009980:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009988:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009990:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009994:	eeb0 0a48 	vmov.f32	s0, s16
 8009998:	eef0 0a68 	vmov.f32	s1, s17
 800999c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80099a0:	f001 fcf8 	bl	800b394 <__ulp>
 80099a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80099a8:	ec53 2b10 	vmov	r2, r3, d0
 80099ac:	f7f6 fe24 	bl	80005f8 <__aeabi_dmul>
 80099b0:	ec53 2b18 	vmov	r2, r3, d8
 80099b4:	f7f6 fc6a 	bl	800028c <__adddf3>
 80099b8:	4680      	mov	r8, r0
 80099ba:	4689      	mov	r9, r1
 80099bc:	e78d      	b.n	80098da <_strtod_l+0xa82>
 80099be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80099c2:	e7db      	b.n	800997c <_strtod_l+0xb24>
 80099c4:	a314      	add	r3, pc, #80	; (adr r3, 8009a18 <_strtod_l+0xbc0>)
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	f7f7 f887 	bl	8000adc <__aeabi_dcmplt>
 80099ce:	e7b3      	b.n	8009938 <_strtod_l+0xae0>
 80099d0:	2300      	movs	r3, #0
 80099d2:	930a      	str	r3, [sp, #40]	; 0x28
 80099d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80099d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099d8:	6013      	str	r3, [r2, #0]
 80099da:	f7ff ba7c 	b.w	8008ed6 <_strtod_l+0x7e>
 80099de:	2a65      	cmp	r2, #101	; 0x65
 80099e0:	f43f ab75 	beq.w	80090ce <_strtod_l+0x276>
 80099e4:	2a45      	cmp	r2, #69	; 0x45
 80099e6:	f43f ab72 	beq.w	80090ce <_strtod_l+0x276>
 80099ea:	2301      	movs	r3, #1
 80099ec:	f7ff bbaa 	b.w	8009144 <_strtod_l+0x2ec>
 80099f0:	00000000 	.word	0x00000000
 80099f4:	bff00000 	.word	0xbff00000
 80099f8:	00000000 	.word	0x00000000
 80099fc:	3ff00000 	.word	0x3ff00000
 8009a00:	94a03595 	.word	0x94a03595
 8009a04:	3fdfffff 	.word	0x3fdfffff
 8009a08:	35afe535 	.word	0x35afe535
 8009a0c:	3fe00000 	.word	0x3fe00000
 8009a10:	ffc00000 	.word	0xffc00000
 8009a14:	41dfffff 	.word	0x41dfffff
 8009a18:	94a03595 	.word	0x94a03595
 8009a1c:	3fcfffff 	.word	0x3fcfffff
 8009a20:	3ff00000 	.word	0x3ff00000
 8009a24:	3fe00000 	.word	0x3fe00000
 8009a28:	7ff00000 	.word	0x7ff00000
 8009a2c:	7fe00000 	.word	0x7fe00000
 8009a30:	7c9fffff 	.word	0x7c9fffff
 8009a34:	7fefffff 	.word	0x7fefffff

08009a38 <strtod>:
 8009a38:	460a      	mov	r2, r1
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	4802      	ldr	r0, [pc, #8]	; (8009a48 <strtod+0x10>)
 8009a3e:	4b03      	ldr	r3, [pc, #12]	; (8009a4c <strtod+0x14>)
 8009a40:	6800      	ldr	r0, [r0, #0]
 8009a42:	f7ff ba09 	b.w	8008e58 <_strtod_l>
 8009a46:	bf00      	nop
 8009a48:	200014d4 	.word	0x200014d4
 8009a4c:	2000131c 	.word	0x2000131c

08009a50 <_strtol_l.constprop.0>:
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a56:	d001      	beq.n	8009a5c <_strtol_l.constprop.0+0xc>
 8009a58:	2b24      	cmp	r3, #36	; 0x24
 8009a5a:	d906      	bls.n	8009a6a <_strtol_l.constprop.0+0x1a>
 8009a5c:	f000 f918 	bl	8009c90 <__errno>
 8009a60:	2316      	movs	r3, #22
 8009a62:	6003      	str	r3, [r0, #0]
 8009a64:	2000      	movs	r0, #0
 8009a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b50 <_strtol_l.constprop.0+0x100>
 8009a6e:	460d      	mov	r5, r1
 8009a70:	462e      	mov	r6, r5
 8009a72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a76:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009a7a:	f017 0708 	ands.w	r7, r7, #8
 8009a7e:	d1f7      	bne.n	8009a70 <_strtol_l.constprop.0+0x20>
 8009a80:	2c2d      	cmp	r4, #45	; 0x2d
 8009a82:	d132      	bne.n	8009aea <_strtol_l.constprop.0+0x9a>
 8009a84:	782c      	ldrb	r4, [r5, #0]
 8009a86:	2701      	movs	r7, #1
 8009a88:	1cb5      	adds	r5, r6, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d05b      	beq.n	8009b46 <_strtol_l.constprop.0+0xf6>
 8009a8e:	2b10      	cmp	r3, #16
 8009a90:	d109      	bne.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009a92:	2c30      	cmp	r4, #48	; 0x30
 8009a94:	d107      	bne.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009a96:	782c      	ldrb	r4, [r5, #0]
 8009a98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a9c:	2c58      	cmp	r4, #88	; 0x58
 8009a9e:	d14d      	bne.n	8009b3c <_strtol_l.constprop.0+0xec>
 8009aa0:	786c      	ldrb	r4, [r5, #1]
 8009aa2:	2310      	movs	r3, #16
 8009aa4:	3502      	adds	r5, #2
 8009aa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009aaa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009aae:	f04f 0e00 	mov.w	lr, #0
 8009ab2:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ab6:	4676      	mov	r6, lr
 8009ab8:	fb03 8a19 	mls	sl, r3, r9, r8
 8009abc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009ac0:	f1bc 0f09 	cmp.w	ip, #9
 8009ac4:	d816      	bhi.n	8009af4 <_strtol_l.constprop.0+0xa4>
 8009ac6:	4664      	mov	r4, ip
 8009ac8:	42a3      	cmp	r3, r4
 8009aca:	dd24      	ble.n	8009b16 <_strtol_l.constprop.0+0xc6>
 8009acc:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009ad0:	d008      	beq.n	8009ae4 <_strtol_l.constprop.0+0x94>
 8009ad2:	45b1      	cmp	r9, r6
 8009ad4:	d31c      	bcc.n	8009b10 <_strtol_l.constprop.0+0xc0>
 8009ad6:	d101      	bne.n	8009adc <_strtol_l.constprop.0+0x8c>
 8009ad8:	45a2      	cmp	sl, r4
 8009ada:	db19      	blt.n	8009b10 <_strtol_l.constprop.0+0xc0>
 8009adc:	fb06 4603 	mla	r6, r6, r3, r4
 8009ae0:	f04f 0e01 	mov.w	lr, #1
 8009ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ae8:	e7e8      	b.n	8009abc <_strtol_l.constprop.0+0x6c>
 8009aea:	2c2b      	cmp	r4, #43	; 0x2b
 8009aec:	bf04      	itt	eq
 8009aee:	782c      	ldrbeq	r4, [r5, #0]
 8009af0:	1cb5      	addeq	r5, r6, #2
 8009af2:	e7ca      	b.n	8009a8a <_strtol_l.constprop.0+0x3a>
 8009af4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009af8:	f1bc 0f19 	cmp.w	ip, #25
 8009afc:	d801      	bhi.n	8009b02 <_strtol_l.constprop.0+0xb2>
 8009afe:	3c37      	subs	r4, #55	; 0x37
 8009b00:	e7e2      	b.n	8009ac8 <_strtol_l.constprop.0+0x78>
 8009b02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009b06:	f1bc 0f19 	cmp.w	ip, #25
 8009b0a:	d804      	bhi.n	8009b16 <_strtol_l.constprop.0+0xc6>
 8009b0c:	3c57      	subs	r4, #87	; 0x57
 8009b0e:	e7db      	b.n	8009ac8 <_strtol_l.constprop.0+0x78>
 8009b10:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8009b14:	e7e6      	b.n	8009ae4 <_strtol_l.constprop.0+0x94>
 8009b16:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009b1a:	d105      	bne.n	8009b28 <_strtol_l.constprop.0+0xd8>
 8009b1c:	2322      	movs	r3, #34	; 0x22
 8009b1e:	6003      	str	r3, [r0, #0]
 8009b20:	4646      	mov	r6, r8
 8009b22:	b942      	cbnz	r2, 8009b36 <_strtol_l.constprop.0+0xe6>
 8009b24:	4630      	mov	r0, r6
 8009b26:	e79e      	b.n	8009a66 <_strtol_l.constprop.0+0x16>
 8009b28:	b107      	cbz	r7, 8009b2c <_strtol_l.constprop.0+0xdc>
 8009b2a:	4276      	negs	r6, r6
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	d0f9      	beq.n	8009b24 <_strtol_l.constprop.0+0xd4>
 8009b30:	f1be 0f00 	cmp.w	lr, #0
 8009b34:	d000      	beq.n	8009b38 <_strtol_l.constprop.0+0xe8>
 8009b36:	1e69      	subs	r1, r5, #1
 8009b38:	6011      	str	r1, [r2, #0]
 8009b3a:	e7f3      	b.n	8009b24 <_strtol_l.constprop.0+0xd4>
 8009b3c:	2430      	movs	r4, #48	; 0x30
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1b1      	bne.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009b42:	2308      	movs	r3, #8
 8009b44:	e7af      	b.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009b46:	2c30      	cmp	r4, #48	; 0x30
 8009b48:	d0a5      	beq.n	8009a96 <_strtol_l.constprop.0+0x46>
 8009b4a:	230a      	movs	r3, #10
 8009b4c:	e7ab      	b.n	8009aa6 <_strtol_l.constprop.0+0x56>
 8009b4e:	bf00      	nop
 8009b50:	0808a7d2 	.word	0x0808a7d2

08009b54 <strtol>:
 8009b54:	4613      	mov	r3, r2
 8009b56:	460a      	mov	r2, r1
 8009b58:	4601      	mov	r1, r0
 8009b5a:	4802      	ldr	r0, [pc, #8]	; (8009b64 <strtol+0x10>)
 8009b5c:	6800      	ldr	r0, [r0, #0]
 8009b5e:	f7ff bf77 	b.w	8009a50 <_strtol_l.constprop.0>
 8009b62:	bf00      	nop
 8009b64:	200014d4 	.word	0x200014d4

08009b68 <_fwalk_sglue>:
 8009b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	4688      	mov	r8, r1
 8009b70:	4614      	mov	r4, r2
 8009b72:	2600      	movs	r6, #0
 8009b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b78:	f1b9 0901 	subs.w	r9, r9, #1
 8009b7c:	d505      	bpl.n	8009b8a <_fwalk_sglue+0x22>
 8009b7e:	6824      	ldr	r4, [r4, #0]
 8009b80:	2c00      	cmp	r4, #0
 8009b82:	d1f7      	bne.n	8009b74 <_fwalk_sglue+0xc>
 8009b84:	4630      	mov	r0, r6
 8009b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d907      	bls.n	8009ba0 <_fwalk_sglue+0x38>
 8009b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b94:	3301      	adds	r3, #1
 8009b96:	d003      	beq.n	8009ba0 <_fwalk_sglue+0x38>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c0      	blx	r8
 8009b9e:	4306      	orrs	r6, r0
 8009ba0:	3568      	adds	r5, #104	; 0x68
 8009ba2:	e7e9      	b.n	8009b78 <_fwalk_sglue+0x10>

08009ba4 <strncmp>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	b16a      	cbz	r2, 8009bc4 <strncmp+0x20>
 8009ba8:	3901      	subs	r1, #1
 8009baa:	1884      	adds	r4, r0, r2
 8009bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d103      	bne.n	8009bc0 <strncmp+0x1c>
 8009bb8:	42a0      	cmp	r0, r4
 8009bba:	d001      	beq.n	8009bc0 <strncmp+0x1c>
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	d1f5      	bne.n	8009bac <strncmp+0x8>
 8009bc0:	1ad0      	subs	r0, r2, r3
 8009bc2:	bd10      	pop	{r4, pc}
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	e7fc      	b.n	8009bc2 <strncmp+0x1e>

08009bc8 <strtok>:
 8009bc8:	4b16      	ldr	r3, [pc, #88]	; (8009c24 <strtok+0x5c>)
 8009bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bcc:	681e      	ldr	r6, [r3, #0]
 8009bce:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	b9fc      	cbnz	r4, 8009c14 <strtok+0x4c>
 8009bd4:	2050      	movs	r0, #80	; 0x50
 8009bd6:	9101      	str	r1, [sp, #4]
 8009bd8:	f000 fd6c 	bl	800a6b4 <malloc>
 8009bdc:	9901      	ldr	r1, [sp, #4]
 8009bde:	6470      	str	r0, [r6, #68]	; 0x44
 8009be0:	4602      	mov	r2, r0
 8009be2:	b920      	cbnz	r0, 8009bee <strtok+0x26>
 8009be4:	4b10      	ldr	r3, [pc, #64]	; (8009c28 <strtok+0x60>)
 8009be6:	4811      	ldr	r0, [pc, #68]	; (8009c2c <strtok+0x64>)
 8009be8:	215b      	movs	r1, #91	; 0x5b
 8009bea:	f000 f895 	bl	8009d18 <__assert_func>
 8009bee:	e9c0 4400 	strd	r4, r4, [r0]
 8009bf2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009bf6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009bfa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009bfe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009c02:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009c06:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009c0a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009c0e:	6184      	str	r4, [r0, #24]
 8009c10:	7704      	strb	r4, [r0, #28]
 8009c12:	6244      	str	r4, [r0, #36]	; 0x24
 8009c14:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009c16:	2301      	movs	r3, #1
 8009c18:	4628      	mov	r0, r5
 8009c1a:	b002      	add	sp, #8
 8009c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c20:	f000 b806 	b.w	8009c30 <__strtok_r>
 8009c24:	200014d4 	.word	0x200014d4
 8009c28:	0808a758 	.word	0x0808a758
 8009c2c:	0808a76f 	.word	0x0808a76f

08009c30 <__strtok_r>:
 8009c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c32:	b908      	cbnz	r0, 8009c38 <__strtok_r+0x8>
 8009c34:	6810      	ldr	r0, [r2, #0]
 8009c36:	b188      	cbz	r0, 8009c5c <__strtok_r+0x2c>
 8009c38:	4604      	mov	r4, r0
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c40:	460f      	mov	r7, r1
 8009c42:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c46:	b91e      	cbnz	r6, 8009c50 <__strtok_r+0x20>
 8009c48:	b965      	cbnz	r5, 8009c64 <__strtok_r+0x34>
 8009c4a:	6015      	str	r5, [r2, #0]
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	e005      	b.n	8009c5c <__strtok_r+0x2c>
 8009c50:	42b5      	cmp	r5, r6
 8009c52:	d1f6      	bne.n	8009c42 <__strtok_r+0x12>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1f0      	bne.n	8009c3a <__strtok_r+0xa>
 8009c58:	6014      	str	r4, [r2, #0]
 8009c5a:	7003      	strb	r3, [r0, #0]
 8009c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5e:	461c      	mov	r4, r3
 8009c60:	e00c      	b.n	8009c7c <__strtok_r+0x4c>
 8009c62:	b915      	cbnz	r5, 8009c6a <__strtok_r+0x3a>
 8009c64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c68:	460e      	mov	r6, r1
 8009c6a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009c6e:	42ab      	cmp	r3, r5
 8009c70:	d1f7      	bne.n	8009c62 <__strtok_r+0x32>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0f3      	beq.n	8009c5e <__strtok_r+0x2e>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009c7c:	6014      	str	r4, [r2, #0]
 8009c7e:	e7ed      	b.n	8009c5c <__strtok_r+0x2c>

08009c80 <memset>:
 8009c80:	4402      	add	r2, r0
 8009c82:	4603      	mov	r3, r0
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d100      	bne.n	8009c8a <memset+0xa>
 8009c88:	4770      	bx	lr
 8009c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c8e:	e7f9      	b.n	8009c84 <memset+0x4>

08009c90 <__errno>:
 8009c90:	4b01      	ldr	r3, [pc, #4]	; (8009c98 <__errno+0x8>)
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	200014d4 	.word	0x200014d4

08009c9c <__libc_init_array>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	4d0d      	ldr	r5, [pc, #52]	; (8009cd4 <__libc_init_array+0x38>)
 8009ca0:	4c0d      	ldr	r4, [pc, #52]	; (8009cd8 <__libc_init_array+0x3c>)
 8009ca2:	1b64      	subs	r4, r4, r5
 8009ca4:	10a4      	asrs	r4, r4, #2
 8009ca6:	2600      	movs	r6, #0
 8009ca8:	42a6      	cmp	r6, r4
 8009caa:	d109      	bne.n	8009cc0 <__libc_init_array+0x24>
 8009cac:	4d0b      	ldr	r5, [pc, #44]	; (8009cdc <__libc_init_array+0x40>)
 8009cae:	4c0c      	ldr	r4, [pc, #48]	; (8009ce0 <__libc_init_array+0x44>)
 8009cb0:	f002 fc42 	bl	800c538 <_init>
 8009cb4:	1b64      	subs	r4, r4, r5
 8009cb6:	10a4      	asrs	r4, r4, #2
 8009cb8:	2600      	movs	r6, #0
 8009cba:	42a6      	cmp	r6, r4
 8009cbc:	d105      	bne.n	8009cca <__libc_init_array+0x2e>
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}
 8009cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cc4:	4798      	blx	r3
 8009cc6:	3601      	adds	r6, #1
 8009cc8:	e7ee      	b.n	8009ca8 <__libc_init_array+0xc>
 8009cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cce:	4798      	blx	r3
 8009cd0:	3601      	adds	r6, #1
 8009cd2:	e7f2      	b.n	8009cba <__libc_init_array+0x1e>
 8009cd4:	0808ab88 	.word	0x0808ab88
 8009cd8:	0808ab88 	.word	0x0808ab88
 8009cdc:	0808ab88 	.word	0x0808ab88
 8009ce0:	0808ab8c 	.word	0x0808ab8c

08009ce4 <__retarget_lock_acquire_recursive>:
 8009ce4:	4770      	bx	lr

08009ce6 <__retarget_lock_release_recursive>:
 8009ce6:	4770      	bx	lr

08009ce8 <memcpy>:
 8009ce8:	440a      	add	r2, r1
 8009cea:	4291      	cmp	r1, r2
 8009cec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009cf0:	d100      	bne.n	8009cf4 <memcpy+0xc>
 8009cf2:	4770      	bx	lr
 8009cf4:	b510      	push	{r4, lr}
 8009cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cfe:	4291      	cmp	r1, r2
 8009d00:	d1f9      	bne.n	8009cf6 <memcpy+0xe>
 8009d02:	bd10      	pop	{r4, pc}
 8009d04:	0000      	movs	r0, r0
	...

08009d08 <nan>:
 8009d08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d10 <nan+0x8>
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	00000000 	.word	0x00000000
 8009d14:	7ff80000 	.word	0x7ff80000

08009d18 <__assert_func>:
 8009d18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d1a:	4614      	mov	r4, r2
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <__assert_func+0x2c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4605      	mov	r5, r0
 8009d24:	68d8      	ldr	r0, [r3, #12]
 8009d26:	b14c      	cbz	r4, 8009d3c <__assert_func+0x24>
 8009d28:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <__assert_func+0x30>)
 8009d2a:	9100      	str	r1, [sp, #0]
 8009d2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d30:	4906      	ldr	r1, [pc, #24]	; (8009d4c <__assert_func+0x34>)
 8009d32:	462b      	mov	r3, r5
 8009d34:	f001 fcb2 	bl	800b69c <fiprintf>
 8009d38:	f001 fd6e 	bl	800b818 <abort>
 8009d3c:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <__assert_func+0x38>)
 8009d3e:	461c      	mov	r4, r3
 8009d40:	e7f3      	b.n	8009d2a <__assert_func+0x12>
 8009d42:	bf00      	nop
 8009d44:	200014d4 	.word	0x200014d4
 8009d48:	0808a8d2 	.word	0x0808a8d2
 8009d4c:	0808a8df 	.word	0x0808a8df
 8009d50:	0808a90d 	.word	0x0808a90d

08009d54 <rshift>:
 8009d54:	6903      	ldr	r3, [r0, #16]
 8009d56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009d5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009d62:	f100 0414 	add.w	r4, r0, #20
 8009d66:	dd45      	ble.n	8009df4 <rshift+0xa0>
 8009d68:	f011 011f 	ands.w	r1, r1, #31
 8009d6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009d70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009d74:	d10c      	bne.n	8009d90 <rshift+0x3c>
 8009d76:	f100 0710 	add.w	r7, r0, #16
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	42b1      	cmp	r1, r6
 8009d7e:	d334      	bcc.n	8009dea <rshift+0x96>
 8009d80:	1a9b      	subs	r3, r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	1eea      	subs	r2, r5, #3
 8009d86:	4296      	cmp	r6, r2
 8009d88:	bf38      	it	cc
 8009d8a:	2300      	movcc	r3, #0
 8009d8c:	4423      	add	r3, r4
 8009d8e:	e015      	b.n	8009dbc <rshift+0x68>
 8009d90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009d94:	f1c1 0820 	rsb	r8, r1, #32
 8009d98:	40cf      	lsrs	r7, r1
 8009d9a:	f105 0e04 	add.w	lr, r5, #4
 8009d9e:	46a1      	mov	r9, r4
 8009da0:	4576      	cmp	r6, lr
 8009da2:	46f4      	mov	ip, lr
 8009da4:	d815      	bhi.n	8009dd2 <rshift+0x7e>
 8009da6:	1a9a      	subs	r2, r3, r2
 8009da8:	0092      	lsls	r2, r2, #2
 8009daa:	3a04      	subs	r2, #4
 8009dac:	3501      	adds	r5, #1
 8009dae:	42ae      	cmp	r6, r5
 8009db0:	bf38      	it	cc
 8009db2:	2200      	movcc	r2, #0
 8009db4:	18a3      	adds	r3, r4, r2
 8009db6:	50a7      	str	r7, [r4, r2]
 8009db8:	b107      	cbz	r7, 8009dbc <rshift+0x68>
 8009dba:	3304      	adds	r3, #4
 8009dbc:	1b1a      	subs	r2, r3, r4
 8009dbe:	42a3      	cmp	r3, r4
 8009dc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009dc4:	bf08      	it	eq
 8009dc6:	2300      	moveq	r3, #0
 8009dc8:	6102      	str	r2, [r0, #16]
 8009dca:	bf08      	it	eq
 8009dcc:	6143      	streq	r3, [r0, #20]
 8009dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dd2:	f8dc c000 	ldr.w	ip, [ip]
 8009dd6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009dda:	ea4c 0707 	orr.w	r7, ip, r7
 8009dde:	f849 7b04 	str.w	r7, [r9], #4
 8009de2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009de6:	40cf      	lsrs	r7, r1
 8009de8:	e7da      	b.n	8009da0 <rshift+0x4c>
 8009dea:	f851 cb04 	ldr.w	ip, [r1], #4
 8009dee:	f847 cf04 	str.w	ip, [r7, #4]!
 8009df2:	e7c3      	b.n	8009d7c <rshift+0x28>
 8009df4:	4623      	mov	r3, r4
 8009df6:	e7e1      	b.n	8009dbc <rshift+0x68>

08009df8 <__hexdig_fun>:
 8009df8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009dfc:	2b09      	cmp	r3, #9
 8009dfe:	d802      	bhi.n	8009e06 <__hexdig_fun+0xe>
 8009e00:	3820      	subs	r0, #32
 8009e02:	b2c0      	uxtb	r0, r0
 8009e04:	4770      	bx	lr
 8009e06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e0a:	2b05      	cmp	r3, #5
 8009e0c:	d801      	bhi.n	8009e12 <__hexdig_fun+0x1a>
 8009e0e:	3847      	subs	r0, #71	; 0x47
 8009e10:	e7f7      	b.n	8009e02 <__hexdig_fun+0xa>
 8009e12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e16:	2b05      	cmp	r3, #5
 8009e18:	d801      	bhi.n	8009e1e <__hexdig_fun+0x26>
 8009e1a:	3827      	subs	r0, #39	; 0x27
 8009e1c:	e7f1      	b.n	8009e02 <__hexdig_fun+0xa>
 8009e1e:	2000      	movs	r0, #0
 8009e20:	4770      	bx	lr
	...

08009e24 <__gethex>:
 8009e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	4617      	mov	r7, r2
 8009e2a:	680a      	ldr	r2, [r1, #0]
 8009e2c:	b085      	sub	sp, #20
 8009e2e:	f102 0b02 	add.w	fp, r2, #2
 8009e32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009e3a:	4681      	mov	r9, r0
 8009e3c:	468a      	mov	sl, r1
 8009e3e:	9302      	str	r3, [sp, #8]
 8009e40:	32fe      	adds	r2, #254	; 0xfe
 8009e42:	eb02 030b 	add.w	r3, r2, fp
 8009e46:	46d8      	mov	r8, fp
 8009e48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	2830      	cmp	r0, #48	; 0x30
 8009e50:	d0f7      	beq.n	8009e42 <__gethex+0x1e>
 8009e52:	f7ff ffd1 	bl	8009df8 <__hexdig_fun>
 8009e56:	4604      	mov	r4, r0
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d138      	bne.n	8009ece <__gethex+0xaa>
 8009e5c:	49a7      	ldr	r1, [pc, #668]	; (800a0fc <__gethex+0x2d8>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	4640      	mov	r0, r8
 8009e62:	f7ff fe9f 	bl	8009ba4 <strncmp>
 8009e66:	4606      	mov	r6, r0
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	d169      	bne.n	8009f40 <__gethex+0x11c>
 8009e6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009e70:	465d      	mov	r5, fp
 8009e72:	f7ff ffc1 	bl	8009df8 <__hexdig_fun>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d064      	beq.n	8009f44 <__gethex+0x120>
 8009e7a:	465a      	mov	r2, fp
 8009e7c:	7810      	ldrb	r0, [r2, #0]
 8009e7e:	2830      	cmp	r0, #48	; 0x30
 8009e80:	4690      	mov	r8, r2
 8009e82:	f102 0201 	add.w	r2, r2, #1
 8009e86:	d0f9      	beq.n	8009e7c <__gethex+0x58>
 8009e88:	f7ff ffb6 	bl	8009df8 <__hexdig_fun>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	fab0 f480 	clz	r4, r0
 8009e92:	0964      	lsrs	r4, r4, #5
 8009e94:	465e      	mov	r6, fp
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	4642      	mov	r2, r8
 8009e9a:	4615      	mov	r5, r2
 8009e9c:	3201      	adds	r2, #1
 8009e9e:	7828      	ldrb	r0, [r5, #0]
 8009ea0:	f7ff ffaa 	bl	8009df8 <__hexdig_fun>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d1f8      	bne.n	8009e9a <__gethex+0x76>
 8009ea8:	4994      	ldr	r1, [pc, #592]	; (800a0fc <__gethex+0x2d8>)
 8009eaa:	2201      	movs	r2, #1
 8009eac:	4628      	mov	r0, r5
 8009eae:	f7ff fe79 	bl	8009ba4 <strncmp>
 8009eb2:	b978      	cbnz	r0, 8009ed4 <__gethex+0xb0>
 8009eb4:	b946      	cbnz	r6, 8009ec8 <__gethex+0xa4>
 8009eb6:	1c6e      	adds	r6, r5, #1
 8009eb8:	4632      	mov	r2, r6
 8009eba:	4615      	mov	r5, r2
 8009ebc:	3201      	adds	r2, #1
 8009ebe:	7828      	ldrb	r0, [r5, #0]
 8009ec0:	f7ff ff9a 	bl	8009df8 <__hexdig_fun>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d1f8      	bne.n	8009eba <__gethex+0x96>
 8009ec8:	1b73      	subs	r3, r6, r5
 8009eca:	009e      	lsls	r6, r3, #2
 8009ecc:	e004      	b.n	8009ed8 <__gethex+0xb4>
 8009ece:	2400      	movs	r4, #0
 8009ed0:	4626      	mov	r6, r4
 8009ed2:	e7e1      	b.n	8009e98 <__gethex+0x74>
 8009ed4:	2e00      	cmp	r6, #0
 8009ed6:	d1f7      	bne.n	8009ec8 <__gethex+0xa4>
 8009ed8:	782b      	ldrb	r3, [r5, #0]
 8009eda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ede:	2b50      	cmp	r3, #80	; 0x50
 8009ee0:	d13d      	bne.n	8009f5e <__gethex+0x13a>
 8009ee2:	786b      	ldrb	r3, [r5, #1]
 8009ee4:	2b2b      	cmp	r3, #43	; 0x2b
 8009ee6:	d02f      	beq.n	8009f48 <__gethex+0x124>
 8009ee8:	2b2d      	cmp	r3, #45	; 0x2d
 8009eea:	d031      	beq.n	8009f50 <__gethex+0x12c>
 8009eec:	1c69      	adds	r1, r5, #1
 8009eee:	f04f 0b00 	mov.w	fp, #0
 8009ef2:	7808      	ldrb	r0, [r1, #0]
 8009ef4:	f7ff ff80 	bl	8009df8 <__hexdig_fun>
 8009ef8:	1e42      	subs	r2, r0, #1
 8009efa:	b2d2      	uxtb	r2, r2
 8009efc:	2a18      	cmp	r2, #24
 8009efe:	d82e      	bhi.n	8009f5e <__gethex+0x13a>
 8009f00:	f1a0 0210 	sub.w	r2, r0, #16
 8009f04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f08:	f7ff ff76 	bl	8009df8 <__hexdig_fun>
 8009f0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8009f10:	fa5f fc8c 	uxtb.w	ip, ip
 8009f14:	f1bc 0f18 	cmp.w	ip, #24
 8009f18:	d91d      	bls.n	8009f56 <__gethex+0x132>
 8009f1a:	f1bb 0f00 	cmp.w	fp, #0
 8009f1e:	d000      	beq.n	8009f22 <__gethex+0xfe>
 8009f20:	4252      	negs	r2, r2
 8009f22:	4416      	add	r6, r2
 8009f24:	f8ca 1000 	str.w	r1, [sl]
 8009f28:	b1dc      	cbz	r4, 8009f62 <__gethex+0x13e>
 8009f2a:	9b01      	ldr	r3, [sp, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bf14      	ite	ne
 8009f30:	f04f 0800 	movne.w	r8, #0
 8009f34:	f04f 0806 	moveq.w	r8, #6
 8009f38:	4640      	mov	r0, r8
 8009f3a:	b005      	add	sp, #20
 8009f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f40:	4645      	mov	r5, r8
 8009f42:	4626      	mov	r6, r4
 8009f44:	2401      	movs	r4, #1
 8009f46:	e7c7      	b.n	8009ed8 <__gethex+0xb4>
 8009f48:	f04f 0b00 	mov.w	fp, #0
 8009f4c:	1ca9      	adds	r1, r5, #2
 8009f4e:	e7d0      	b.n	8009ef2 <__gethex+0xce>
 8009f50:	f04f 0b01 	mov.w	fp, #1
 8009f54:	e7fa      	b.n	8009f4c <__gethex+0x128>
 8009f56:	230a      	movs	r3, #10
 8009f58:	fb03 0002 	mla	r0, r3, r2, r0
 8009f5c:	e7d0      	b.n	8009f00 <__gethex+0xdc>
 8009f5e:	4629      	mov	r1, r5
 8009f60:	e7e0      	b.n	8009f24 <__gethex+0x100>
 8009f62:	eba5 0308 	sub.w	r3, r5, r8
 8009f66:	3b01      	subs	r3, #1
 8009f68:	4621      	mov	r1, r4
 8009f6a:	2b07      	cmp	r3, #7
 8009f6c:	dc0a      	bgt.n	8009f84 <__gethex+0x160>
 8009f6e:	4648      	mov	r0, r9
 8009f70:	f000 fea4 	bl	800acbc <_Balloc>
 8009f74:	4604      	mov	r4, r0
 8009f76:	b940      	cbnz	r0, 8009f8a <__gethex+0x166>
 8009f78:	4b61      	ldr	r3, [pc, #388]	; (800a100 <__gethex+0x2dc>)
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	21e4      	movs	r1, #228	; 0xe4
 8009f7e:	4861      	ldr	r0, [pc, #388]	; (800a104 <__gethex+0x2e0>)
 8009f80:	f7ff feca 	bl	8009d18 <__assert_func>
 8009f84:	3101      	adds	r1, #1
 8009f86:	105b      	asrs	r3, r3, #1
 8009f88:	e7ef      	b.n	8009f6a <__gethex+0x146>
 8009f8a:	f100 0a14 	add.w	sl, r0, #20
 8009f8e:	2300      	movs	r3, #0
 8009f90:	495a      	ldr	r1, [pc, #360]	; (800a0fc <__gethex+0x2d8>)
 8009f92:	f8cd a004 	str.w	sl, [sp, #4]
 8009f96:	469b      	mov	fp, r3
 8009f98:	45a8      	cmp	r8, r5
 8009f9a:	d342      	bcc.n	800a022 <__gethex+0x1fe>
 8009f9c:	9801      	ldr	r0, [sp, #4]
 8009f9e:	f840 bb04 	str.w	fp, [r0], #4
 8009fa2:	eba0 000a 	sub.w	r0, r0, sl
 8009fa6:	1080      	asrs	r0, r0, #2
 8009fa8:	6120      	str	r0, [r4, #16]
 8009faa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009fae:	4658      	mov	r0, fp
 8009fb0:	f000 ff76 	bl	800aea0 <__hi0bits>
 8009fb4:	683d      	ldr	r5, [r7, #0]
 8009fb6:	eba8 0000 	sub.w	r0, r8, r0
 8009fba:	42a8      	cmp	r0, r5
 8009fbc:	dd59      	ble.n	800a072 <__gethex+0x24e>
 8009fbe:	eba0 0805 	sub.w	r8, r0, r5
 8009fc2:	4641      	mov	r1, r8
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f001 fb05 	bl	800b5d4 <__any_on>
 8009fca:	4683      	mov	fp, r0
 8009fcc:	b1b8      	cbz	r0, 8009ffe <__gethex+0x1da>
 8009fce:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009fd2:	1159      	asrs	r1, r3, #5
 8009fd4:	f003 021f 	and.w	r2, r3, #31
 8009fd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009fdc:	f04f 0b01 	mov.w	fp, #1
 8009fe0:	fa0b f202 	lsl.w	r2, fp, r2
 8009fe4:	420a      	tst	r2, r1
 8009fe6:	d00a      	beq.n	8009ffe <__gethex+0x1da>
 8009fe8:	455b      	cmp	r3, fp
 8009fea:	dd06      	ble.n	8009ffa <__gethex+0x1d6>
 8009fec:	f1a8 0102 	sub.w	r1, r8, #2
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f001 faef 	bl	800b5d4 <__any_on>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d138      	bne.n	800a06c <__gethex+0x248>
 8009ffa:	f04f 0b02 	mov.w	fp, #2
 8009ffe:	4641      	mov	r1, r8
 800a000:	4620      	mov	r0, r4
 800a002:	f7ff fea7 	bl	8009d54 <rshift>
 800a006:	4446      	add	r6, r8
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	42b3      	cmp	r3, r6
 800a00c:	da41      	bge.n	800a092 <__gethex+0x26e>
 800a00e:	4621      	mov	r1, r4
 800a010:	4648      	mov	r0, r9
 800a012:	f000 fe93 	bl	800ad3c <_Bfree>
 800a016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a018:	2300      	movs	r3, #0
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a020:	e78a      	b.n	8009f38 <__gethex+0x114>
 800a022:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a026:	2a2e      	cmp	r2, #46	; 0x2e
 800a028:	d014      	beq.n	800a054 <__gethex+0x230>
 800a02a:	2b20      	cmp	r3, #32
 800a02c:	d106      	bne.n	800a03c <__gethex+0x218>
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	f843 bb04 	str.w	fp, [r3], #4
 800a034:	f04f 0b00 	mov.w	fp, #0
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	465b      	mov	r3, fp
 800a03c:	7828      	ldrb	r0, [r5, #0]
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	f7ff feda 	bl	8009df8 <__hexdig_fun>
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	f000 000f 	and.w	r0, r0, #15
 800a04a:	4098      	lsls	r0, r3
 800a04c:	ea4b 0b00 	orr.w	fp, fp, r0
 800a050:	3304      	adds	r3, #4
 800a052:	e7a1      	b.n	8009f98 <__gethex+0x174>
 800a054:	45a8      	cmp	r8, r5
 800a056:	d8e8      	bhi.n	800a02a <__gethex+0x206>
 800a058:	2201      	movs	r2, #1
 800a05a:	4628      	mov	r0, r5
 800a05c:	9303      	str	r3, [sp, #12]
 800a05e:	f7ff fda1 	bl	8009ba4 <strncmp>
 800a062:	4926      	ldr	r1, [pc, #152]	; (800a0fc <__gethex+0x2d8>)
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	2800      	cmp	r0, #0
 800a068:	d1df      	bne.n	800a02a <__gethex+0x206>
 800a06a:	e795      	b.n	8009f98 <__gethex+0x174>
 800a06c:	f04f 0b03 	mov.w	fp, #3
 800a070:	e7c5      	b.n	8009ffe <__gethex+0x1da>
 800a072:	da0b      	bge.n	800a08c <__gethex+0x268>
 800a074:	eba5 0800 	sub.w	r8, r5, r0
 800a078:	4621      	mov	r1, r4
 800a07a:	4642      	mov	r2, r8
 800a07c:	4648      	mov	r0, r9
 800a07e:	f001 f877 	bl	800b170 <__lshift>
 800a082:	eba6 0608 	sub.w	r6, r6, r8
 800a086:	4604      	mov	r4, r0
 800a088:	f100 0a14 	add.w	sl, r0, #20
 800a08c:	f04f 0b00 	mov.w	fp, #0
 800a090:	e7ba      	b.n	800a008 <__gethex+0x1e4>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	42b3      	cmp	r3, r6
 800a096:	dd73      	ble.n	800a180 <__gethex+0x35c>
 800a098:	1b9e      	subs	r6, r3, r6
 800a09a:	42b5      	cmp	r5, r6
 800a09c:	dc34      	bgt.n	800a108 <__gethex+0x2e4>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d023      	beq.n	800a0ec <__gethex+0x2c8>
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d025      	beq.n	800a0f4 <__gethex+0x2d0>
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d115      	bne.n	800a0d8 <__gethex+0x2b4>
 800a0ac:	42b5      	cmp	r5, r6
 800a0ae:	d113      	bne.n	800a0d8 <__gethex+0x2b4>
 800a0b0:	2d01      	cmp	r5, #1
 800a0b2:	d10b      	bne.n	800a0cc <__gethex+0x2a8>
 800a0b4:	9a02      	ldr	r2, [sp, #8]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6013      	str	r3, [r2, #0]
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	f8ca 3000 	str.w	r3, [sl]
 800a0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a0c8:	601c      	str	r4, [r3, #0]
 800a0ca:	e735      	b.n	8009f38 <__gethex+0x114>
 800a0cc:	1e69      	subs	r1, r5, #1
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f001 fa80 	bl	800b5d4 <__any_on>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d1ed      	bne.n	800a0b4 <__gethex+0x290>
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4648      	mov	r0, r9
 800a0dc:	f000 fe2e 	bl	800ad3c <_Bfree>
 800a0e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a0ea:	e725      	b.n	8009f38 <__gethex+0x114>
 800a0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1f2      	bne.n	800a0d8 <__gethex+0x2b4>
 800a0f2:	e7df      	b.n	800a0b4 <__gethex+0x290>
 800a0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1dc      	bne.n	800a0b4 <__gethex+0x290>
 800a0fa:	e7ed      	b.n	800a0d8 <__gethex+0x2b4>
 800a0fc:	0808a6f8 	.word	0x0808a6f8
 800a100:	0808a90e 	.word	0x0808a90e
 800a104:	0808a91f 	.word	0x0808a91f
 800a108:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800a10c:	f1bb 0f00 	cmp.w	fp, #0
 800a110:	d133      	bne.n	800a17a <__gethex+0x356>
 800a112:	f1b8 0f00 	cmp.w	r8, #0
 800a116:	d004      	beq.n	800a122 <__gethex+0x2fe>
 800a118:	4641      	mov	r1, r8
 800a11a:	4620      	mov	r0, r4
 800a11c:	f001 fa5a 	bl	800b5d4 <__any_on>
 800a120:	4683      	mov	fp, r0
 800a122:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a126:	2301      	movs	r3, #1
 800a128:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a12c:	f008 081f 	and.w	r8, r8, #31
 800a130:	fa03 f308 	lsl.w	r3, r3, r8
 800a134:	4213      	tst	r3, r2
 800a136:	4631      	mov	r1, r6
 800a138:	4620      	mov	r0, r4
 800a13a:	bf18      	it	ne
 800a13c:	f04b 0b02 	orrne.w	fp, fp, #2
 800a140:	1bad      	subs	r5, r5, r6
 800a142:	f7ff fe07 	bl	8009d54 <rshift>
 800a146:	687e      	ldr	r6, [r7, #4]
 800a148:	f04f 0802 	mov.w	r8, #2
 800a14c:	f1bb 0f00 	cmp.w	fp, #0
 800a150:	d04a      	beq.n	800a1e8 <__gethex+0x3c4>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b02      	cmp	r3, #2
 800a156:	d016      	beq.n	800a186 <__gethex+0x362>
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d018      	beq.n	800a18e <__gethex+0x36a>
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d109      	bne.n	800a174 <__gethex+0x350>
 800a160:	f01b 0f02 	tst.w	fp, #2
 800a164:	d006      	beq.n	800a174 <__gethex+0x350>
 800a166:	f8da 3000 	ldr.w	r3, [sl]
 800a16a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a16e:	f01b 0f01 	tst.w	fp, #1
 800a172:	d10f      	bne.n	800a194 <__gethex+0x370>
 800a174:	f048 0810 	orr.w	r8, r8, #16
 800a178:	e036      	b.n	800a1e8 <__gethex+0x3c4>
 800a17a:	f04f 0b01 	mov.w	fp, #1
 800a17e:	e7d0      	b.n	800a122 <__gethex+0x2fe>
 800a180:	f04f 0801 	mov.w	r8, #1
 800a184:	e7e2      	b.n	800a14c <__gethex+0x328>
 800a186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a188:	f1c3 0301 	rsb	r3, r3, #1
 800a18c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a18e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0ef      	beq.n	800a174 <__gethex+0x350>
 800a194:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a198:	f104 0214 	add.w	r2, r4, #20
 800a19c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	4694      	mov	ip, r2
 800a1aa:	f852 1b04 	ldr.w	r1, [r2], #4
 800a1ae:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800a1b2:	d01e      	beq.n	800a1f2 <__gethex+0x3ce>
 800a1b4:	3101      	adds	r1, #1
 800a1b6:	f8cc 1000 	str.w	r1, [ip]
 800a1ba:	f1b8 0f02 	cmp.w	r8, #2
 800a1be:	f104 0214 	add.w	r2, r4, #20
 800a1c2:	d13d      	bne.n	800a240 <__gethex+0x41c>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	42ab      	cmp	r3, r5
 800a1ca:	d10b      	bne.n	800a1e4 <__gethex+0x3c0>
 800a1cc:	1169      	asrs	r1, r5, #5
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	f005 051f 	and.w	r5, r5, #31
 800a1d4:	fa03 f505 	lsl.w	r5, r3, r5
 800a1d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1dc:	421d      	tst	r5, r3
 800a1de:	bf18      	it	ne
 800a1e0:	f04f 0801 	movne.w	r8, #1
 800a1e4:	f048 0820 	orr.w	r8, r8, #32
 800a1e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1ea:	601c      	str	r4, [r3, #0]
 800a1ec:	9b02      	ldr	r3, [sp, #8]
 800a1ee:	601e      	str	r6, [r3, #0]
 800a1f0:	e6a2      	b.n	8009f38 <__gethex+0x114>
 800a1f2:	4290      	cmp	r0, r2
 800a1f4:	f842 3c04 	str.w	r3, [r2, #-4]
 800a1f8:	d8d6      	bhi.n	800a1a8 <__gethex+0x384>
 800a1fa:	68a2      	ldr	r2, [r4, #8]
 800a1fc:	4593      	cmp	fp, r2
 800a1fe:	db17      	blt.n	800a230 <__gethex+0x40c>
 800a200:	6861      	ldr	r1, [r4, #4]
 800a202:	4648      	mov	r0, r9
 800a204:	3101      	adds	r1, #1
 800a206:	f000 fd59 	bl	800acbc <_Balloc>
 800a20a:	4682      	mov	sl, r0
 800a20c:	b918      	cbnz	r0, 800a216 <__gethex+0x3f2>
 800a20e:	4b1b      	ldr	r3, [pc, #108]	; (800a27c <__gethex+0x458>)
 800a210:	4602      	mov	r2, r0
 800a212:	2184      	movs	r1, #132	; 0x84
 800a214:	e6b3      	b.n	8009f7e <__gethex+0x15a>
 800a216:	6922      	ldr	r2, [r4, #16]
 800a218:	3202      	adds	r2, #2
 800a21a:	f104 010c 	add.w	r1, r4, #12
 800a21e:	0092      	lsls	r2, r2, #2
 800a220:	300c      	adds	r0, #12
 800a222:	f7ff fd61 	bl	8009ce8 <memcpy>
 800a226:	4621      	mov	r1, r4
 800a228:	4648      	mov	r0, r9
 800a22a:	f000 fd87 	bl	800ad3c <_Bfree>
 800a22e:	4654      	mov	r4, sl
 800a230:	6922      	ldr	r2, [r4, #16]
 800a232:	1c51      	adds	r1, r2, #1
 800a234:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a238:	6121      	str	r1, [r4, #16]
 800a23a:	2101      	movs	r1, #1
 800a23c:	6151      	str	r1, [r2, #20]
 800a23e:	e7bc      	b.n	800a1ba <__gethex+0x396>
 800a240:	6921      	ldr	r1, [r4, #16]
 800a242:	4559      	cmp	r1, fp
 800a244:	dd0b      	ble.n	800a25e <__gethex+0x43a>
 800a246:	2101      	movs	r1, #1
 800a248:	4620      	mov	r0, r4
 800a24a:	f7ff fd83 	bl	8009d54 <rshift>
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	3601      	adds	r6, #1
 800a252:	42b3      	cmp	r3, r6
 800a254:	f6ff aedb 	blt.w	800a00e <__gethex+0x1ea>
 800a258:	f04f 0801 	mov.w	r8, #1
 800a25c:	e7c2      	b.n	800a1e4 <__gethex+0x3c0>
 800a25e:	f015 051f 	ands.w	r5, r5, #31
 800a262:	d0f9      	beq.n	800a258 <__gethex+0x434>
 800a264:	9b01      	ldr	r3, [sp, #4]
 800a266:	441a      	add	r2, r3
 800a268:	f1c5 0520 	rsb	r5, r5, #32
 800a26c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a270:	f000 fe16 	bl	800aea0 <__hi0bits>
 800a274:	42a8      	cmp	r0, r5
 800a276:	dbe6      	blt.n	800a246 <__gethex+0x422>
 800a278:	e7ee      	b.n	800a258 <__gethex+0x434>
 800a27a:	bf00      	nop
 800a27c:	0808a90e 	.word	0x0808a90e

0800a280 <L_shift>:
 800a280:	f1c2 0208 	rsb	r2, r2, #8
 800a284:	0092      	lsls	r2, r2, #2
 800a286:	b570      	push	{r4, r5, r6, lr}
 800a288:	f1c2 0620 	rsb	r6, r2, #32
 800a28c:	6843      	ldr	r3, [r0, #4]
 800a28e:	6804      	ldr	r4, [r0, #0]
 800a290:	fa03 f506 	lsl.w	r5, r3, r6
 800a294:	432c      	orrs	r4, r5
 800a296:	40d3      	lsrs	r3, r2
 800a298:	6004      	str	r4, [r0, #0]
 800a29a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a29e:	4288      	cmp	r0, r1
 800a2a0:	d3f4      	bcc.n	800a28c <L_shift+0xc>
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}

0800a2a4 <__match>:
 800a2a4:	b530      	push	{r4, r5, lr}
 800a2a6:	6803      	ldr	r3, [r0, #0]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ae:	b914      	cbnz	r4, 800a2b6 <__match+0x12>
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	bd30      	pop	{r4, r5, pc}
 800a2b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a2be:	2d19      	cmp	r5, #25
 800a2c0:	bf98      	it	ls
 800a2c2:	3220      	addls	r2, #32
 800a2c4:	42a2      	cmp	r2, r4
 800a2c6:	d0f0      	beq.n	800a2aa <__match+0x6>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e7f3      	b.n	800a2b4 <__match+0x10>

0800a2cc <__hexnan>:
 800a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	680b      	ldr	r3, [r1, #0]
 800a2d2:	6801      	ldr	r1, [r0, #0]
 800a2d4:	115e      	asrs	r6, r3, #5
 800a2d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a2da:	f013 031f 	ands.w	r3, r3, #31
 800a2de:	b087      	sub	sp, #28
 800a2e0:	bf18      	it	ne
 800a2e2:	3604      	addne	r6, #4
 800a2e4:	2500      	movs	r5, #0
 800a2e6:	1f37      	subs	r7, r6, #4
 800a2e8:	4682      	mov	sl, r0
 800a2ea:	4690      	mov	r8, r2
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800a2f2:	46b9      	mov	r9, r7
 800a2f4:	463c      	mov	r4, r7
 800a2f6:	9502      	str	r5, [sp, #8]
 800a2f8:	46ab      	mov	fp, r5
 800a2fa:	784a      	ldrb	r2, [r1, #1]
 800a2fc:	1c4b      	adds	r3, r1, #1
 800a2fe:	9303      	str	r3, [sp, #12]
 800a300:	b342      	cbz	r2, 800a354 <__hexnan+0x88>
 800a302:	4610      	mov	r0, r2
 800a304:	9105      	str	r1, [sp, #20]
 800a306:	9204      	str	r2, [sp, #16]
 800a308:	f7ff fd76 	bl	8009df8 <__hexdig_fun>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d14f      	bne.n	800a3b0 <__hexnan+0xe4>
 800a310:	9a04      	ldr	r2, [sp, #16]
 800a312:	9905      	ldr	r1, [sp, #20]
 800a314:	2a20      	cmp	r2, #32
 800a316:	d818      	bhi.n	800a34a <__hexnan+0x7e>
 800a318:	9b02      	ldr	r3, [sp, #8]
 800a31a:	459b      	cmp	fp, r3
 800a31c:	dd13      	ble.n	800a346 <__hexnan+0x7a>
 800a31e:	454c      	cmp	r4, r9
 800a320:	d206      	bcs.n	800a330 <__hexnan+0x64>
 800a322:	2d07      	cmp	r5, #7
 800a324:	dc04      	bgt.n	800a330 <__hexnan+0x64>
 800a326:	462a      	mov	r2, r5
 800a328:	4649      	mov	r1, r9
 800a32a:	4620      	mov	r0, r4
 800a32c:	f7ff ffa8 	bl	800a280 <L_shift>
 800a330:	4544      	cmp	r4, r8
 800a332:	d950      	bls.n	800a3d6 <__hexnan+0x10a>
 800a334:	2300      	movs	r3, #0
 800a336:	f1a4 0904 	sub.w	r9, r4, #4
 800a33a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a33e:	f8cd b008 	str.w	fp, [sp, #8]
 800a342:	464c      	mov	r4, r9
 800a344:	461d      	mov	r5, r3
 800a346:	9903      	ldr	r1, [sp, #12]
 800a348:	e7d7      	b.n	800a2fa <__hexnan+0x2e>
 800a34a:	2a29      	cmp	r2, #41	; 0x29
 800a34c:	d155      	bne.n	800a3fa <__hexnan+0x12e>
 800a34e:	3102      	adds	r1, #2
 800a350:	f8ca 1000 	str.w	r1, [sl]
 800a354:	f1bb 0f00 	cmp.w	fp, #0
 800a358:	d04f      	beq.n	800a3fa <__hexnan+0x12e>
 800a35a:	454c      	cmp	r4, r9
 800a35c:	d206      	bcs.n	800a36c <__hexnan+0xa0>
 800a35e:	2d07      	cmp	r5, #7
 800a360:	dc04      	bgt.n	800a36c <__hexnan+0xa0>
 800a362:	462a      	mov	r2, r5
 800a364:	4649      	mov	r1, r9
 800a366:	4620      	mov	r0, r4
 800a368:	f7ff ff8a 	bl	800a280 <L_shift>
 800a36c:	4544      	cmp	r4, r8
 800a36e:	d934      	bls.n	800a3da <__hexnan+0x10e>
 800a370:	f1a8 0204 	sub.w	r2, r8, #4
 800a374:	4623      	mov	r3, r4
 800a376:	f853 1b04 	ldr.w	r1, [r3], #4
 800a37a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a37e:	429f      	cmp	r7, r3
 800a380:	d2f9      	bcs.n	800a376 <__hexnan+0xaa>
 800a382:	1b3b      	subs	r3, r7, r4
 800a384:	f023 0303 	bic.w	r3, r3, #3
 800a388:	3304      	adds	r3, #4
 800a38a:	3e03      	subs	r6, #3
 800a38c:	3401      	adds	r4, #1
 800a38e:	42a6      	cmp	r6, r4
 800a390:	bf38      	it	cc
 800a392:	2304      	movcc	r3, #4
 800a394:	4443      	add	r3, r8
 800a396:	2200      	movs	r2, #0
 800a398:	f843 2b04 	str.w	r2, [r3], #4
 800a39c:	429f      	cmp	r7, r3
 800a39e:	d2fb      	bcs.n	800a398 <__hexnan+0xcc>
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	b91b      	cbnz	r3, 800a3ac <__hexnan+0xe0>
 800a3a4:	4547      	cmp	r7, r8
 800a3a6:	d126      	bne.n	800a3f6 <__hexnan+0x12a>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	603b      	str	r3, [r7, #0]
 800a3ac:	2005      	movs	r0, #5
 800a3ae:	e025      	b.n	800a3fc <__hexnan+0x130>
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	2d08      	cmp	r5, #8
 800a3b4:	f10b 0b01 	add.w	fp, fp, #1
 800a3b8:	dd06      	ble.n	800a3c8 <__hexnan+0xfc>
 800a3ba:	4544      	cmp	r4, r8
 800a3bc:	d9c3      	bls.n	800a346 <__hexnan+0x7a>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3c4:	2501      	movs	r5, #1
 800a3c6:	3c04      	subs	r4, #4
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	f000 000f 	and.w	r0, r0, #15
 800a3ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a3d2:	6020      	str	r0, [r4, #0]
 800a3d4:	e7b7      	b.n	800a346 <__hexnan+0x7a>
 800a3d6:	2508      	movs	r5, #8
 800a3d8:	e7b5      	b.n	800a346 <__hexnan+0x7a>
 800a3da:	9b01      	ldr	r3, [sp, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0df      	beq.n	800a3a0 <__hexnan+0xd4>
 800a3e0:	f1c3 0320 	rsb	r3, r3, #32
 800a3e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3e8:	40da      	lsrs	r2, r3
 800a3ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a3f4:	e7d4      	b.n	800a3a0 <__hexnan+0xd4>
 800a3f6:	3f04      	subs	r7, #4
 800a3f8:	e7d2      	b.n	800a3a0 <__hexnan+0xd4>
 800a3fa:	2004      	movs	r0, #4
 800a3fc:	b007      	add	sp, #28
 800a3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a402 <__ssputs_r>:
 800a402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a406:	688e      	ldr	r6, [r1, #8]
 800a408:	461f      	mov	r7, r3
 800a40a:	42be      	cmp	r6, r7
 800a40c:	680b      	ldr	r3, [r1, #0]
 800a40e:	4682      	mov	sl, r0
 800a410:	460c      	mov	r4, r1
 800a412:	4690      	mov	r8, r2
 800a414:	d82c      	bhi.n	800a470 <__ssputs_r+0x6e>
 800a416:	898a      	ldrh	r2, [r1, #12]
 800a418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a41c:	d026      	beq.n	800a46c <__ssputs_r+0x6a>
 800a41e:	6965      	ldr	r5, [r4, #20]
 800a420:	6909      	ldr	r1, [r1, #16]
 800a422:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a426:	eba3 0901 	sub.w	r9, r3, r1
 800a42a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a42e:	1c7b      	adds	r3, r7, #1
 800a430:	444b      	add	r3, r9
 800a432:	106d      	asrs	r5, r5, #1
 800a434:	429d      	cmp	r5, r3
 800a436:	bf38      	it	cc
 800a438:	461d      	movcc	r5, r3
 800a43a:	0553      	lsls	r3, r2, #21
 800a43c:	d527      	bpl.n	800a48e <__ssputs_r+0x8c>
 800a43e:	4629      	mov	r1, r5
 800a440:	f000 f960 	bl	800a704 <_malloc_r>
 800a444:	4606      	mov	r6, r0
 800a446:	b360      	cbz	r0, 800a4a2 <__ssputs_r+0xa0>
 800a448:	6921      	ldr	r1, [r4, #16]
 800a44a:	464a      	mov	r2, r9
 800a44c:	f7ff fc4c 	bl	8009ce8 <memcpy>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	6126      	str	r6, [r4, #16]
 800a45e:	6165      	str	r5, [r4, #20]
 800a460:	444e      	add	r6, r9
 800a462:	eba5 0509 	sub.w	r5, r5, r9
 800a466:	6026      	str	r6, [r4, #0]
 800a468:	60a5      	str	r5, [r4, #8]
 800a46a:	463e      	mov	r6, r7
 800a46c:	42be      	cmp	r6, r7
 800a46e:	d900      	bls.n	800a472 <__ssputs_r+0x70>
 800a470:	463e      	mov	r6, r7
 800a472:	6820      	ldr	r0, [r4, #0]
 800a474:	4632      	mov	r2, r6
 800a476:	4641      	mov	r1, r8
 800a478:	f001 f95e 	bl	800b738 <memmove>
 800a47c:	68a3      	ldr	r3, [r4, #8]
 800a47e:	1b9b      	subs	r3, r3, r6
 800a480:	60a3      	str	r3, [r4, #8]
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	4433      	add	r3, r6
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	2000      	movs	r0, #0
 800a48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a48e:	462a      	mov	r2, r5
 800a490:	f001 f916 	bl	800b6c0 <_realloc_r>
 800a494:	4606      	mov	r6, r0
 800a496:	2800      	cmp	r0, #0
 800a498:	d1e0      	bne.n	800a45c <__ssputs_r+0x5a>
 800a49a:	6921      	ldr	r1, [r4, #16]
 800a49c:	4650      	mov	r0, sl
 800a49e:	f001 f9d9 	bl	800b854 <_free_r>
 800a4a2:	230c      	movs	r3, #12
 800a4a4:	f8ca 3000 	str.w	r3, [sl]
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ae:	81a3      	strh	r3, [r4, #12]
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4b4:	e7e9      	b.n	800a48a <__ssputs_r+0x88>
	...

0800a4b8 <_svfiprintf_r>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	4698      	mov	r8, r3
 800a4be:	898b      	ldrh	r3, [r1, #12]
 800a4c0:	061b      	lsls	r3, r3, #24
 800a4c2:	b09d      	sub	sp, #116	; 0x74
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	d50e      	bpl.n	800a4ea <_svfiprintf_r+0x32>
 800a4cc:	690b      	ldr	r3, [r1, #16]
 800a4ce:	b963      	cbnz	r3, 800a4ea <_svfiprintf_r+0x32>
 800a4d0:	2140      	movs	r1, #64	; 0x40
 800a4d2:	f000 f917 	bl	800a704 <_malloc_r>
 800a4d6:	6028      	str	r0, [r5, #0]
 800a4d8:	6128      	str	r0, [r5, #16]
 800a4da:	b920      	cbnz	r0, 800a4e6 <_svfiprintf_r+0x2e>
 800a4dc:	230c      	movs	r3, #12
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4e4:	e0d0      	b.n	800a688 <_svfiprintf_r+0x1d0>
 800a4e6:	2340      	movs	r3, #64	; 0x40
 800a4e8:	616b      	str	r3, [r5, #20]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ee:	2320      	movs	r3, #32
 800a4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4f8:	2330      	movs	r3, #48	; 0x30
 800a4fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a6a0 <_svfiprintf_r+0x1e8>
 800a4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a502:	f04f 0901 	mov.w	r9, #1
 800a506:	4623      	mov	r3, r4
 800a508:	469a      	mov	sl, r3
 800a50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a50e:	b10a      	cbz	r2, 800a514 <_svfiprintf_r+0x5c>
 800a510:	2a25      	cmp	r2, #37	; 0x25
 800a512:	d1f9      	bne.n	800a508 <_svfiprintf_r+0x50>
 800a514:	ebba 0b04 	subs.w	fp, sl, r4
 800a518:	d00b      	beq.n	800a532 <_svfiprintf_r+0x7a>
 800a51a:	465b      	mov	r3, fp
 800a51c:	4622      	mov	r2, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff ff6e 	bl	800a402 <__ssputs_r>
 800a526:	3001      	adds	r0, #1
 800a528:	f000 80a9 	beq.w	800a67e <_svfiprintf_r+0x1c6>
 800a52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a52e:	445a      	add	r2, fp
 800a530:	9209      	str	r2, [sp, #36]	; 0x24
 800a532:	f89a 3000 	ldrb.w	r3, [sl]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 80a1 	beq.w	800a67e <_svfiprintf_r+0x1c6>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a546:	f10a 0a01 	add.w	sl, sl, #1
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	9307      	str	r3, [sp, #28]
 800a54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a552:	931a      	str	r3, [sp, #104]	; 0x68
 800a554:	4654      	mov	r4, sl
 800a556:	2205      	movs	r2, #5
 800a558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55c:	4850      	ldr	r0, [pc, #320]	; (800a6a0 <_svfiprintf_r+0x1e8>)
 800a55e:	f7f5 fe3f 	bl	80001e0 <memchr>
 800a562:	9a04      	ldr	r2, [sp, #16]
 800a564:	b9d8      	cbnz	r0, 800a59e <_svfiprintf_r+0xe6>
 800a566:	06d0      	lsls	r0, r2, #27
 800a568:	bf44      	itt	mi
 800a56a:	2320      	movmi	r3, #32
 800a56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a570:	0711      	lsls	r1, r2, #28
 800a572:	bf44      	itt	mi
 800a574:	232b      	movmi	r3, #43	; 0x2b
 800a576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a57a:	f89a 3000 	ldrb.w	r3, [sl]
 800a57e:	2b2a      	cmp	r3, #42	; 0x2a
 800a580:	d015      	beq.n	800a5ae <_svfiprintf_r+0xf6>
 800a582:	9a07      	ldr	r2, [sp, #28]
 800a584:	4654      	mov	r4, sl
 800a586:	2000      	movs	r0, #0
 800a588:	f04f 0c0a 	mov.w	ip, #10
 800a58c:	4621      	mov	r1, r4
 800a58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a592:	3b30      	subs	r3, #48	; 0x30
 800a594:	2b09      	cmp	r3, #9
 800a596:	d94d      	bls.n	800a634 <_svfiprintf_r+0x17c>
 800a598:	b1b0      	cbz	r0, 800a5c8 <_svfiprintf_r+0x110>
 800a59a:	9207      	str	r2, [sp, #28]
 800a59c:	e014      	b.n	800a5c8 <_svfiprintf_r+0x110>
 800a59e:	eba0 0308 	sub.w	r3, r0, r8
 800a5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	46a2      	mov	sl, r4
 800a5ac:	e7d2      	b.n	800a554 <_svfiprintf_r+0x9c>
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	1d19      	adds	r1, r3, #4
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	9103      	str	r1, [sp, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfbb      	ittet	lt
 800a5ba:	425b      	neglt	r3, r3
 800a5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a5c0:	9307      	strge	r3, [sp, #28]
 800a5c2:	9307      	strlt	r3, [sp, #28]
 800a5c4:	bfb8      	it	lt
 800a5c6:	9204      	strlt	r2, [sp, #16]
 800a5c8:	7823      	ldrb	r3, [r4, #0]
 800a5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a5cc:	d10c      	bne.n	800a5e8 <_svfiprintf_r+0x130>
 800a5ce:	7863      	ldrb	r3, [r4, #1]
 800a5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d2:	d134      	bne.n	800a63e <_svfiprintf_r+0x186>
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	1d1a      	adds	r2, r3, #4
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	9203      	str	r2, [sp, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	bfb8      	it	lt
 800a5e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5e4:	3402      	adds	r4, #2
 800a5e6:	9305      	str	r3, [sp, #20]
 800a5e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a6b0 <_svfiprintf_r+0x1f8>
 800a5ec:	7821      	ldrb	r1, [r4, #0]
 800a5ee:	2203      	movs	r2, #3
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	f7f5 fdf5 	bl	80001e0 <memchr>
 800a5f6:	b138      	cbz	r0, 800a608 <_svfiprintf_r+0x150>
 800a5f8:	9b04      	ldr	r3, [sp, #16]
 800a5fa:	eba0 000a 	sub.w	r0, r0, sl
 800a5fe:	2240      	movs	r2, #64	; 0x40
 800a600:	4082      	lsls	r2, r0
 800a602:	4313      	orrs	r3, r2
 800a604:	3401      	adds	r4, #1
 800a606:	9304      	str	r3, [sp, #16]
 800a608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a60c:	4825      	ldr	r0, [pc, #148]	; (800a6a4 <_svfiprintf_r+0x1ec>)
 800a60e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a612:	2206      	movs	r2, #6
 800a614:	f7f5 fde4 	bl	80001e0 <memchr>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d038      	beq.n	800a68e <_svfiprintf_r+0x1d6>
 800a61c:	4b22      	ldr	r3, [pc, #136]	; (800a6a8 <_svfiprintf_r+0x1f0>)
 800a61e:	bb1b      	cbnz	r3, 800a668 <_svfiprintf_r+0x1b0>
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	3307      	adds	r3, #7
 800a624:	f023 0307 	bic.w	r3, r3, #7
 800a628:	3308      	adds	r3, #8
 800a62a:	9303      	str	r3, [sp, #12]
 800a62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62e:	4433      	add	r3, r6
 800a630:	9309      	str	r3, [sp, #36]	; 0x24
 800a632:	e768      	b.n	800a506 <_svfiprintf_r+0x4e>
 800a634:	fb0c 3202 	mla	r2, ip, r2, r3
 800a638:	460c      	mov	r4, r1
 800a63a:	2001      	movs	r0, #1
 800a63c:	e7a6      	b.n	800a58c <_svfiprintf_r+0xd4>
 800a63e:	2300      	movs	r3, #0
 800a640:	3401      	adds	r4, #1
 800a642:	9305      	str	r3, [sp, #20]
 800a644:	4619      	mov	r1, r3
 800a646:	f04f 0c0a 	mov.w	ip, #10
 800a64a:	4620      	mov	r0, r4
 800a64c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a650:	3a30      	subs	r2, #48	; 0x30
 800a652:	2a09      	cmp	r2, #9
 800a654:	d903      	bls.n	800a65e <_svfiprintf_r+0x1a6>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0c6      	beq.n	800a5e8 <_svfiprintf_r+0x130>
 800a65a:	9105      	str	r1, [sp, #20]
 800a65c:	e7c4      	b.n	800a5e8 <_svfiprintf_r+0x130>
 800a65e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a662:	4604      	mov	r4, r0
 800a664:	2301      	movs	r3, #1
 800a666:	e7f0      	b.n	800a64a <_svfiprintf_r+0x192>
 800a668:	ab03      	add	r3, sp, #12
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	462a      	mov	r2, r5
 800a66e:	4b0f      	ldr	r3, [pc, #60]	; (800a6ac <_svfiprintf_r+0x1f4>)
 800a670:	a904      	add	r1, sp, #16
 800a672:	4638      	mov	r0, r7
 800a674:	f3af 8000 	nop.w
 800a678:	1c42      	adds	r2, r0, #1
 800a67a:	4606      	mov	r6, r0
 800a67c:	d1d6      	bne.n	800a62c <_svfiprintf_r+0x174>
 800a67e:	89ab      	ldrh	r3, [r5, #12]
 800a680:	065b      	lsls	r3, r3, #25
 800a682:	f53f af2d 	bmi.w	800a4e0 <_svfiprintf_r+0x28>
 800a686:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a688:	b01d      	add	sp, #116	; 0x74
 800a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68e:	ab03      	add	r3, sp, #12
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	462a      	mov	r2, r5
 800a694:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <_svfiprintf_r+0x1f4>)
 800a696:	a904      	add	r1, sp, #16
 800a698:	4638      	mov	r0, r7
 800a69a:	f000 f933 	bl	800a904 <_printf_i>
 800a69e:	e7eb      	b.n	800a678 <_svfiprintf_r+0x1c0>
 800a6a0:	0808a97f 	.word	0x0808a97f
 800a6a4:	0808a989 	.word	0x0808a989
 800a6a8:	00000000 	.word	0x00000000
 800a6ac:	0800a403 	.word	0x0800a403
 800a6b0:	0808a985 	.word	0x0808a985

0800a6b4 <malloc>:
 800a6b4:	4b02      	ldr	r3, [pc, #8]	; (800a6c0 <malloc+0xc>)
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	f000 b823 	b.w	800a704 <_malloc_r>
 800a6be:	bf00      	nop
 800a6c0:	200014d4 	.word	0x200014d4

0800a6c4 <sbrk_aligned>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	4e0e      	ldr	r6, [pc, #56]	; (800a700 <sbrk_aligned+0x3c>)
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	6831      	ldr	r1, [r6, #0]
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	b911      	cbnz	r1, 800a6d6 <sbrk_aligned+0x12>
 800a6d0:	f001 f880 	bl	800b7d4 <_sbrk_r>
 800a6d4:	6030      	str	r0, [r6, #0]
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f001 f87b 	bl	800b7d4 <_sbrk_r>
 800a6de:	1c43      	adds	r3, r0, #1
 800a6e0:	d00a      	beq.n	800a6f8 <sbrk_aligned+0x34>
 800a6e2:	1cc4      	adds	r4, r0, #3
 800a6e4:	f024 0403 	bic.w	r4, r4, #3
 800a6e8:	42a0      	cmp	r0, r4
 800a6ea:	d007      	beq.n	800a6fc <sbrk_aligned+0x38>
 800a6ec:	1a21      	subs	r1, r4, r0
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f001 f870 	bl	800b7d4 <_sbrk_r>
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d101      	bne.n	800a6fc <sbrk_aligned+0x38>
 800a6f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}
 800a700:	20001a90 	.word	0x20001a90

0800a704 <_malloc_r>:
 800a704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a708:	1ccd      	adds	r5, r1, #3
 800a70a:	f025 0503 	bic.w	r5, r5, #3
 800a70e:	3508      	adds	r5, #8
 800a710:	2d0c      	cmp	r5, #12
 800a712:	bf38      	it	cc
 800a714:	250c      	movcc	r5, #12
 800a716:	2d00      	cmp	r5, #0
 800a718:	4607      	mov	r7, r0
 800a71a:	db01      	blt.n	800a720 <_malloc_r+0x1c>
 800a71c:	42a9      	cmp	r1, r5
 800a71e:	d905      	bls.n	800a72c <_malloc_r+0x28>
 800a720:	230c      	movs	r3, #12
 800a722:	603b      	str	r3, [r7, #0]
 800a724:	2600      	movs	r6, #0
 800a726:	4630      	mov	r0, r6
 800a728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a72c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a800 <_malloc_r+0xfc>
 800a730:	f000 fab8 	bl	800aca4 <__malloc_lock>
 800a734:	f8d8 3000 	ldr.w	r3, [r8]
 800a738:	461c      	mov	r4, r3
 800a73a:	bb5c      	cbnz	r4, 800a794 <_malloc_r+0x90>
 800a73c:	4629      	mov	r1, r5
 800a73e:	4638      	mov	r0, r7
 800a740:	f7ff ffc0 	bl	800a6c4 <sbrk_aligned>
 800a744:	1c43      	adds	r3, r0, #1
 800a746:	4604      	mov	r4, r0
 800a748:	d155      	bne.n	800a7f6 <_malloc_r+0xf2>
 800a74a:	f8d8 4000 	ldr.w	r4, [r8]
 800a74e:	4626      	mov	r6, r4
 800a750:	2e00      	cmp	r6, #0
 800a752:	d145      	bne.n	800a7e0 <_malloc_r+0xdc>
 800a754:	2c00      	cmp	r4, #0
 800a756:	d048      	beq.n	800a7ea <_malloc_r+0xe6>
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	4631      	mov	r1, r6
 800a75c:	4638      	mov	r0, r7
 800a75e:	eb04 0903 	add.w	r9, r4, r3
 800a762:	f001 f837 	bl	800b7d4 <_sbrk_r>
 800a766:	4581      	cmp	r9, r0
 800a768:	d13f      	bne.n	800a7ea <_malloc_r+0xe6>
 800a76a:	6821      	ldr	r1, [r4, #0]
 800a76c:	1a6d      	subs	r5, r5, r1
 800a76e:	4629      	mov	r1, r5
 800a770:	4638      	mov	r0, r7
 800a772:	f7ff ffa7 	bl	800a6c4 <sbrk_aligned>
 800a776:	3001      	adds	r0, #1
 800a778:	d037      	beq.n	800a7ea <_malloc_r+0xe6>
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	442b      	add	r3, r5
 800a77e:	6023      	str	r3, [r4, #0]
 800a780:	f8d8 3000 	ldr.w	r3, [r8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d038      	beq.n	800a7fa <_malloc_r+0xf6>
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	42a2      	cmp	r2, r4
 800a78c:	d12b      	bne.n	800a7e6 <_malloc_r+0xe2>
 800a78e:	2200      	movs	r2, #0
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	e00f      	b.n	800a7b4 <_malloc_r+0xb0>
 800a794:	6822      	ldr	r2, [r4, #0]
 800a796:	1b52      	subs	r2, r2, r5
 800a798:	d41f      	bmi.n	800a7da <_malloc_r+0xd6>
 800a79a:	2a0b      	cmp	r2, #11
 800a79c:	d917      	bls.n	800a7ce <_malloc_r+0xca>
 800a79e:	1961      	adds	r1, r4, r5
 800a7a0:	42a3      	cmp	r3, r4
 800a7a2:	6025      	str	r5, [r4, #0]
 800a7a4:	bf18      	it	ne
 800a7a6:	6059      	strne	r1, [r3, #4]
 800a7a8:	6863      	ldr	r3, [r4, #4]
 800a7aa:	bf08      	it	eq
 800a7ac:	f8c8 1000 	streq.w	r1, [r8]
 800a7b0:	5162      	str	r2, [r4, r5]
 800a7b2:	604b      	str	r3, [r1, #4]
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	f104 060b 	add.w	r6, r4, #11
 800a7ba:	f000 fa79 	bl	800acb0 <__malloc_unlock>
 800a7be:	f026 0607 	bic.w	r6, r6, #7
 800a7c2:	1d23      	adds	r3, r4, #4
 800a7c4:	1af2      	subs	r2, r6, r3
 800a7c6:	d0ae      	beq.n	800a726 <_malloc_r+0x22>
 800a7c8:	1b9b      	subs	r3, r3, r6
 800a7ca:	50a3      	str	r3, [r4, r2]
 800a7cc:	e7ab      	b.n	800a726 <_malloc_r+0x22>
 800a7ce:	42a3      	cmp	r3, r4
 800a7d0:	6862      	ldr	r2, [r4, #4]
 800a7d2:	d1dd      	bne.n	800a790 <_malloc_r+0x8c>
 800a7d4:	f8c8 2000 	str.w	r2, [r8]
 800a7d8:	e7ec      	b.n	800a7b4 <_malloc_r+0xb0>
 800a7da:	4623      	mov	r3, r4
 800a7dc:	6864      	ldr	r4, [r4, #4]
 800a7de:	e7ac      	b.n	800a73a <_malloc_r+0x36>
 800a7e0:	4634      	mov	r4, r6
 800a7e2:	6876      	ldr	r6, [r6, #4]
 800a7e4:	e7b4      	b.n	800a750 <_malloc_r+0x4c>
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	e7cc      	b.n	800a784 <_malloc_r+0x80>
 800a7ea:	230c      	movs	r3, #12
 800a7ec:	603b      	str	r3, [r7, #0]
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	f000 fa5e 	bl	800acb0 <__malloc_unlock>
 800a7f4:	e797      	b.n	800a726 <_malloc_r+0x22>
 800a7f6:	6025      	str	r5, [r4, #0]
 800a7f8:	e7dc      	b.n	800a7b4 <_malloc_r+0xb0>
 800a7fa:	605b      	str	r3, [r3, #4]
 800a7fc:	deff      	udf	#255	; 0xff
 800a7fe:	bf00      	nop
 800a800:	20001a8c 	.word	0x20001a8c

0800a804 <__ascii_mbtowc>:
 800a804:	b082      	sub	sp, #8
 800a806:	b901      	cbnz	r1, 800a80a <__ascii_mbtowc+0x6>
 800a808:	a901      	add	r1, sp, #4
 800a80a:	b142      	cbz	r2, 800a81e <__ascii_mbtowc+0x1a>
 800a80c:	b14b      	cbz	r3, 800a822 <__ascii_mbtowc+0x1e>
 800a80e:	7813      	ldrb	r3, [r2, #0]
 800a810:	600b      	str	r3, [r1, #0]
 800a812:	7812      	ldrb	r2, [r2, #0]
 800a814:	1e10      	subs	r0, r2, #0
 800a816:	bf18      	it	ne
 800a818:	2001      	movne	r0, #1
 800a81a:	b002      	add	sp, #8
 800a81c:	4770      	bx	lr
 800a81e:	4610      	mov	r0, r2
 800a820:	e7fb      	b.n	800a81a <__ascii_mbtowc+0x16>
 800a822:	f06f 0001 	mvn.w	r0, #1
 800a826:	e7f8      	b.n	800a81a <__ascii_mbtowc+0x16>

0800a828 <_printf_common>:
 800a828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82c:	4616      	mov	r6, r2
 800a82e:	4699      	mov	r9, r3
 800a830:	688a      	ldr	r2, [r1, #8]
 800a832:	690b      	ldr	r3, [r1, #16]
 800a834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a838:	4293      	cmp	r3, r2
 800a83a:	bfb8      	it	lt
 800a83c:	4613      	movlt	r3, r2
 800a83e:	6033      	str	r3, [r6, #0]
 800a840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a844:	4607      	mov	r7, r0
 800a846:	460c      	mov	r4, r1
 800a848:	b10a      	cbz	r2, 800a84e <_printf_common+0x26>
 800a84a:	3301      	adds	r3, #1
 800a84c:	6033      	str	r3, [r6, #0]
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	0699      	lsls	r1, r3, #26
 800a852:	bf42      	ittt	mi
 800a854:	6833      	ldrmi	r3, [r6, #0]
 800a856:	3302      	addmi	r3, #2
 800a858:	6033      	strmi	r3, [r6, #0]
 800a85a:	6825      	ldr	r5, [r4, #0]
 800a85c:	f015 0506 	ands.w	r5, r5, #6
 800a860:	d106      	bne.n	800a870 <_printf_common+0x48>
 800a862:	f104 0a19 	add.w	sl, r4, #25
 800a866:	68e3      	ldr	r3, [r4, #12]
 800a868:	6832      	ldr	r2, [r6, #0]
 800a86a:	1a9b      	subs	r3, r3, r2
 800a86c:	42ab      	cmp	r3, r5
 800a86e:	dc26      	bgt.n	800a8be <_printf_common+0x96>
 800a870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a874:	1e13      	subs	r3, r2, #0
 800a876:	6822      	ldr	r2, [r4, #0]
 800a878:	bf18      	it	ne
 800a87a:	2301      	movne	r3, #1
 800a87c:	0692      	lsls	r2, r2, #26
 800a87e:	d42b      	bmi.n	800a8d8 <_printf_common+0xb0>
 800a880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a884:	4649      	mov	r1, r9
 800a886:	4638      	mov	r0, r7
 800a888:	47c0      	blx	r8
 800a88a:	3001      	adds	r0, #1
 800a88c:	d01e      	beq.n	800a8cc <_printf_common+0xa4>
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	6922      	ldr	r2, [r4, #16]
 800a892:	f003 0306 	and.w	r3, r3, #6
 800a896:	2b04      	cmp	r3, #4
 800a898:	bf02      	ittt	eq
 800a89a:	68e5      	ldreq	r5, [r4, #12]
 800a89c:	6833      	ldreq	r3, [r6, #0]
 800a89e:	1aed      	subeq	r5, r5, r3
 800a8a0:	68a3      	ldr	r3, [r4, #8]
 800a8a2:	bf0c      	ite	eq
 800a8a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8a8:	2500      	movne	r5, #0
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	bfc4      	itt	gt
 800a8ae:	1a9b      	subgt	r3, r3, r2
 800a8b0:	18ed      	addgt	r5, r5, r3
 800a8b2:	2600      	movs	r6, #0
 800a8b4:	341a      	adds	r4, #26
 800a8b6:	42b5      	cmp	r5, r6
 800a8b8:	d11a      	bne.n	800a8f0 <_printf_common+0xc8>
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	e008      	b.n	800a8d0 <_printf_common+0xa8>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4652      	mov	r2, sl
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	47c0      	blx	r8
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d103      	bne.n	800a8d4 <_printf_common+0xac>
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d4:	3501      	adds	r5, #1
 800a8d6:	e7c6      	b.n	800a866 <_printf_common+0x3e>
 800a8d8:	18e1      	adds	r1, r4, r3
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	2030      	movs	r0, #48	; 0x30
 800a8de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8e2:	4422      	add	r2, r4
 800a8e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8ec:	3302      	adds	r3, #2
 800a8ee:	e7c7      	b.n	800a880 <_printf_common+0x58>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	4649      	mov	r1, r9
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	47c0      	blx	r8
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	d0e6      	beq.n	800a8cc <_printf_common+0xa4>
 800a8fe:	3601      	adds	r6, #1
 800a900:	e7d9      	b.n	800a8b6 <_printf_common+0x8e>
	...

0800a904 <_printf_i>:
 800a904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a908:	7e0f      	ldrb	r7, [r1, #24]
 800a90a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a90c:	2f78      	cmp	r7, #120	; 0x78
 800a90e:	4691      	mov	r9, r2
 800a910:	4680      	mov	r8, r0
 800a912:	460c      	mov	r4, r1
 800a914:	469a      	mov	sl, r3
 800a916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a91a:	d807      	bhi.n	800a92c <_printf_i+0x28>
 800a91c:	2f62      	cmp	r7, #98	; 0x62
 800a91e:	d80a      	bhi.n	800a936 <_printf_i+0x32>
 800a920:	2f00      	cmp	r7, #0
 800a922:	f000 80d4 	beq.w	800aace <_printf_i+0x1ca>
 800a926:	2f58      	cmp	r7, #88	; 0x58
 800a928:	f000 80c0 	beq.w	800aaac <_printf_i+0x1a8>
 800a92c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a934:	e03a      	b.n	800a9ac <_printf_i+0xa8>
 800a936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a93a:	2b15      	cmp	r3, #21
 800a93c:	d8f6      	bhi.n	800a92c <_printf_i+0x28>
 800a93e:	a101      	add	r1, pc, #4	; (adr r1, 800a944 <_printf_i+0x40>)
 800a940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a944:	0800a99d 	.word	0x0800a99d
 800a948:	0800a9b1 	.word	0x0800a9b1
 800a94c:	0800a92d 	.word	0x0800a92d
 800a950:	0800a92d 	.word	0x0800a92d
 800a954:	0800a92d 	.word	0x0800a92d
 800a958:	0800a92d 	.word	0x0800a92d
 800a95c:	0800a9b1 	.word	0x0800a9b1
 800a960:	0800a92d 	.word	0x0800a92d
 800a964:	0800a92d 	.word	0x0800a92d
 800a968:	0800a92d 	.word	0x0800a92d
 800a96c:	0800a92d 	.word	0x0800a92d
 800a970:	0800aab5 	.word	0x0800aab5
 800a974:	0800a9dd 	.word	0x0800a9dd
 800a978:	0800aa6f 	.word	0x0800aa6f
 800a97c:	0800a92d 	.word	0x0800a92d
 800a980:	0800a92d 	.word	0x0800a92d
 800a984:	0800aad7 	.word	0x0800aad7
 800a988:	0800a92d 	.word	0x0800a92d
 800a98c:	0800a9dd 	.word	0x0800a9dd
 800a990:	0800a92d 	.word	0x0800a92d
 800a994:	0800a92d 	.word	0x0800a92d
 800a998:	0800aa77 	.word	0x0800aa77
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	1d1a      	adds	r2, r3, #4
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	602a      	str	r2, [r5, #0]
 800a9a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e09f      	b.n	800aaf0 <_printf_i+0x1ec>
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	682b      	ldr	r3, [r5, #0]
 800a9b4:	0607      	lsls	r7, r0, #24
 800a9b6:	f103 0104 	add.w	r1, r3, #4
 800a9ba:	6029      	str	r1, [r5, #0]
 800a9bc:	d501      	bpl.n	800a9c2 <_printf_i+0xbe>
 800a9be:	681e      	ldr	r6, [r3, #0]
 800a9c0:	e003      	b.n	800a9ca <_printf_i+0xc6>
 800a9c2:	0646      	lsls	r6, r0, #25
 800a9c4:	d5fb      	bpl.n	800a9be <_printf_i+0xba>
 800a9c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9ca:	2e00      	cmp	r6, #0
 800a9cc:	da03      	bge.n	800a9d6 <_printf_i+0xd2>
 800a9ce:	232d      	movs	r3, #45	; 0x2d
 800a9d0:	4276      	negs	r6, r6
 800a9d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9d6:	485a      	ldr	r0, [pc, #360]	; (800ab40 <_printf_i+0x23c>)
 800a9d8:	230a      	movs	r3, #10
 800a9da:	e012      	b.n	800aa02 <_printf_i+0xfe>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	6820      	ldr	r0, [r4, #0]
 800a9e0:	1d19      	adds	r1, r3, #4
 800a9e2:	6029      	str	r1, [r5, #0]
 800a9e4:	0605      	lsls	r5, r0, #24
 800a9e6:	d501      	bpl.n	800a9ec <_printf_i+0xe8>
 800a9e8:	681e      	ldr	r6, [r3, #0]
 800a9ea:	e002      	b.n	800a9f2 <_printf_i+0xee>
 800a9ec:	0641      	lsls	r1, r0, #25
 800a9ee:	d5fb      	bpl.n	800a9e8 <_printf_i+0xe4>
 800a9f0:	881e      	ldrh	r6, [r3, #0]
 800a9f2:	4853      	ldr	r0, [pc, #332]	; (800ab40 <_printf_i+0x23c>)
 800a9f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a9f6:	bf0c      	ite	eq
 800a9f8:	2308      	moveq	r3, #8
 800a9fa:	230a      	movne	r3, #10
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa02:	6865      	ldr	r5, [r4, #4]
 800aa04:	60a5      	str	r5, [r4, #8]
 800aa06:	2d00      	cmp	r5, #0
 800aa08:	bfa2      	ittt	ge
 800aa0a:	6821      	ldrge	r1, [r4, #0]
 800aa0c:	f021 0104 	bicge.w	r1, r1, #4
 800aa10:	6021      	strge	r1, [r4, #0]
 800aa12:	b90e      	cbnz	r6, 800aa18 <_printf_i+0x114>
 800aa14:	2d00      	cmp	r5, #0
 800aa16:	d04b      	beq.n	800aab0 <_printf_i+0x1ac>
 800aa18:	4615      	mov	r5, r2
 800aa1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa1e:	fb03 6711 	mls	r7, r3, r1, r6
 800aa22:	5dc7      	ldrb	r7, [r0, r7]
 800aa24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa28:	4637      	mov	r7, r6
 800aa2a:	42bb      	cmp	r3, r7
 800aa2c:	460e      	mov	r6, r1
 800aa2e:	d9f4      	bls.n	800aa1a <_printf_i+0x116>
 800aa30:	2b08      	cmp	r3, #8
 800aa32:	d10b      	bne.n	800aa4c <_printf_i+0x148>
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	07de      	lsls	r6, r3, #31
 800aa38:	d508      	bpl.n	800aa4c <_printf_i+0x148>
 800aa3a:	6923      	ldr	r3, [r4, #16]
 800aa3c:	6861      	ldr	r1, [r4, #4]
 800aa3e:	4299      	cmp	r1, r3
 800aa40:	bfde      	ittt	le
 800aa42:	2330      	movle	r3, #48	; 0x30
 800aa44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa4c:	1b52      	subs	r2, r2, r5
 800aa4e:	6122      	str	r2, [r4, #16]
 800aa50:	f8cd a000 	str.w	sl, [sp]
 800aa54:	464b      	mov	r3, r9
 800aa56:	aa03      	add	r2, sp, #12
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	f7ff fee4 	bl	800a828 <_printf_common>
 800aa60:	3001      	adds	r0, #1
 800aa62:	d14a      	bne.n	800aafa <_printf_i+0x1f6>
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa68:	b004      	add	sp, #16
 800aa6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	f043 0320 	orr.w	r3, r3, #32
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	4833      	ldr	r0, [pc, #204]	; (800ab44 <_printf_i+0x240>)
 800aa78:	2778      	movs	r7, #120	; 0x78
 800aa7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	6829      	ldr	r1, [r5, #0]
 800aa82:	061f      	lsls	r7, r3, #24
 800aa84:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa88:	d402      	bmi.n	800aa90 <_printf_i+0x18c>
 800aa8a:	065f      	lsls	r7, r3, #25
 800aa8c:	bf48      	it	mi
 800aa8e:	b2b6      	uxthmi	r6, r6
 800aa90:	07df      	lsls	r7, r3, #31
 800aa92:	bf48      	it	mi
 800aa94:	f043 0320 	orrmi.w	r3, r3, #32
 800aa98:	6029      	str	r1, [r5, #0]
 800aa9a:	bf48      	it	mi
 800aa9c:	6023      	strmi	r3, [r4, #0]
 800aa9e:	b91e      	cbnz	r6, 800aaa8 <_printf_i+0x1a4>
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	f023 0320 	bic.w	r3, r3, #32
 800aaa6:	6023      	str	r3, [r4, #0]
 800aaa8:	2310      	movs	r3, #16
 800aaaa:	e7a7      	b.n	800a9fc <_printf_i+0xf8>
 800aaac:	4824      	ldr	r0, [pc, #144]	; (800ab40 <_printf_i+0x23c>)
 800aaae:	e7e4      	b.n	800aa7a <_printf_i+0x176>
 800aab0:	4615      	mov	r5, r2
 800aab2:	e7bd      	b.n	800aa30 <_printf_i+0x12c>
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	6826      	ldr	r6, [r4, #0]
 800aab8:	6961      	ldr	r1, [r4, #20]
 800aaba:	1d18      	adds	r0, r3, #4
 800aabc:	6028      	str	r0, [r5, #0]
 800aabe:	0635      	lsls	r5, r6, #24
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	d501      	bpl.n	800aac8 <_printf_i+0x1c4>
 800aac4:	6019      	str	r1, [r3, #0]
 800aac6:	e002      	b.n	800aace <_printf_i+0x1ca>
 800aac8:	0670      	lsls	r0, r6, #25
 800aaca:	d5fb      	bpl.n	800aac4 <_printf_i+0x1c0>
 800aacc:	8019      	strh	r1, [r3, #0]
 800aace:	2300      	movs	r3, #0
 800aad0:	6123      	str	r3, [r4, #16]
 800aad2:	4615      	mov	r5, r2
 800aad4:	e7bc      	b.n	800aa50 <_printf_i+0x14c>
 800aad6:	682b      	ldr	r3, [r5, #0]
 800aad8:	1d1a      	adds	r2, r3, #4
 800aada:	602a      	str	r2, [r5, #0]
 800aadc:	681d      	ldr	r5, [r3, #0]
 800aade:	6862      	ldr	r2, [r4, #4]
 800aae0:	2100      	movs	r1, #0
 800aae2:	4628      	mov	r0, r5
 800aae4:	f7f5 fb7c 	bl	80001e0 <memchr>
 800aae8:	b108      	cbz	r0, 800aaee <_printf_i+0x1ea>
 800aaea:	1b40      	subs	r0, r0, r5
 800aaec:	6060      	str	r0, [r4, #4]
 800aaee:	6863      	ldr	r3, [r4, #4]
 800aaf0:	6123      	str	r3, [r4, #16]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaf8:	e7aa      	b.n	800aa50 <_printf_i+0x14c>
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	462a      	mov	r2, r5
 800aafe:	4649      	mov	r1, r9
 800ab00:	4640      	mov	r0, r8
 800ab02:	47d0      	blx	sl
 800ab04:	3001      	adds	r0, #1
 800ab06:	d0ad      	beq.n	800aa64 <_printf_i+0x160>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	079b      	lsls	r3, r3, #30
 800ab0c:	d413      	bmi.n	800ab36 <_printf_i+0x232>
 800ab0e:	68e0      	ldr	r0, [r4, #12]
 800ab10:	9b03      	ldr	r3, [sp, #12]
 800ab12:	4298      	cmp	r0, r3
 800ab14:	bfb8      	it	lt
 800ab16:	4618      	movlt	r0, r3
 800ab18:	e7a6      	b.n	800aa68 <_printf_i+0x164>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	4649      	mov	r1, r9
 800ab20:	4640      	mov	r0, r8
 800ab22:	47d0      	blx	sl
 800ab24:	3001      	adds	r0, #1
 800ab26:	d09d      	beq.n	800aa64 <_printf_i+0x160>
 800ab28:	3501      	adds	r5, #1
 800ab2a:	68e3      	ldr	r3, [r4, #12]
 800ab2c:	9903      	ldr	r1, [sp, #12]
 800ab2e:	1a5b      	subs	r3, r3, r1
 800ab30:	42ab      	cmp	r3, r5
 800ab32:	dcf2      	bgt.n	800ab1a <_printf_i+0x216>
 800ab34:	e7eb      	b.n	800ab0e <_printf_i+0x20a>
 800ab36:	2500      	movs	r5, #0
 800ab38:	f104 0619 	add.w	r6, r4, #25
 800ab3c:	e7f5      	b.n	800ab2a <_printf_i+0x226>
 800ab3e:	bf00      	nop
 800ab40:	0808a990 	.word	0x0808a990
 800ab44:	0808a9a1 	.word	0x0808a9a1

0800ab48 <__sflush_r>:
 800ab48:	898a      	ldrh	r2, [r1, #12]
 800ab4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4e:	4605      	mov	r5, r0
 800ab50:	0710      	lsls	r0, r2, #28
 800ab52:	460c      	mov	r4, r1
 800ab54:	d458      	bmi.n	800ac08 <__sflush_r+0xc0>
 800ab56:	684b      	ldr	r3, [r1, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	dc05      	bgt.n	800ab68 <__sflush_r+0x20>
 800ab5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dc02      	bgt.n	800ab68 <__sflush_r+0x20>
 800ab62:	2000      	movs	r0, #0
 800ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab6a:	2e00      	cmp	r6, #0
 800ab6c:	d0f9      	beq.n	800ab62 <__sflush_r+0x1a>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab74:	682f      	ldr	r7, [r5, #0]
 800ab76:	6a21      	ldr	r1, [r4, #32]
 800ab78:	602b      	str	r3, [r5, #0]
 800ab7a:	d032      	beq.n	800abe2 <__sflush_r+0x9a>
 800ab7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	075a      	lsls	r2, r3, #29
 800ab82:	d505      	bpl.n	800ab90 <__sflush_r+0x48>
 800ab84:	6863      	ldr	r3, [r4, #4]
 800ab86:	1ac0      	subs	r0, r0, r3
 800ab88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab8a:	b10b      	cbz	r3, 800ab90 <__sflush_r+0x48>
 800ab8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab8e:	1ac0      	subs	r0, r0, r3
 800ab90:	2300      	movs	r3, #0
 800ab92:	4602      	mov	r2, r0
 800ab94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab96:	6a21      	ldr	r1, [r4, #32]
 800ab98:	4628      	mov	r0, r5
 800ab9a:	47b0      	blx	r6
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	d106      	bne.n	800abb0 <__sflush_r+0x68>
 800aba2:	6829      	ldr	r1, [r5, #0]
 800aba4:	291d      	cmp	r1, #29
 800aba6:	d82b      	bhi.n	800ac00 <__sflush_r+0xb8>
 800aba8:	4a29      	ldr	r2, [pc, #164]	; (800ac50 <__sflush_r+0x108>)
 800abaa:	410a      	asrs	r2, r1
 800abac:	07d6      	lsls	r6, r2, #31
 800abae:	d427      	bmi.n	800ac00 <__sflush_r+0xb8>
 800abb0:	2200      	movs	r2, #0
 800abb2:	6062      	str	r2, [r4, #4]
 800abb4:	04d9      	lsls	r1, r3, #19
 800abb6:	6922      	ldr	r2, [r4, #16]
 800abb8:	6022      	str	r2, [r4, #0]
 800abba:	d504      	bpl.n	800abc6 <__sflush_r+0x7e>
 800abbc:	1c42      	adds	r2, r0, #1
 800abbe:	d101      	bne.n	800abc4 <__sflush_r+0x7c>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b903      	cbnz	r3, 800abc6 <__sflush_r+0x7e>
 800abc4:	6560      	str	r0, [r4, #84]	; 0x54
 800abc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abc8:	602f      	str	r7, [r5, #0]
 800abca:	2900      	cmp	r1, #0
 800abcc:	d0c9      	beq.n	800ab62 <__sflush_r+0x1a>
 800abce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd2:	4299      	cmp	r1, r3
 800abd4:	d002      	beq.n	800abdc <__sflush_r+0x94>
 800abd6:	4628      	mov	r0, r5
 800abd8:	f000 fe3c 	bl	800b854 <_free_r>
 800abdc:	2000      	movs	r0, #0
 800abde:	6360      	str	r0, [r4, #52]	; 0x34
 800abe0:	e7c0      	b.n	800ab64 <__sflush_r+0x1c>
 800abe2:	2301      	movs	r3, #1
 800abe4:	4628      	mov	r0, r5
 800abe6:	47b0      	blx	r6
 800abe8:	1c41      	adds	r1, r0, #1
 800abea:	d1c8      	bne.n	800ab7e <__sflush_r+0x36>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d0c5      	beq.n	800ab7e <__sflush_r+0x36>
 800abf2:	2b1d      	cmp	r3, #29
 800abf4:	d001      	beq.n	800abfa <__sflush_r+0xb2>
 800abf6:	2b16      	cmp	r3, #22
 800abf8:	d101      	bne.n	800abfe <__sflush_r+0xb6>
 800abfa:	602f      	str	r7, [r5, #0]
 800abfc:	e7b1      	b.n	800ab62 <__sflush_r+0x1a>
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	e7ad      	b.n	800ab64 <__sflush_r+0x1c>
 800ac08:	690f      	ldr	r7, [r1, #16]
 800ac0a:	2f00      	cmp	r7, #0
 800ac0c:	d0a9      	beq.n	800ab62 <__sflush_r+0x1a>
 800ac0e:	0793      	lsls	r3, r2, #30
 800ac10:	680e      	ldr	r6, [r1, #0]
 800ac12:	bf08      	it	eq
 800ac14:	694b      	ldreq	r3, [r1, #20]
 800ac16:	600f      	str	r7, [r1, #0]
 800ac18:	bf18      	it	ne
 800ac1a:	2300      	movne	r3, #0
 800ac1c:	eba6 0807 	sub.w	r8, r6, r7
 800ac20:	608b      	str	r3, [r1, #8]
 800ac22:	f1b8 0f00 	cmp.w	r8, #0
 800ac26:	dd9c      	ble.n	800ab62 <__sflush_r+0x1a>
 800ac28:	6a21      	ldr	r1, [r4, #32]
 800ac2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac2c:	4643      	mov	r3, r8
 800ac2e:	463a      	mov	r2, r7
 800ac30:	4628      	mov	r0, r5
 800ac32:	47b0      	blx	r6
 800ac34:	2800      	cmp	r0, #0
 800ac36:	dc06      	bgt.n	800ac46 <__sflush_r+0xfe>
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac3e:	81a3      	strh	r3, [r4, #12]
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac44:	e78e      	b.n	800ab64 <__sflush_r+0x1c>
 800ac46:	4407      	add	r7, r0
 800ac48:	eba8 0800 	sub.w	r8, r8, r0
 800ac4c:	e7e9      	b.n	800ac22 <__sflush_r+0xda>
 800ac4e:	bf00      	nop
 800ac50:	dfbffffe 	.word	0xdfbffffe

0800ac54 <_fflush_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	690b      	ldr	r3, [r1, #16]
 800ac58:	4605      	mov	r5, r0
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	b913      	cbnz	r3, 800ac64 <_fflush_r+0x10>
 800ac5e:	2500      	movs	r5, #0
 800ac60:	4628      	mov	r0, r5
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	b118      	cbz	r0, 800ac6e <_fflush_r+0x1a>
 800ac66:	6a03      	ldr	r3, [r0, #32]
 800ac68:	b90b      	cbnz	r3, 800ac6e <_fflush_r+0x1a>
 800ac6a:	f7fe f8bf 	bl	8008dec <__sinit>
 800ac6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0f3      	beq.n	800ac5e <_fflush_r+0xa>
 800ac76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac78:	07d0      	lsls	r0, r2, #31
 800ac7a:	d404      	bmi.n	800ac86 <_fflush_r+0x32>
 800ac7c:	0599      	lsls	r1, r3, #22
 800ac7e:	d402      	bmi.n	800ac86 <_fflush_r+0x32>
 800ac80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac82:	f7ff f82f 	bl	8009ce4 <__retarget_lock_acquire_recursive>
 800ac86:	4628      	mov	r0, r5
 800ac88:	4621      	mov	r1, r4
 800ac8a:	f7ff ff5d 	bl	800ab48 <__sflush_r>
 800ac8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac90:	07da      	lsls	r2, r3, #31
 800ac92:	4605      	mov	r5, r0
 800ac94:	d4e4      	bmi.n	800ac60 <_fflush_r+0xc>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	059b      	lsls	r3, r3, #22
 800ac9a:	d4e1      	bmi.n	800ac60 <_fflush_r+0xc>
 800ac9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac9e:	f7ff f822 	bl	8009ce6 <__retarget_lock_release_recursive>
 800aca2:	e7dd      	b.n	800ac60 <_fflush_r+0xc>

0800aca4 <__malloc_lock>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__malloc_lock+0x8>)
 800aca6:	f7ff b81d 	b.w	8009ce4 <__retarget_lock_acquire_recursive>
 800acaa:	bf00      	nop
 800acac:	20001a88 	.word	0x20001a88

0800acb0 <__malloc_unlock>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__malloc_unlock+0x8>)
 800acb2:	f7ff b818 	b.w	8009ce6 <__retarget_lock_release_recursive>
 800acb6:	bf00      	nop
 800acb8:	20001a88 	.word	0x20001a88

0800acbc <_Balloc>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	69c6      	ldr	r6, [r0, #28]
 800acc0:	4604      	mov	r4, r0
 800acc2:	460d      	mov	r5, r1
 800acc4:	b976      	cbnz	r6, 800ace4 <_Balloc+0x28>
 800acc6:	2010      	movs	r0, #16
 800acc8:	f7ff fcf4 	bl	800a6b4 <malloc>
 800accc:	4602      	mov	r2, r0
 800acce:	61e0      	str	r0, [r4, #28]
 800acd0:	b920      	cbnz	r0, 800acdc <_Balloc+0x20>
 800acd2:	4b18      	ldr	r3, [pc, #96]	; (800ad34 <_Balloc+0x78>)
 800acd4:	4818      	ldr	r0, [pc, #96]	; (800ad38 <_Balloc+0x7c>)
 800acd6:	216b      	movs	r1, #107	; 0x6b
 800acd8:	f7ff f81e 	bl	8009d18 <__assert_func>
 800acdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ace0:	6006      	str	r6, [r0, #0]
 800ace2:	60c6      	str	r6, [r0, #12]
 800ace4:	69e6      	ldr	r6, [r4, #28]
 800ace6:	68f3      	ldr	r3, [r6, #12]
 800ace8:	b183      	cbz	r3, 800ad0c <_Balloc+0x50>
 800acea:	69e3      	ldr	r3, [r4, #28]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acf2:	b9b8      	cbnz	r0, 800ad24 <_Balloc+0x68>
 800acf4:	2101      	movs	r1, #1
 800acf6:	fa01 f605 	lsl.w	r6, r1, r5
 800acfa:	1d72      	adds	r2, r6, #5
 800acfc:	0092      	lsls	r2, r2, #2
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 fd91 	bl	800b826 <_calloc_r>
 800ad04:	b160      	cbz	r0, 800ad20 <_Balloc+0x64>
 800ad06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad0a:	e00e      	b.n	800ad2a <_Balloc+0x6e>
 800ad0c:	2221      	movs	r2, #33	; 0x21
 800ad0e:	2104      	movs	r1, #4
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fd88 	bl	800b826 <_calloc_r>
 800ad16:	69e3      	ldr	r3, [r4, #28]
 800ad18:	60f0      	str	r0, [r6, #12]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1e4      	bne.n	800acea <_Balloc+0x2e>
 800ad20:	2000      	movs	r0, #0
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	6802      	ldr	r2, [r0, #0]
 800ad26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad30:	e7f7      	b.n	800ad22 <_Balloc+0x66>
 800ad32:	bf00      	nop
 800ad34:	0808a758 	.word	0x0808a758
 800ad38:	0808a9b2 	.word	0x0808a9b2

0800ad3c <_Bfree>:
 800ad3c:	b570      	push	{r4, r5, r6, lr}
 800ad3e:	69c6      	ldr	r6, [r0, #28]
 800ad40:	4605      	mov	r5, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	b976      	cbnz	r6, 800ad64 <_Bfree+0x28>
 800ad46:	2010      	movs	r0, #16
 800ad48:	f7ff fcb4 	bl	800a6b4 <malloc>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	61e8      	str	r0, [r5, #28]
 800ad50:	b920      	cbnz	r0, 800ad5c <_Bfree+0x20>
 800ad52:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <_Bfree+0x3c>)
 800ad54:	4809      	ldr	r0, [pc, #36]	; (800ad7c <_Bfree+0x40>)
 800ad56:	218f      	movs	r1, #143	; 0x8f
 800ad58:	f7fe ffde 	bl	8009d18 <__assert_func>
 800ad5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad60:	6006      	str	r6, [r0, #0]
 800ad62:	60c6      	str	r6, [r0, #12]
 800ad64:	b13c      	cbz	r4, 800ad76 <_Bfree+0x3a>
 800ad66:	69eb      	ldr	r3, [r5, #28]
 800ad68:	6862      	ldr	r2, [r4, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad70:	6021      	str	r1, [r4, #0]
 800ad72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad76:	bd70      	pop	{r4, r5, r6, pc}
 800ad78:	0808a758 	.word	0x0808a758
 800ad7c:	0808a9b2 	.word	0x0808a9b2

0800ad80 <__multadd>:
 800ad80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad84:	690d      	ldr	r5, [r1, #16]
 800ad86:	4607      	mov	r7, r0
 800ad88:	460c      	mov	r4, r1
 800ad8a:	461e      	mov	r6, r3
 800ad8c:	f101 0c14 	add.w	ip, r1, #20
 800ad90:	2000      	movs	r0, #0
 800ad92:	f8dc 3000 	ldr.w	r3, [ip]
 800ad96:	b299      	uxth	r1, r3
 800ad98:	fb02 6101 	mla	r1, r2, r1, r6
 800ad9c:	0c1e      	lsrs	r6, r3, #16
 800ad9e:	0c0b      	lsrs	r3, r1, #16
 800ada0:	fb02 3306 	mla	r3, r2, r6, r3
 800ada4:	b289      	uxth	r1, r1
 800ada6:	3001      	adds	r0, #1
 800ada8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800adac:	4285      	cmp	r5, r0
 800adae:	f84c 1b04 	str.w	r1, [ip], #4
 800adb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800adb6:	dcec      	bgt.n	800ad92 <__multadd+0x12>
 800adb8:	b30e      	cbz	r6, 800adfe <__multadd+0x7e>
 800adba:	68a3      	ldr	r3, [r4, #8]
 800adbc:	42ab      	cmp	r3, r5
 800adbe:	dc19      	bgt.n	800adf4 <__multadd+0x74>
 800adc0:	6861      	ldr	r1, [r4, #4]
 800adc2:	4638      	mov	r0, r7
 800adc4:	3101      	adds	r1, #1
 800adc6:	f7ff ff79 	bl	800acbc <_Balloc>
 800adca:	4680      	mov	r8, r0
 800adcc:	b928      	cbnz	r0, 800adda <__multadd+0x5a>
 800adce:	4602      	mov	r2, r0
 800add0:	4b0c      	ldr	r3, [pc, #48]	; (800ae04 <__multadd+0x84>)
 800add2:	480d      	ldr	r0, [pc, #52]	; (800ae08 <__multadd+0x88>)
 800add4:	21ba      	movs	r1, #186	; 0xba
 800add6:	f7fe ff9f 	bl	8009d18 <__assert_func>
 800adda:	6922      	ldr	r2, [r4, #16]
 800addc:	3202      	adds	r2, #2
 800adde:	f104 010c 	add.w	r1, r4, #12
 800ade2:	0092      	lsls	r2, r2, #2
 800ade4:	300c      	adds	r0, #12
 800ade6:	f7fe ff7f 	bl	8009ce8 <memcpy>
 800adea:	4621      	mov	r1, r4
 800adec:	4638      	mov	r0, r7
 800adee:	f7ff ffa5 	bl	800ad3c <_Bfree>
 800adf2:	4644      	mov	r4, r8
 800adf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800adf8:	3501      	adds	r5, #1
 800adfa:	615e      	str	r6, [r3, #20]
 800adfc:	6125      	str	r5, [r4, #16]
 800adfe:	4620      	mov	r0, r4
 800ae00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae04:	0808a90e 	.word	0x0808a90e
 800ae08:	0808a9b2 	.word	0x0808a9b2

0800ae0c <__s2b>:
 800ae0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae10:	460c      	mov	r4, r1
 800ae12:	4615      	mov	r5, r2
 800ae14:	461f      	mov	r7, r3
 800ae16:	2209      	movs	r2, #9
 800ae18:	3308      	adds	r3, #8
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae20:	2100      	movs	r1, #0
 800ae22:	2201      	movs	r2, #1
 800ae24:	429a      	cmp	r2, r3
 800ae26:	db09      	blt.n	800ae3c <__s2b+0x30>
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f7ff ff47 	bl	800acbc <_Balloc>
 800ae2e:	b940      	cbnz	r0, 800ae42 <__s2b+0x36>
 800ae30:	4602      	mov	r2, r0
 800ae32:	4b19      	ldr	r3, [pc, #100]	; (800ae98 <__s2b+0x8c>)
 800ae34:	4819      	ldr	r0, [pc, #100]	; (800ae9c <__s2b+0x90>)
 800ae36:	21d3      	movs	r1, #211	; 0xd3
 800ae38:	f7fe ff6e 	bl	8009d18 <__assert_func>
 800ae3c:	0052      	lsls	r2, r2, #1
 800ae3e:	3101      	adds	r1, #1
 800ae40:	e7f0      	b.n	800ae24 <__s2b+0x18>
 800ae42:	9b08      	ldr	r3, [sp, #32]
 800ae44:	6143      	str	r3, [r0, #20]
 800ae46:	2d09      	cmp	r5, #9
 800ae48:	f04f 0301 	mov.w	r3, #1
 800ae4c:	6103      	str	r3, [r0, #16]
 800ae4e:	dd16      	ble.n	800ae7e <__s2b+0x72>
 800ae50:	f104 0909 	add.w	r9, r4, #9
 800ae54:	46c8      	mov	r8, r9
 800ae56:	442c      	add	r4, r5
 800ae58:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	3b30      	subs	r3, #48	; 0x30
 800ae60:	220a      	movs	r2, #10
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7ff ff8c 	bl	800ad80 <__multadd>
 800ae68:	45a0      	cmp	r8, r4
 800ae6a:	d1f5      	bne.n	800ae58 <__s2b+0x4c>
 800ae6c:	f1a5 0408 	sub.w	r4, r5, #8
 800ae70:	444c      	add	r4, r9
 800ae72:	1b2d      	subs	r5, r5, r4
 800ae74:	1963      	adds	r3, r4, r5
 800ae76:	42bb      	cmp	r3, r7
 800ae78:	db04      	blt.n	800ae84 <__s2b+0x78>
 800ae7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae7e:	340a      	adds	r4, #10
 800ae80:	2509      	movs	r5, #9
 800ae82:	e7f6      	b.n	800ae72 <__s2b+0x66>
 800ae84:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae88:	4601      	mov	r1, r0
 800ae8a:	3b30      	subs	r3, #48	; 0x30
 800ae8c:	220a      	movs	r2, #10
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f7ff ff76 	bl	800ad80 <__multadd>
 800ae94:	e7ee      	b.n	800ae74 <__s2b+0x68>
 800ae96:	bf00      	nop
 800ae98:	0808a90e 	.word	0x0808a90e
 800ae9c:	0808a9b2 	.word	0x0808a9b2

0800aea0 <__hi0bits>:
 800aea0:	0c03      	lsrs	r3, r0, #16
 800aea2:	041b      	lsls	r3, r3, #16
 800aea4:	b9d3      	cbnz	r3, 800aedc <__hi0bits+0x3c>
 800aea6:	0400      	lsls	r0, r0, #16
 800aea8:	2310      	movs	r3, #16
 800aeaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aeae:	bf04      	itt	eq
 800aeb0:	0200      	lsleq	r0, r0, #8
 800aeb2:	3308      	addeq	r3, #8
 800aeb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aeb8:	bf04      	itt	eq
 800aeba:	0100      	lsleq	r0, r0, #4
 800aebc:	3304      	addeq	r3, #4
 800aebe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aec2:	bf04      	itt	eq
 800aec4:	0080      	lsleq	r0, r0, #2
 800aec6:	3302      	addeq	r3, #2
 800aec8:	2800      	cmp	r0, #0
 800aeca:	db05      	blt.n	800aed8 <__hi0bits+0x38>
 800aecc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aed0:	f103 0301 	add.w	r3, r3, #1
 800aed4:	bf08      	it	eq
 800aed6:	2320      	moveq	r3, #32
 800aed8:	4618      	mov	r0, r3
 800aeda:	4770      	bx	lr
 800aedc:	2300      	movs	r3, #0
 800aede:	e7e4      	b.n	800aeaa <__hi0bits+0xa>

0800aee0 <__lo0bits>:
 800aee0:	6803      	ldr	r3, [r0, #0]
 800aee2:	f013 0207 	ands.w	r2, r3, #7
 800aee6:	d00c      	beq.n	800af02 <__lo0bits+0x22>
 800aee8:	07d9      	lsls	r1, r3, #31
 800aeea:	d422      	bmi.n	800af32 <__lo0bits+0x52>
 800aeec:	079a      	lsls	r2, r3, #30
 800aeee:	bf49      	itett	mi
 800aef0:	085b      	lsrmi	r3, r3, #1
 800aef2:	089b      	lsrpl	r3, r3, #2
 800aef4:	6003      	strmi	r3, [r0, #0]
 800aef6:	2201      	movmi	r2, #1
 800aef8:	bf5c      	itt	pl
 800aefa:	6003      	strpl	r3, [r0, #0]
 800aefc:	2202      	movpl	r2, #2
 800aefe:	4610      	mov	r0, r2
 800af00:	4770      	bx	lr
 800af02:	b299      	uxth	r1, r3
 800af04:	b909      	cbnz	r1, 800af0a <__lo0bits+0x2a>
 800af06:	0c1b      	lsrs	r3, r3, #16
 800af08:	2210      	movs	r2, #16
 800af0a:	b2d9      	uxtb	r1, r3
 800af0c:	b909      	cbnz	r1, 800af12 <__lo0bits+0x32>
 800af0e:	3208      	adds	r2, #8
 800af10:	0a1b      	lsrs	r3, r3, #8
 800af12:	0719      	lsls	r1, r3, #28
 800af14:	bf04      	itt	eq
 800af16:	091b      	lsreq	r3, r3, #4
 800af18:	3204      	addeq	r2, #4
 800af1a:	0799      	lsls	r1, r3, #30
 800af1c:	bf04      	itt	eq
 800af1e:	089b      	lsreq	r3, r3, #2
 800af20:	3202      	addeq	r2, #2
 800af22:	07d9      	lsls	r1, r3, #31
 800af24:	d403      	bmi.n	800af2e <__lo0bits+0x4e>
 800af26:	085b      	lsrs	r3, r3, #1
 800af28:	f102 0201 	add.w	r2, r2, #1
 800af2c:	d003      	beq.n	800af36 <__lo0bits+0x56>
 800af2e:	6003      	str	r3, [r0, #0]
 800af30:	e7e5      	b.n	800aefe <__lo0bits+0x1e>
 800af32:	2200      	movs	r2, #0
 800af34:	e7e3      	b.n	800aefe <__lo0bits+0x1e>
 800af36:	2220      	movs	r2, #32
 800af38:	e7e1      	b.n	800aefe <__lo0bits+0x1e>
	...

0800af3c <__i2b>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	460c      	mov	r4, r1
 800af40:	2101      	movs	r1, #1
 800af42:	f7ff febb 	bl	800acbc <_Balloc>
 800af46:	4602      	mov	r2, r0
 800af48:	b928      	cbnz	r0, 800af56 <__i2b+0x1a>
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <__i2b+0x24>)
 800af4c:	4805      	ldr	r0, [pc, #20]	; (800af64 <__i2b+0x28>)
 800af4e:	f240 1145 	movw	r1, #325	; 0x145
 800af52:	f7fe fee1 	bl	8009d18 <__assert_func>
 800af56:	2301      	movs	r3, #1
 800af58:	6144      	str	r4, [r0, #20]
 800af5a:	6103      	str	r3, [r0, #16]
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	bf00      	nop
 800af60:	0808a90e 	.word	0x0808a90e
 800af64:	0808a9b2 	.word	0x0808a9b2

0800af68 <__multiply>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	4691      	mov	r9, r2
 800af6e:	690a      	ldr	r2, [r1, #16]
 800af70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af74:	429a      	cmp	r2, r3
 800af76:	bfb8      	it	lt
 800af78:	460b      	movlt	r3, r1
 800af7a:	460c      	mov	r4, r1
 800af7c:	bfbc      	itt	lt
 800af7e:	464c      	movlt	r4, r9
 800af80:	4699      	movlt	r9, r3
 800af82:	6927      	ldr	r7, [r4, #16]
 800af84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af88:	68a3      	ldr	r3, [r4, #8]
 800af8a:	6861      	ldr	r1, [r4, #4]
 800af8c:	eb07 060a 	add.w	r6, r7, sl
 800af90:	42b3      	cmp	r3, r6
 800af92:	b085      	sub	sp, #20
 800af94:	bfb8      	it	lt
 800af96:	3101      	addlt	r1, #1
 800af98:	f7ff fe90 	bl	800acbc <_Balloc>
 800af9c:	b930      	cbnz	r0, 800afac <__multiply+0x44>
 800af9e:	4602      	mov	r2, r0
 800afa0:	4b44      	ldr	r3, [pc, #272]	; (800b0b4 <__multiply+0x14c>)
 800afa2:	4845      	ldr	r0, [pc, #276]	; (800b0b8 <__multiply+0x150>)
 800afa4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800afa8:	f7fe feb6 	bl	8009d18 <__assert_func>
 800afac:	f100 0514 	add.w	r5, r0, #20
 800afb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800afb4:	462b      	mov	r3, r5
 800afb6:	2200      	movs	r2, #0
 800afb8:	4543      	cmp	r3, r8
 800afba:	d321      	bcc.n	800b000 <__multiply+0x98>
 800afbc:	f104 0314 	add.w	r3, r4, #20
 800afc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800afc4:	f109 0314 	add.w	r3, r9, #20
 800afc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800afcc:	9202      	str	r2, [sp, #8]
 800afce:	1b3a      	subs	r2, r7, r4
 800afd0:	3a15      	subs	r2, #21
 800afd2:	f022 0203 	bic.w	r2, r2, #3
 800afd6:	3204      	adds	r2, #4
 800afd8:	f104 0115 	add.w	r1, r4, #21
 800afdc:	428f      	cmp	r7, r1
 800afde:	bf38      	it	cc
 800afe0:	2204      	movcc	r2, #4
 800afe2:	9201      	str	r2, [sp, #4]
 800afe4:	9a02      	ldr	r2, [sp, #8]
 800afe6:	9303      	str	r3, [sp, #12]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d80c      	bhi.n	800b006 <__multiply+0x9e>
 800afec:	2e00      	cmp	r6, #0
 800afee:	dd03      	ble.n	800aff8 <__multiply+0x90>
 800aff0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d05b      	beq.n	800b0b0 <__multiply+0x148>
 800aff8:	6106      	str	r6, [r0, #16]
 800affa:	b005      	add	sp, #20
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b000:	f843 2b04 	str.w	r2, [r3], #4
 800b004:	e7d8      	b.n	800afb8 <__multiply+0x50>
 800b006:	f8b3 a000 	ldrh.w	sl, [r3]
 800b00a:	f1ba 0f00 	cmp.w	sl, #0
 800b00e:	d024      	beq.n	800b05a <__multiply+0xf2>
 800b010:	f104 0e14 	add.w	lr, r4, #20
 800b014:	46a9      	mov	r9, r5
 800b016:	f04f 0c00 	mov.w	ip, #0
 800b01a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b01e:	f8d9 1000 	ldr.w	r1, [r9]
 800b022:	fa1f fb82 	uxth.w	fp, r2
 800b026:	b289      	uxth	r1, r1
 800b028:	fb0a 110b 	mla	r1, sl, fp, r1
 800b02c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b030:	f8d9 2000 	ldr.w	r2, [r9]
 800b034:	4461      	add	r1, ip
 800b036:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b03a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b03e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b042:	b289      	uxth	r1, r1
 800b044:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b048:	4577      	cmp	r7, lr
 800b04a:	f849 1b04 	str.w	r1, [r9], #4
 800b04e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b052:	d8e2      	bhi.n	800b01a <__multiply+0xb2>
 800b054:	9a01      	ldr	r2, [sp, #4]
 800b056:	f845 c002 	str.w	ip, [r5, r2]
 800b05a:	9a03      	ldr	r2, [sp, #12]
 800b05c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b060:	3304      	adds	r3, #4
 800b062:	f1b9 0f00 	cmp.w	r9, #0
 800b066:	d021      	beq.n	800b0ac <__multiply+0x144>
 800b068:	6829      	ldr	r1, [r5, #0]
 800b06a:	f104 0c14 	add.w	ip, r4, #20
 800b06e:	46ae      	mov	lr, r5
 800b070:	f04f 0a00 	mov.w	sl, #0
 800b074:	f8bc b000 	ldrh.w	fp, [ip]
 800b078:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b07c:	fb09 220b 	mla	r2, r9, fp, r2
 800b080:	4452      	add	r2, sl
 800b082:	b289      	uxth	r1, r1
 800b084:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b088:	f84e 1b04 	str.w	r1, [lr], #4
 800b08c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b090:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b094:	f8be 1000 	ldrh.w	r1, [lr]
 800b098:	fb09 110a 	mla	r1, r9, sl, r1
 800b09c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b0a0:	4567      	cmp	r7, ip
 800b0a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b0a6:	d8e5      	bhi.n	800b074 <__multiply+0x10c>
 800b0a8:	9a01      	ldr	r2, [sp, #4]
 800b0aa:	50a9      	str	r1, [r5, r2]
 800b0ac:	3504      	adds	r5, #4
 800b0ae:	e799      	b.n	800afe4 <__multiply+0x7c>
 800b0b0:	3e01      	subs	r6, #1
 800b0b2:	e79b      	b.n	800afec <__multiply+0x84>
 800b0b4:	0808a90e 	.word	0x0808a90e
 800b0b8:	0808a9b2 	.word	0x0808a9b2

0800b0bc <__pow5mult>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4615      	mov	r5, r2
 800b0c2:	f012 0203 	ands.w	r2, r2, #3
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460f      	mov	r7, r1
 800b0ca:	d007      	beq.n	800b0dc <__pow5mult+0x20>
 800b0cc:	4c25      	ldr	r4, [pc, #148]	; (800b164 <__pow5mult+0xa8>)
 800b0ce:	3a01      	subs	r2, #1
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0d6:	f7ff fe53 	bl	800ad80 <__multadd>
 800b0da:	4607      	mov	r7, r0
 800b0dc:	10ad      	asrs	r5, r5, #2
 800b0de:	d03d      	beq.n	800b15c <__pow5mult+0xa0>
 800b0e0:	69f4      	ldr	r4, [r6, #28]
 800b0e2:	b97c      	cbnz	r4, 800b104 <__pow5mult+0x48>
 800b0e4:	2010      	movs	r0, #16
 800b0e6:	f7ff fae5 	bl	800a6b4 <malloc>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	61f0      	str	r0, [r6, #28]
 800b0ee:	b928      	cbnz	r0, 800b0fc <__pow5mult+0x40>
 800b0f0:	4b1d      	ldr	r3, [pc, #116]	; (800b168 <__pow5mult+0xac>)
 800b0f2:	481e      	ldr	r0, [pc, #120]	; (800b16c <__pow5mult+0xb0>)
 800b0f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b0f8:	f7fe fe0e 	bl	8009d18 <__assert_func>
 800b0fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b100:	6004      	str	r4, [r0, #0]
 800b102:	60c4      	str	r4, [r0, #12]
 800b104:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b10c:	b94c      	cbnz	r4, 800b122 <__pow5mult+0x66>
 800b10e:	f240 2171 	movw	r1, #625	; 0x271
 800b112:	4630      	mov	r0, r6
 800b114:	f7ff ff12 	bl	800af3c <__i2b>
 800b118:	2300      	movs	r3, #0
 800b11a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b11e:	4604      	mov	r4, r0
 800b120:	6003      	str	r3, [r0, #0]
 800b122:	f04f 0900 	mov.w	r9, #0
 800b126:	07eb      	lsls	r3, r5, #31
 800b128:	d50a      	bpl.n	800b140 <__pow5mult+0x84>
 800b12a:	4639      	mov	r1, r7
 800b12c:	4622      	mov	r2, r4
 800b12e:	4630      	mov	r0, r6
 800b130:	f7ff ff1a 	bl	800af68 <__multiply>
 800b134:	4639      	mov	r1, r7
 800b136:	4680      	mov	r8, r0
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff fdff 	bl	800ad3c <_Bfree>
 800b13e:	4647      	mov	r7, r8
 800b140:	106d      	asrs	r5, r5, #1
 800b142:	d00b      	beq.n	800b15c <__pow5mult+0xa0>
 800b144:	6820      	ldr	r0, [r4, #0]
 800b146:	b938      	cbnz	r0, 800b158 <__pow5mult+0x9c>
 800b148:	4622      	mov	r2, r4
 800b14a:	4621      	mov	r1, r4
 800b14c:	4630      	mov	r0, r6
 800b14e:	f7ff ff0b 	bl	800af68 <__multiply>
 800b152:	6020      	str	r0, [r4, #0]
 800b154:	f8c0 9000 	str.w	r9, [r0]
 800b158:	4604      	mov	r4, r0
 800b15a:	e7e4      	b.n	800b126 <__pow5mult+0x6a>
 800b15c:	4638      	mov	r0, r7
 800b15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b162:	bf00      	nop
 800b164:	0808ab00 	.word	0x0808ab00
 800b168:	0808a758 	.word	0x0808a758
 800b16c:	0808a9b2 	.word	0x0808a9b2

0800b170 <__lshift>:
 800b170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b174:	460c      	mov	r4, r1
 800b176:	6849      	ldr	r1, [r1, #4]
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b17e:	68a3      	ldr	r3, [r4, #8]
 800b180:	4607      	mov	r7, r0
 800b182:	4691      	mov	r9, r2
 800b184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b188:	f108 0601 	add.w	r6, r8, #1
 800b18c:	42b3      	cmp	r3, r6
 800b18e:	db0b      	blt.n	800b1a8 <__lshift+0x38>
 800b190:	4638      	mov	r0, r7
 800b192:	f7ff fd93 	bl	800acbc <_Balloc>
 800b196:	4605      	mov	r5, r0
 800b198:	b948      	cbnz	r0, 800b1ae <__lshift+0x3e>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4b28      	ldr	r3, [pc, #160]	; (800b240 <__lshift+0xd0>)
 800b19e:	4829      	ldr	r0, [pc, #164]	; (800b244 <__lshift+0xd4>)
 800b1a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b1a4:	f7fe fdb8 	bl	8009d18 <__assert_func>
 800b1a8:	3101      	adds	r1, #1
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	e7ee      	b.n	800b18c <__lshift+0x1c>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f100 0114 	add.w	r1, r0, #20
 800b1b4:	f100 0210 	add.w	r2, r0, #16
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	4553      	cmp	r3, sl
 800b1bc:	db33      	blt.n	800b226 <__lshift+0xb6>
 800b1be:	6920      	ldr	r0, [r4, #16]
 800b1c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1c4:	f104 0314 	add.w	r3, r4, #20
 800b1c8:	f019 091f 	ands.w	r9, r9, #31
 800b1cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1d4:	d02b      	beq.n	800b22e <__lshift+0xbe>
 800b1d6:	f1c9 0e20 	rsb	lr, r9, #32
 800b1da:	468a      	mov	sl, r1
 800b1dc:	2200      	movs	r2, #0
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	fa00 f009 	lsl.w	r0, r0, r9
 800b1e4:	4310      	orrs	r0, r2
 800b1e6:	f84a 0b04 	str.w	r0, [sl], #4
 800b1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ee:	459c      	cmp	ip, r3
 800b1f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1f4:	d8f3      	bhi.n	800b1de <__lshift+0x6e>
 800b1f6:	ebac 0304 	sub.w	r3, ip, r4
 800b1fa:	3b15      	subs	r3, #21
 800b1fc:	f023 0303 	bic.w	r3, r3, #3
 800b200:	3304      	adds	r3, #4
 800b202:	f104 0015 	add.w	r0, r4, #21
 800b206:	4584      	cmp	ip, r0
 800b208:	bf38      	it	cc
 800b20a:	2304      	movcc	r3, #4
 800b20c:	50ca      	str	r2, [r1, r3]
 800b20e:	b10a      	cbz	r2, 800b214 <__lshift+0xa4>
 800b210:	f108 0602 	add.w	r6, r8, #2
 800b214:	3e01      	subs	r6, #1
 800b216:	4638      	mov	r0, r7
 800b218:	612e      	str	r6, [r5, #16]
 800b21a:	4621      	mov	r1, r4
 800b21c:	f7ff fd8e 	bl	800ad3c <_Bfree>
 800b220:	4628      	mov	r0, r5
 800b222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b226:	f842 0f04 	str.w	r0, [r2, #4]!
 800b22a:	3301      	adds	r3, #1
 800b22c:	e7c5      	b.n	800b1ba <__lshift+0x4a>
 800b22e:	3904      	subs	r1, #4
 800b230:	f853 2b04 	ldr.w	r2, [r3], #4
 800b234:	f841 2f04 	str.w	r2, [r1, #4]!
 800b238:	459c      	cmp	ip, r3
 800b23a:	d8f9      	bhi.n	800b230 <__lshift+0xc0>
 800b23c:	e7ea      	b.n	800b214 <__lshift+0xa4>
 800b23e:	bf00      	nop
 800b240:	0808a90e 	.word	0x0808a90e
 800b244:	0808a9b2 	.word	0x0808a9b2

0800b248 <__mcmp>:
 800b248:	b530      	push	{r4, r5, lr}
 800b24a:	6902      	ldr	r2, [r0, #16]
 800b24c:	690c      	ldr	r4, [r1, #16]
 800b24e:	1b12      	subs	r2, r2, r4
 800b250:	d10e      	bne.n	800b270 <__mcmp+0x28>
 800b252:	f100 0314 	add.w	r3, r0, #20
 800b256:	3114      	adds	r1, #20
 800b258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b25c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b268:	42a5      	cmp	r5, r4
 800b26a:	d003      	beq.n	800b274 <__mcmp+0x2c>
 800b26c:	d305      	bcc.n	800b27a <__mcmp+0x32>
 800b26e:	2201      	movs	r2, #1
 800b270:	4610      	mov	r0, r2
 800b272:	bd30      	pop	{r4, r5, pc}
 800b274:	4283      	cmp	r3, r0
 800b276:	d3f3      	bcc.n	800b260 <__mcmp+0x18>
 800b278:	e7fa      	b.n	800b270 <__mcmp+0x28>
 800b27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b27e:	e7f7      	b.n	800b270 <__mcmp+0x28>

0800b280 <__mdiff>:
 800b280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	460c      	mov	r4, r1
 800b286:	4606      	mov	r6, r0
 800b288:	4611      	mov	r1, r2
 800b28a:	4620      	mov	r0, r4
 800b28c:	4690      	mov	r8, r2
 800b28e:	f7ff ffdb 	bl	800b248 <__mcmp>
 800b292:	1e05      	subs	r5, r0, #0
 800b294:	d110      	bne.n	800b2b8 <__mdiff+0x38>
 800b296:	4629      	mov	r1, r5
 800b298:	4630      	mov	r0, r6
 800b29a:	f7ff fd0f 	bl	800acbc <_Balloc>
 800b29e:	b930      	cbnz	r0, 800b2ae <__mdiff+0x2e>
 800b2a0:	4b3a      	ldr	r3, [pc, #232]	; (800b38c <__mdiff+0x10c>)
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	f240 2137 	movw	r1, #567	; 0x237
 800b2a8:	4839      	ldr	r0, [pc, #228]	; (800b390 <__mdiff+0x110>)
 800b2aa:	f7fe fd35 	bl	8009d18 <__assert_func>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b8:	bfa4      	itt	ge
 800b2ba:	4643      	movge	r3, r8
 800b2bc:	46a0      	movge	r8, r4
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b2c4:	bfa6      	itte	ge
 800b2c6:	461c      	movge	r4, r3
 800b2c8:	2500      	movge	r5, #0
 800b2ca:	2501      	movlt	r5, #1
 800b2cc:	f7ff fcf6 	bl	800acbc <_Balloc>
 800b2d0:	b920      	cbnz	r0, 800b2dc <__mdiff+0x5c>
 800b2d2:	4b2e      	ldr	r3, [pc, #184]	; (800b38c <__mdiff+0x10c>)
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	f240 2145 	movw	r1, #581	; 0x245
 800b2da:	e7e5      	b.n	800b2a8 <__mdiff+0x28>
 800b2dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2e0:	6926      	ldr	r6, [r4, #16]
 800b2e2:	60c5      	str	r5, [r0, #12]
 800b2e4:	f104 0914 	add.w	r9, r4, #20
 800b2e8:	f108 0514 	add.w	r5, r8, #20
 800b2ec:	f100 0e14 	add.w	lr, r0, #20
 800b2f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b2f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2f8:	f108 0210 	add.w	r2, r8, #16
 800b2fc:	46f2      	mov	sl, lr
 800b2fe:	2100      	movs	r1, #0
 800b300:	f859 3b04 	ldr.w	r3, [r9], #4
 800b304:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b308:	fa11 f88b 	uxtah	r8, r1, fp
 800b30c:	b299      	uxth	r1, r3
 800b30e:	0c1b      	lsrs	r3, r3, #16
 800b310:	eba8 0801 	sub.w	r8, r8, r1
 800b314:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b318:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b31c:	fa1f f888 	uxth.w	r8, r8
 800b320:	1419      	asrs	r1, r3, #16
 800b322:	454e      	cmp	r6, r9
 800b324:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b328:	f84a 3b04 	str.w	r3, [sl], #4
 800b32c:	d8e8      	bhi.n	800b300 <__mdiff+0x80>
 800b32e:	1b33      	subs	r3, r6, r4
 800b330:	3b15      	subs	r3, #21
 800b332:	f023 0303 	bic.w	r3, r3, #3
 800b336:	3304      	adds	r3, #4
 800b338:	3415      	adds	r4, #21
 800b33a:	42a6      	cmp	r6, r4
 800b33c:	bf38      	it	cc
 800b33e:	2304      	movcc	r3, #4
 800b340:	441d      	add	r5, r3
 800b342:	4473      	add	r3, lr
 800b344:	469e      	mov	lr, r3
 800b346:	462e      	mov	r6, r5
 800b348:	4566      	cmp	r6, ip
 800b34a:	d30e      	bcc.n	800b36a <__mdiff+0xea>
 800b34c:	f10c 0203 	add.w	r2, ip, #3
 800b350:	1b52      	subs	r2, r2, r5
 800b352:	f022 0203 	bic.w	r2, r2, #3
 800b356:	3d03      	subs	r5, #3
 800b358:	45ac      	cmp	ip, r5
 800b35a:	bf38      	it	cc
 800b35c:	2200      	movcc	r2, #0
 800b35e:	4413      	add	r3, r2
 800b360:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b364:	b17a      	cbz	r2, 800b386 <__mdiff+0x106>
 800b366:	6107      	str	r7, [r0, #16]
 800b368:	e7a4      	b.n	800b2b4 <__mdiff+0x34>
 800b36a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b36e:	fa11 f288 	uxtah	r2, r1, r8
 800b372:	1414      	asrs	r4, r2, #16
 800b374:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b378:	b292      	uxth	r2, r2
 800b37a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b37e:	f84e 2b04 	str.w	r2, [lr], #4
 800b382:	1421      	asrs	r1, r4, #16
 800b384:	e7e0      	b.n	800b348 <__mdiff+0xc8>
 800b386:	3f01      	subs	r7, #1
 800b388:	e7ea      	b.n	800b360 <__mdiff+0xe0>
 800b38a:	bf00      	nop
 800b38c:	0808a90e 	.word	0x0808a90e
 800b390:	0808a9b2 	.word	0x0808a9b2

0800b394 <__ulp>:
 800b394:	b082      	sub	sp, #8
 800b396:	ed8d 0b00 	vstr	d0, [sp]
 800b39a:	9a01      	ldr	r2, [sp, #4]
 800b39c:	4b0f      	ldr	r3, [pc, #60]	; (800b3dc <__ulp+0x48>)
 800b39e:	4013      	ands	r3, r2
 800b3a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dc08      	bgt.n	800b3ba <__ulp+0x26>
 800b3a8:	425b      	negs	r3, r3
 800b3aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b3ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b3b2:	da04      	bge.n	800b3be <__ulp+0x2a>
 800b3b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b3b8:	4113      	asrs	r3, r2
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	e008      	b.n	800b3d0 <__ulp+0x3c>
 800b3be:	f1a2 0314 	sub.w	r3, r2, #20
 800b3c2:	2b1e      	cmp	r3, #30
 800b3c4:	bfda      	itte	le
 800b3c6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b3ca:	40da      	lsrle	r2, r3
 800b3cc:	2201      	movgt	r2, #1
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	ec41 0b10 	vmov	d0, r0, r1
 800b3d8:	b002      	add	sp, #8
 800b3da:	4770      	bx	lr
 800b3dc:	7ff00000 	.word	0x7ff00000

0800b3e0 <__b2d>:
 800b3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e4:	6906      	ldr	r6, [r0, #16]
 800b3e6:	f100 0814 	add.w	r8, r0, #20
 800b3ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b3ee:	1f37      	subs	r7, r6, #4
 800b3f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	f7ff fd53 	bl	800aea0 <__hi0bits>
 800b3fa:	f1c0 0320 	rsb	r3, r0, #32
 800b3fe:	280a      	cmp	r0, #10
 800b400:	600b      	str	r3, [r1, #0]
 800b402:	491b      	ldr	r1, [pc, #108]	; (800b470 <__b2d+0x90>)
 800b404:	dc15      	bgt.n	800b432 <__b2d+0x52>
 800b406:	f1c0 0c0b 	rsb	ip, r0, #11
 800b40a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b40e:	45b8      	cmp	r8, r7
 800b410:	ea43 0501 	orr.w	r5, r3, r1
 800b414:	bf34      	ite	cc
 800b416:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b41a:	2300      	movcs	r3, #0
 800b41c:	3015      	adds	r0, #21
 800b41e:	fa02 f000 	lsl.w	r0, r2, r0
 800b422:	fa23 f30c 	lsr.w	r3, r3, ip
 800b426:	4303      	orrs	r3, r0
 800b428:	461c      	mov	r4, r3
 800b42a:	ec45 4b10 	vmov	d0, r4, r5
 800b42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b432:	45b8      	cmp	r8, r7
 800b434:	bf3a      	itte	cc
 800b436:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b43a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b43e:	2300      	movcs	r3, #0
 800b440:	380b      	subs	r0, #11
 800b442:	d012      	beq.n	800b46a <__b2d+0x8a>
 800b444:	f1c0 0120 	rsb	r1, r0, #32
 800b448:	fa23 f401 	lsr.w	r4, r3, r1
 800b44c:	4082      	lsls	r2, r0
 800b44e:	4322      	orrs	r2, r4
 800b450:	4547      	cmp	r7, r8
 800b452:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b456:	bf8c      	ite	hi
 800b458:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b45c:	2200      	movls	r2, #0
 800b45e:	4083      	lsls	r3, r0
 800b460:	40ca      	lsrs	r2, r1
 800b462:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b466:	4313      	orrs	r3, r2
 800b468:	e7de      	b.n	800b428 <__b2d+0x48>
 800b46a:	ea42 0501 	orr.w	r5, r2, r1
 800b46e:	e7db      	b.n	800b428 <__b2d+0x48>
 800b470:	3ff00000 	.word	0x3ff00000

0800b474 <__d2b>:
 800b474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b478:	460f      	mov	r7, r1
 800b47a:	2101      	movs	r1, #1
 800b47c:	ec59 8b10 	vmov	r8, r9, d0
 800b480:	4616      	mov	r6, r2
 800b482:	f7ff fc1b 	bl	800acbc <_Balloc>
 800b486:	4604      	mov	r4, r0
 800b488:	b930      	cbnz	r0, 800b498 <__d2b+0x24>
 800b48a:	4602      	mov	r2, r0
 800b48c:	4b24      	ldr	r3, [pc, #144]	; (800b520 <__d2b+0xac>)
 800b48e:	4825      	ldr	r0, [pc, #148]	; (800b524 <__d2b+0xb0>)
 800b490:	f240 310f 	movw	r1, #783	; 0x30f
 800b494:	f7fe fc40 	bl	8009d18 <__assert_func>
 800b498:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b49c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4a0:	bb2d      	cbnz	r5, 800b4ee <__d2b+0x7a>
 800b4a2:	9301      	str	r3, [sp, #4]
 800b4a4:	f1b8 0300 	subs.w	r3, r8, #0
 800b4a8:	d026      	beq.n	800b4f8 <__d2b+0x84>
 800b4aa:	4668      	mov	r0, sp
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	f7ff fd17 	bl	800aee0 <__lo0bits>
 800b4b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b4b6:	b1e8      	cbz	r0, 800b4f4 <__d2b+0x80>
 800b4b8:	f1c0 0320 	rsb	r3, r0, #32
 800b4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c0:	430b      	orrs	r3, r1
 800b4c2:	40c2      	lsrs	r2, r0
 800b4c4:	6163      	str	r3, [r4, #20]
 800b4c6:	9201      	str	r2, [sp, #4]
 800b4c8:	9b01      	ldr	r3, [sp, #4]
 800b4ca:	61a3      	str	r3, [r4, #24]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	bf14      	ite	ne
 800b4d0:	2202      	movne	r2, #2
 800b4d2:	2201      	moveq	r2, #1
 800b4d4:	6122      	str	r2, [r4, #16]
 800b4d6:	b1bd      	cbz	r5, 800b508 <__d2b+0x94>
 800b4d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4dc:	4405      	add	r5, r0
 800b4de:	603d      	str	r5, [r7, #0]
 800b4e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4e4:	6030      	str	r0, [r6, #0]
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	b003      	add	sp, #12
 800b4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4f2:	e7d6      	b.n	800b4a2 <__d2b+0x2e>
 800b4f4:	6161      	str	r1, [r4, #20]
 800b4f6:	e7e7      	b.n	800b4c8 <__d2b+0x54>
 800b4f8:	a801      	add	r0, sp, #4
 800b4fa:	f7ff fcf1 	bl	800aee0 <__lo0bits>
 800b4fe:	9b01      	ldr	r3, [sp, #4]
 800b500:	6163      	str	r3, [r4, #20]
 800b502:	3020      	adds	r0, #32
 800b504:	2201      	movs	r2, #1
 800b506:	e7e5      	b.n	800b4d4 <__d2b+0x60>
 800b508:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b50c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b510:	6038      	str	r0, [r7, #0]
 800b512:	6918      	ldr	r0, [r3, #16]
 800b514:	f7ff fcc4 	bl	800aea0 <__hi0bits>
 800b518:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b51c:	e7e2      	b.n	800b4e4 <__d2b+0x70>
 800b51e:	bf00      	nop
 800b520:	0808a90e 	.word	0x0808a90e
 800b524:	0808a9b2 	.word	0x0808a9b2

0800b528 <__ratio>:
 800b528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	4688      	mov	r8, r1
 800b52e:	4669      	mov	r1, sp
 800b530:	4681      	mov	r9, r0
 800b532:	f7ff ff55 	bl	800b3e0 <__b2d>
 800b536:	a901      	add	r1, sp, #4
 800b538:	4640      	mov	r0, r8
 800b53a:	ec55 4b10 	vmov	r4, r5, d0
 800b53e:	f7ff ff4f 	bl	800b3e0 <__b2d>
 800b542:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b546:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b54a:	eba3 0c02 	sub.w	ip, r3, r2
 800b54e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b552:	1a9b      	subs	r3, r3, r2
 800b554:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b558:	ec51 0b10 	vmov	r0, r1, d0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfd6      	itet	le
 800b560:	460a      	movle	r2, r1
 800b562:	462a      	movgt	r2, r5
 800b564:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b568:	468b      	mov	fp, r1
 800b56a:	462f      	mov	r7, r5
 800b56c:	bfd4      	ite	le
 800b56e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b572:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b576:	4620      	mov	r0, r4
 800b578:	ee10 2a10 	vmov	r2, s0
 800b57c:	465b      	mov	r3, fp
 800b57e:	4639      	mov	r1, r7
 800b580:	f7f5 f964 	bl	800084c <__aeabi_ddiv>
 800b584:	ec41 0b10 	vmov	d0, r0, r1
 800b588:	b003      	add	sp, #12
 800b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b58e <__copybits>:
 800b58e:	3901      	subs	r1, #1
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	1149      	asrs	r1, r1, #5
 800b594:	6914      	ldr	r4, [r2, #16]
 800b596:	3101      	adds	r1, #1
 800b598:	f102 0314 	add.w	r3, r2, #20
 800b59c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b5a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b5a4:	1f05      	subs	r5, r0, #4
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	d30c      	bcc.n	800b5c4 <__copybits+0x36>
 800b5aa:	1aa3      	subs	r3, r4, r2
 800b5ac:	3b11      	subs	r3, #17
 800b5ae:	f023 0303 	bic.w	r3, r3, #3
 800b5b2:	3211      	adds	r2, #17
 800b5b4:	42a2      	cmp	r2, r4
 800b5b6:	bf88      	it	hi
 800b5b8:	2300      	movhi	r3, #0
 800b5ba:	4418      	add	r0, r3
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4288      	cmp	r0, r1
 800b5c0:	d305      	bcc.n	800b5ce <__copybits+0x40>
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5cc:	e7eb      	b.n	800b5a6 <__copybits+0x18>
 800b5ce:	f840 3b04 	str.w	r3, [r0], #4
 800b5d2:	e7f4      	b.n	800b5be <__copybits+0x30>

0800b5d4 <__any_on>:
 800b5d4:	f100 0214 	add.w	r2, r0, #20
 800b5d8:	6900      	ldr	r0, [r0, #16]
 800b5da:	114b      	asrs	r3, r1, #5
 800b5dc:	4298      	cmp	r0, r3
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	db11      	blt.n	800b606 <__any_on+0x32>
 800b5e2:	dd0a      	ble.n	800b5fa <__any_on+0x26>
 800b5e4:	f011 011f 	ands.w	r1, r1, #31
 800b5e8:	d007      	beq.n	800b5fa <__any_on+0x26>
 800b5ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5ee:	fa24 f001 	lsr.w	r0, r4, r1
 800b5f2:	fa00 f101 	lsl.w	r1, r0, r1
 800b5f6:	428c      	cmp	r4, r1
 800b5f8:	d10b      	bne.n	800b612 <__any_on+0x3e>
 800b5fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d803      	bhi.n	800b60a <__any_on+0x36>
 800b602:	2000      	movs	r0, #0
 800b604:	bd10      	pop	{r4, pc}
 800b606:	4603      	mov	r3, r0
 800b608:	e7f7      	b.n	800b5fa <__any_on+0x26>
 800b60a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b60e:	2900      	cmp	r1, #0
 800b610:	d0f5      	beq.n	800b5fe <__any_on+0x2a>
 800b612:	2001      	movs	r0, #1
 800b614:	e7f6      	b.n	800b604 <__any_on+0x30>

0800b616 <__sread>:
 800b616:	b510      	push	{r4, lr}
 800b618:	460c      	mov	r4, r1
 800b61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61e:	f000 f8c7 	bl	800b7b0 <_read_r>
 800b622:	2800      	cmp	r0, #0
 800b624:	bfab      	itete	ge
 800b626:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b628:	89a3      	ldrhlt	r3, [r4, #12]
 800b62a:	181b      	addge	r3, r3, r0
 800b62c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b630:	bfac      	ite	ge
 800b632:	6563      	strge	r3, [r4, #84]	; 0x54
 800b634:	81a3      	strhlt	r3, [r4, #12]
 800b636:	bd10      	pop	{r4, pc}

0800b638 <__swrite>:
 800b638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63c:	461f      	mov	r7, r3
 800b63e:	898b      	ldrh	r3, [r1, #12]
 800b640:	05db      	lsls	r3, r3, #23
 800b642:	4605      	mov	r5, r0
 800b644:	460c      	mov	r4, r1
 800b646:	4616      	mov	r6, r2
 800b648:	d505      	bpl.n	800b656 <__swrite+0x1e>
 800b64a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64e:	2302      	movs	r3, #2
 800b650:	2200      	movs	r2, #0
 800b652:	f000 f89b 	bl	800b78c <_lseek_r>
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b65c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b660:	81a3      	strh	r3, [r4, #12]
 800b662:	4632      	mov	r2, r6
 800b664:	463b      	mov	r3, r7
 800b666:	4628      	mov	r0, r5
 800b668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b66c:	f000 b8c2 	b.w	800b7f4 <_write_r>

0800b670 <__sseek>:
 800b670:	b510      	push	{r4, lr}
 800b672:	460c      	mov	r4, r1
 800b674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b678:	f000 f888 	bl	800b78c <_lseek_r>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	bf15      	itete	ne
 800b682:	6560      	strne	r0, [r4, #84]	; 0x54
 800b684:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b688:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b68c:	81a3      	strheq	r3, [r4, #12]
 800b68e:	bf18      	it	ne
 800b690:	81a3      	strhne	r3, [r4, #12]
 800b692:	bd10      	pop	{r4, pc}

0800b694 <__sclose>:
 800b694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b698:	f000 b868 	b.w	800b76c <_close_r>

0800b69c <fiprintf>:
 800b69c:	b40e      	push	{r1, r2, r3}
 800b69e:	b503      	push	{r0, r1, lr}
 800b6a0:	4601      	mov	r1, r0
 800b6a2:	ab03      	add	r3, sp, #12
 800b6a4:	4805      	ldr	r0, [pc, #20]	; (800b6bc <fiprintf+0x20>)
 800b6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6aa:	6800      	ldr	r0, [r0, #0]
 800b6ac:	9301      	str	r3, [sp, #4]
 800b6ae:	f000 f947 	bl	800b940 <_vfiprintf_r>
 800b6b2:	b002      	add	sp, #8
 800b6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6b8:	b003      	add	sp, #12
 800b6ba:	4770      	bx	lr
 800b6bc:	200014d4 	.word	0x200014d4

0800b6c0 <_realloc_r>:
 800b6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c4:	4680      	mov	r8, r0
 800b6c6:	4614      	mov	r4, r2
 800b6c8:	460e      	mov	r6, r1
 800b6ca:	b921      	cbnz	r1, 800b6d6 <_realloc_r+0x16>
 800b6cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	f7ff b817 	b.w	800a704 <_malloc_r>
 800b6d6:	b92a      	cbnz	r2, 800b6e4 <_realloc_r+0x24>
 800b6d8:	f000 f8bc 	bl	800b854 <_free_r>
 800b6dc:	4625      	mov	r5, r4
 800b6de:	4628      	mov	r0, r5
 800b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e4:	f000 fa46 	bl	800bb74 <_malloc_usable_size_r>
 800b6e8:	4284      	cmp	r4, r0
 800b6ea:	4607      	mov	r7, r0
 800b6ec:	d802      	bhi.n	800b6f4 <_realloc_r+0x34>
 800b6ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6f2:	d812      	bhi.n	800b71a <_realloc_r+0x5a>
 800b6f4:	4621      	mov	r1, r4
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	f7ff f804 	bl	800a704 <_malloc_r>
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d0ed      	beq.n	800b6de <_realloc_r+0x1e>
 800b702:	42bc      	cmp	r4, r7
 800b704:	4622      	mov	r2, r4
 800b706:	4631      	mov	r1, r6
 800b708:	bf28      	it	cs
 800b70a:	463a      	movcs	r2, r7
 800b70c:	f7fe faec 	bl	8009ce8 <memcpy>
 800b710:	4631      	mov	r1, r6
 800b712:	4640      	mov	r0, r8
 800b714:	f000 f89e 	bl	800b854 <_free_r>
 800b718:	e7e1      	b.n	800b6de <_realloc_r+0x1e>
 800b71a:	4635      	mov	r5, r6
 800b71c:	e7df      	b.n	800b6de <_realloc_r+0x1e>

0800b71e <__ascii_wctomb>:
 800b71e:	b149      	cbz	r1, 800b734 <__ascii_wctomb+0x16>
 800b720:	2aff      	cmp	r2, #255	; 0xff
 800b722:	bf85      	ittet	hi
 800b724:	238a      	movhi	r3, #138	; 0x8a
 800b726:	6003      	strhi	r3, [r0, #0]
 800b728:	700a      	strbls	r2, [r1, #0]
 800b72a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b72e:	bf98      	it	ls
 800b730:	2001      	movls	r0, #1
 800b732:	4770      	bx	lr
 800b734:	4608      	mov	r0, r1
 800b736:	4770      	bx	lr

0800b738 <memmove>:
 800b738:	4288      	cmp	r0, r1
 800b73a:	b510      	push	{r4, lr}
 800b73c:	eb01 0402 	add.w	r4, r1, r2
 800b740:	d902      	bls.n	800b748 <memmove+0x10>
 800b742:	4284      	cmp	r4, r0
 800b744:	4623      	mov	r3, r4
 800b746:	d807      	bhi.n	800b758 <memmove+0x20>
 800b748:	1e43      	subs	r3, r0, #1
 800b74a:	42a1      	cmp	r1, r4
 800b74c:	d008      	beq.n	800b760 <memmove+0x28>
 800b74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b752:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b756:	e7f8      	b.n	800b74a <memmove+0x12>
 800b758:	4402      	add	r2, r0
 800b75a:	4601      	mov	r1, r0
 800b75c:	428a      	cmp	r2, r1
 800b75e:	d100      	bne.n	800b762 <memmove+0x2a>
 800b760:	bd10      	pop	{r4, pc}
 800b762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b76a:	e7f7      	b.n	800b75c <memmove+0x24>

0800b76c <_close_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	4d06      	ldr	r5, [pc, #24]	; (800b788 <_close_r+0x1c>)
 800b770:	2300      	movs	r3, #0
 800b772:	4604      	mov	r4, r0
 800b774:	4608      	mov	r0, r1
 800b776:	602b      	str	r3, [r5, #0]
 800b778:	f7f7 fb93 	bl	8002ea2 <_close>
 800b77c:	1c43      	adds	r3, r0, #1
 800b77e:	d102      	bne.n	800b786 <_close_r+0x1a>
 800b780:	682b      	ldr	r3, [r5, #0]
 800b782:	b103      	cbz	r3, 800b786 <_close_r+0x1a>
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	20001a94 	.word	0x20001a94

0800b78c <_lseek_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4d07      	ldr	r5, [pc, #28]	; (800b7ac <_lseek_r+0x20>)
 800b790:	4604      	mov	r4, r0
 800b792:	4608      	mov	r0, r1
 800b794:	4611      	mov	r1, r2
 800b796:	2200      	movs	r2, #0
 800b798:	602a      	str	r2, [r5, #0]
 800b79a:	461a      	mov	r2, r3
 800b79c:	f7f7 fba8 	bl	8002ef0 <_lseek>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	d102      	bne.n	800b7aa <_lseek_r+0x1e>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	b103      	cbz	r3, 800b7aa <_lseek_r+0x1e>
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	20001a94 	.word	0x20001a94

0800b7b0 <_read_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4d07      	ldr	r5, [pc, #28]	; (800b7d0 <_read_r+0x20>)
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	4608      	mov	r0, r1
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	602a      	str	r2, [r5, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f7f7 fb36 	bl	8002e30 <_read>
 800b7c4:	1c43      	adds	r3, r0, #1
 800b7c6:	d102      	bne.n	800b7ce <_read_r+0x1e>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	b103      	cbz	r3, 800b7ce <_read_r+0x1e>
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	bd38      	pop	{r3, r4, r5, pc}
 800b7d0:	20001a94 	.word	0x20001a94

0800b7d4 <_sbrk_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4d06      	ldr	r5, [pc, #24]	; (800b7f0 <_sbrk_r+0x1c>)
 800b7d8:	2300      	movs	r3, #0
 800b7da:	4604      	mov	r4, r0
 800b7dc:	4608      	mov	r0, r1
 800b7de:	602b      	str	r3, [r5, #0]
 800b7e0:	f7f7 fb94 	bl	8002f0c <_sbrk>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d102      	bne.n	800b7ee <_sbrk_r+0x1a>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	b103      	cbz	r3, 800b7ee <_sbrk_r+0x1a>
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	20001a94 	.word	0x20001a94

0800b7f4 <_write_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d07      	ldr	r5, [pc, #28]	; (800b814 <_write_r+0x20>)
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	2200      	movs	r2, #0
 800b800:	602a      	str	r2, [r5, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	f7f7 fb31 	bl	8002e6a <_write>
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	d102      	bne.n	800b812 <_write_r+0x1e>
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	b103      	cbz	r3, 800b812 <_write_r+0x1e>
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	bd38      	pop	{r3, r4, r5, pc}
 800b814:	20001a94 	.word	0x20001a94

0800b818 <abort>:
 800b818:	b508      	push	{r3, lr}
 800b81a:	2006      	movs	r0, #6
 800b81c:	f000 faf4 	bl	800be08 <raise>
 800b820:	2001      	movs	r0, #1
 800b822:	f7f7 fafb 	bl	8002e1c <_exit>

0800b826 <_calloc_r>:
 800b826:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b828:	fba1 2402 	umull	r2, r4, r1, r2
 800b82c:	b94c      	cbnz	r4, 800b842 <_calloc_r+0x1c>
 800b82e:	4611      	mov	r1, r2
 800b830:	9201      	str	r2, [sp, #4]
 800b832:	f7fe ff67 	bl	800a704 <_malloc_r>
 800b836:	9a01      	ldr	r2, [sp, #4]
 800b838:	4605      	mov	r5, r0
 800b83a:	b930      	cbnz	r0, 800b84a <_calloc_r+0x24>
 800b83c:	4628      	mov	r0, r5
 800b83e:	b003      	add	sp, #12
 800b840:	bd30      	pop	{r4, r5, pc}
 800b842:	220c      	movs	r2, #12
 800b844:	6002      	str	r2, [r0, #0]
 800b846:	2500      	movs	r5, #0
 800b848:	e7f8      	b.n	800b83c <_calloc_r+0x16>
 800b84a:	4621      	mov	r1, r4
 800b84c:	f7fe fa18 	bl	8009c80 <memset>
 800b850:	e7f4      	b.n	800b83c <_calloc_r+0x16>
	...

0800b854 <_free_r>:
 800b854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b856:	2900      	cmp	r1, #0
 800b858:	d044      	beq.n	800b8e4 <_free_r+0x90>
 800b85a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b85e:	9001      	str	r0, [sp, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	f1a1 0404 	sub.w	r4, r1, #4
 800b866:	bfb8      	it	lt
 800b868:	18e4      	addlt	r4, r4, r3
 800b86a:	f7ff fa1b 	bl	800aca4 <__malloc_lock>
 800b86e:	4a1e      	ldr	r2, [pc, #120]	; (800b8e8 <_free_r+0x94>)
 800b870:	9801      	ldr	r0, [sp, #4]
 800b872:	6813      	ldr	r3, [r2, #0]
 800b874:	b933      	cbnz	r3, 800b884 <_free_r+0x30>
 800b876:	6063      	str	r3, [r4, #4]
 800b878:	6014      	str	r4, [r2, #0]
 800b87a:	b003      	add	sp, #12
 800b87c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b880:	f7ff ba16 	b.w	800acb0 <__malloc_unlock>
 800b884:	42a3      	cmp	r3, r4
 800b886:	d908      	bls.n	800b89a <_free_r+0x46>
 800b888:	6825      	ldr	r5, [r4, #0]
 800b88a:	1961      	adds	r1, r4, r5
 800b88c:	428b      	cmp	r3, r1
 800b88e:	bf01      	itttt	eq
 800b890:	6819      	ldreq	r1, [r3, #0]
 800b892:	685b      	ldreq	r3, [r3, #4]
 800b894:	1949      	addeq	r1, r1, r5
 800b896:	6021      	streq	r1, [r4, #0]
 800b898:	e7ed      	b.n	800b876 <_free_r+0x22>
 800b89a:	461a      	mov	r2, r3
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	b10b      	cbz	r3, 800b8a4 <_free_r+0x50>
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	d9fa      	bls.n	800b89a <_free_r+0x46>
 800b8a4:	6811      	ldr	r1, [r2, #0]
 800b8a6:	1855      	adds	r5, r2, r1
 800b8a8:	42a5      	cmp	r5, r4
 800b8aa:	d10b      	bne.n	800b8c4 <_free_r+0x70>
 800b8ac:	6824      	ldr	r4, [r4, #0]
 800b8ae:	4421      	add	r1, r4
 800b8b0:	1854      	adds	r4, r2, r1
 800b8b2:	42a3      	cmp	r3, r4
 800b8b4:	6011      	str	r1, [r2, #0]
 800b8b6:	d1e0      	bne.n	800b87a <_free_r+0x26>
 800b8b8:	681c      	ldr	r4, [r3, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	6053      	str	r3, [r2, #4]
 800b8be:	440c      	add	r4, r1
 800b8c0:	6014      	str	r4, [r2, #0]
 800b8c2:	e7da      	b.n	800b87a <_free_r+0x26>
 800b8c4:	d902      	bls.n	800b8cc <_free_r+0x78>
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	6003      	str	r3, [r0, #0]
 800b8ca:	e7d6      	b.n	800b87a <_free_r+0x26>
 800b8cc:	6825      	ldr	r5, [r4, #0]
 800b8ce:	1961      	adds	r1, r4, r5
 800b8d0:	428b      	cmp	r3, r1
 800b8d2:	bf04      	itt	eq
 800b8d4:	6819      	ldreq	r1, [r3, #0]
 800b8d6:	685b      	ldreq	r3, [r3, #4]
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	bf04      	itt	eq
 800b8dc:	1949      	addeq	r1, r1, r5
 800b8de:	6021      	streq	r1, [r4, #0]
 800b8e0:	6054      	str	r4, [r2, #4]
 800b8e2:	e7ca      	b.n	800b87a <_free_r+0x26>
 800b8e4:	b003      	add	sp, #12
 800b8e6:	bd30      	pop	{r4, r5, pc}
 800b8e8:	20001a8c 	.word	0x20001a8c

0800b8ec <__sfputc_r>:
 800b8ec:	6893      	ldr	r3, [r2, #8]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	b410      	push	{r4}
 800b8f4:	6093      	str	r3, [r2, #8]
 800b8f6:	da08      	bge.n	800b90a <__sfputc_r+0x1e>
 800b8f8:	6994      	ldr	r4, [r2, #24]
 800b8fa:	42a3      	cmp	r3, r4
 800b8fc:	db01      	blt.n	800b902 <__sfputc_r+0x16>
 800b8fe:	290a      	cmp	r1, #10
 800b900:	d103      	bne.n	800b90a <__sfputc_r+0x1e>
 800b902:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b906:	f000 b93d 	b.w	800bb84 <__swbuf_r>
 800b90a:	6813      	ldr	r3, [r2, #0]
 800b90c:	1c58      	adds	r0, r3, #1
 800b90e:	6010      	str	r0, [r2, #0]
 800b910:	7019      	strb	r1, [r3, #0]
 800b912:	4608      	mov	r0, r1
 800b914:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <__sfputs_r>:
 800b91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91c:	4606      	mov	r6, r0
 800b91e:	460f      	mov	r7, r1
 800b920:	4614      	mov	r4, r2
 800b922:	18d5      	adds	r5, r2, r3
 800b924:	42ac      	cmp	r4, r5
 800b926:	d101      	bne.n	800b92c <__sfputs_r+0x12>
 800b928:	2000      	movs	r0, #0
 800b92a:	e007      	b.n	800b93c <__sfputs_r+0x22>
 800b92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b930:	463a      	mov	r2, r7
 800b932:	4630      	mov	r0, r6
 800b934:	f7ff ffda 	bl	800b8ec <__sfputc_r>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d1f3      	bne.n	800b924 <__sfputs_r+0xa>
 800b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b940 <_vfiprintf_r>:
 800b940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b944:	460d      	mov	r5, r1
 800b946:	b09d      	sub	sp, #116	; 0x74
 800b948:	4614      	mov	r4, r2
 800b94a:	4698      	mov	r8, r3
 800b94c:	4606      	mov	r6, r0
 800b94e:	b118      	cbz	r0, 800b958 <_vfiprintf_r+0x18>
 800b950:	6a03      	ldr	r3, [r0, #32]
 800b952:	b90b      	cbnz	r3, 800b958 <_vfiprintf_r+0x18>
 800b954:	f7fd fa4a 	bl	8008dec <__sinit>
 800b958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b95a:	07d9      	lsls	r1, r3, #31
 800b95c:	d405      	bmi.n	800b96a <_vfiprintf_r+0x2a>
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	059a      	lsls	r2, r3, #22
 800b962:	d402      	bmi.n	800b96a <_vfiprintf_r+0x2a>
 800b964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b966:	f7fe f9bd 	bl	8009ce4 <__retarget_lock_acquire_recursive>
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	071b      	lsls	r3, r3, #28
 800b96e:	d501      	bpl.n	800b974 <_vfiprintf_r+0x34>
 800b970:	692b      	ldr	r3, [r5, #16]
 800b972:	b99b      	cbnz	r3, 800b99c <_vfiprintf_r+0x5c>
 800b974:	4629      	mov	r1, r5
 800b976:	4630      	mov	r0, r6
 800b978:	f000 f942 	bl	800bc00 <__swsetup_r>
 800b97c:	b170      	cbz	r0, 800b99c <_vfiprintf_r+0x5c>
 800b97e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b980:	07dc      	lsls	r4, r3, #31
 800b982:	d504      	bpl.n	800b98e <_vfiprintf_r+0x4e>
 800b984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b988:	b01d      	add	sp, #116	; 0x74
 800b98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	0598      	lsls	r0, r3, #22
 800b992:	d4f7      	bmi.n	800b984 <_vfiprintf_r+0x44>
 800b994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b996:	f7fe f9a6 	bl	8009ce6 <__retarget_lock_release_recursive>
 800b99a:	e7f3      	b.n	800b984 <_vfiprintf_r+0x44>
 800b99c:	2300      	movs	r3, #0
 800b99e:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a0:	2320      	movs	r3, #32
 800b9a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9aa:	2330      	movs	r3, #48	; 0x30
 800b9ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb60 <_vfiprintf_r+0x220>
 800b9b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9b4:	f04f 0901 	mov.w	r9, #1
 800b9b8:	4623      	mov	r3, r4
 800b9ba:	469a      	mov	sl, r3
 800b9bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9c0:	b10a      	cbz	r2, 800b9c6 <_vfiprintf_r+0x86>
 800b9c2:	2a25      	cmp	r2, #37	; 0x25
 800b9c4:	d1f9      	bne.n	800b9ba <_vfiprintf_r+0x7a>
 800b9c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ca:	d00b      	beq.n	800b9e4 <_vfiprintf_r+0xa4>
 800b9cc:	465b      	mov	r3, fp
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f7ff ffa1 	bl	800b91a <__sfputs_r>
 800b9d8:	3001      	adds	r0, #1
 800b9da:	f000 80a9 	beq.w	800bb30 <_vfiprintf_r+0x1f0>
 800b9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9e0:	445a      	add	r2, fp
 800b9e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b9e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 80a1 	beq.w	800bb30 <_vfiprintf_r+0x1f0>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9f8:	f10a 0a01 	add.w	sl, sl, #1
 800b9fc:	9304      	str	r3, [sp, #16]
 800b9fe:	9307      	str	r3, [sp, #28]
 800ba00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba04:	931a      	str	r3, [sp, #104]	; 0x68
 800ba06:	4654      	mov	r4, sl
 800ba08:	2205      	movs	r2, #5
 800ba0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0e:	4854      	ldr	r0, [pc, #336]	; (800bb60 <_vfiprintf_r+0x220>)
 800ba10:	f7f4 fbe6 	bl	80001e0 <memchr>
 800ba14:	9a04      	ldr	r2, [sp, #16]
 800ba16:	b9d8      	cbnz	r0, 800ba50 <_vfiprintf_r+0x110>
 800ba18:	06d1      	lsls	r1, r2, #27
 800ba1a:	bf44      	itt	mi
 800ba1c:	2320      	movmi	r3, #32
 800ba1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba22:	0713      	lsls	r3, r2, #28
 800ba24:	bf44      	itt	mi
 800ba26:	232b      	movmi	r3, #43	; 0x2b
 800ba28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba30:	2b2a      	cmp	r3, #42	; 0x2a
 800ba32:	d015      	beq.n	800ba60 <_vfiprintf_r+0x120>
 800ba34:	9a07      	ldr	r2, [sp, #28]
 800ba36:	4654      	mov	r4, sl
 800ba38:	2000      	movs	r0, #0
 800ba3a:	f04f 0c0a 	mov.w	ip, #10
 800ba3e:	4621      	mov	r1, r4
 800ba40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba44:	3b30      	subs	r3, #48	; 0x30
 800ba46:	2b09      	cmp	r3, #9
 800ba48:	d94d      	bls.n	800bae6 <_vfiprintf_r+0x1a6>
 800ba4a:	b1b0      	cbz	r0, 800ba7a <_vfiprintf_r+0x13a>
 800ba4c:	9207      	str	r2, [sp, #28]
 800ba4e:	e014      	b.n	800ba7a <_vfiprintf_r+0x13a>
 800ba50:	eba0 0308 	sub.w	r3, r0, r8
 800ba54:	fa09 f303 	lsl.w	r3, r9, r3
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	9304      	str	r3, [sp, #16]
 800ba5c:	46a2      	mov	sl, r4
 800ba5e:	e7d2      	b.n	800ba06 <_vfiprintf_r+0xc6>
 800ba60:	9b03      	ldr	r3, [sp, #12]
 800ba62:	1d19      	adds	r1, r3, #4
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	9103      	str	r1, [sp, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	bfbb      	ittet	lt
 800ba6c:	425b      	neglt	r3, r3
 800ba6e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba72:	9307      	strge	r3, [sp, #28]
 800ba74:	9307      	strlt	r3, [sp, #28]
 800ba76:	bfb8      	it	lt
 800ba78:	9204      	strlt	r2, [sp, #16]
 800ba7a:	7823      	ldrb	r3, [r4, #0]
 800ba7c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba7e:	d10c      	bne.n	800ba9a <_vfiprintf_r+0x15a>
 800ba80:	7863      	ldrb	r3, [r4, #1]
 800ba82:	2b2a      	cmp	r3, #42	; 0x2a
 800ba84:	d134      	bne.n	800baf0 <_vfiprintf_r+0x1b0>
 800ba86:	9b03      	ldr	r3, [sp, #12]
 800ba88:	1d1a      	adds	r2, r3, #4
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	9203      	str	r2, [sp, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	bfb8      	it	lt
 800ba92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba96:	3402      	adds	r4, #2
 800ba98:	9305      	str	r3, [sp, #20]
 800ba9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb70 <_vfiprintf_r+0x230>
 800ba9e:	7821      	ldrb	r1, [r4, #0]
 800baa0:	2203      	movs	r2, #3
 800baa2:	4650      	mov	r0, sl
 800baa4:	f7f4 fb9c 	bl	80001e0 <memchr>
 800baa8:	b138      	cbz	r0, 800baba <_vfiprintf_r+0x17a>
 800baaa:	9b04      	ldr	r3, [sp, #16]
 800baac:	eba0 000a 	sub.w	r0, r0, sl
 800bab0:	2240      	movs	r2, #64	; 0x40
 800bab2:	4082      	lsls	r2, r0
 800bab4:	4313      	orrs	r3, r2
 800bab6:	3401      	adds	r4, #1
 800bab8:	9304      	str	r3, [sp, #16]
 800baba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800babe:	4829      	ldr	r0, [pc, #164]	; (800bb64 <_vfiprintf_r+0x224>)
 800bac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bac4:	2206      	movs	r2, #6
 800bac6:	f7f4 fb8b 	bl	80001e0 <memchr>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d03f      	beq.n	800bb4e <_vfiprintf_r+0x20e>
 800bace:	4b26      	ldr	r3, [pc, #152]	; (800bb68 <_vfiprintf_r+0x228>)
 800bad0:	bb1b      	cbnz	r3, 800bb1a <_vfiprintf_r+0x1da>
 800bad2:	9b03      	ldr	r3, [sp, #12]
 800bad4:	3307      	adds	r3, #7
 800bad6:	f023 0307 	bic.w	r3, r3, #7
 800bada:	3308      	adds	r3, #8
 800badc:	9303      	str	r3, [sp, #12]
 800bade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae0:	443b      	add	r3, r7
 800bae2:	9309      	str	r3, [sp, #36]	; 0x24
 800bae4:	e768      	b.n	800b9b8 <_vfiprintf_r+0x78>
 800bae6:	fb0c 3202 	mla	r2, ip, r2, r3
 800baea:	460c      	mov	r4, r1
 800baec:	2001      	movs	r0, #1
 800baee:	e7a6      	b.n	800ba3e <_vfiprintf_r+0xfe>
 800baf0:	2300      	movs	r3, #0
 800baf2:	3401      	adds	r4, #1
 800baf4:	9305      	str	r3, [sp, #20]
 800baf6:	4619      	mov	r1, r3
 800baf8:	f04f 0c0a 	mov.w	ip, #10
 800bafc:	4620      	mov	r0, r4
 800bafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb02:	3a30      	subs	r2, #48	; 0x30
 800bb04:	2a09      	cmp	r2, #9
 800bb06:	d903      	bls.n	800bb10 <_vfiprintf_r+0x1d0>
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d0c6      	beq.n	800ba9a <_vfiprintf_r+0x15a>
 800bb0c:	9105      	str	r1, [sp, #20]
 800bb0e:	e7c4      	b.n	800ba9a <_vfiprintf_r+0x15a>
 800bb10:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb14:	4604      	mov	r4, r0
 800bb16:	2301      	movs	r3, #1
 800bb18:	e7f0      	b.n	800bafc <_vfiprintf_r+0x1bc>
 800bb1a:	ab03      	add	r3, sp, #12
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	462a      	mov	r2, r5
 800bb20:	4b12      	ldr	r3, [pc, #72]	; (800bb6c <_vfiprintf_r+0x22c>)
 800bb22:	a904      	add	r1, sp, #16
 800bb24:	4630      	mov	r0, r6
 800bb26:	f3af 8000 	nop.w
 800bb2a:	4607      	mov	r7, r0
 800bb2c:	1c78      	adds	r0, r7, #1
 800bb2e:	d1d6      	bne.n	800bade <_vfiprintf_r+0x19e>
 800bb30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb32:	07d9      	lsls	r1, r3, #31
 800bb34:	d405      	bmi.n	800bb42 <_vfiprintf_r+0x202>
 800bb36:	89ab      	ldrh	r3, [r5, #12]
 800bb38:	059a      	lsls	r2, r3, #22
 800bb3a:	d402      	bmi.n	800bb42 <_vfiprintf_r+0x202>
 800bb3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb3e:	f7fe f8d2 	bl	8009ce6 <__retarget_lock_release_recursive>
 800bb42:	89ab      	ldrh	r3, [r5, #12]
 800bb44:	065b      	lsls	r3, r3, #25
 800bb46:	f53f af1d 	bmi.w	800b984 <_vfiprintf_r+0x44>
 800bb4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb4c:	e71c      	b.n	800b988 <_vfiprintf_r+0x48>
 800bb4e:	ab03      	add	r3, sp, #12
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	462a      	mov	r2, r5
 800bb54:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <_vfiprintf_r+0x22c>)
 800bb56:	a904      	add	r1, sp, #16
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7fe fed3 	bl	800a904 <_printf_i>
 800bb5e:	e7e4      	b.n	800bb2a <_vfiprintf_r+0x1ea>
 800bb60:	0808a97f 	.word	0x0808a97f
 800bb64:	0808a989 	.word	0x0808a989
 800bb68:	00000000 	.word	0x00000000
 800bb6c:	0800b91b 	.word	0x0800b91b
 800bb70:	0808a985 	.word	0x0808a985

0800bb74 <_malloc_usable_size_r>:
 800bb74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb78:	1f18      	subs	r0, r3, #4
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bfbc      	itt	lt
 800bb7e:	580b      	ldrlt	r3, [r1, r0]
 800bb80:	18c0      	addlt	r0, r0, r3
 800bb82:	4770      	bx	lr

0800bb84 <__swbuf_r>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	460e      	mov	r6, r1
 800bb88:	4614      	mov	r4, r2
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	b118      	cbz	r0, 800bb96 <__swbuf_r+0x12>
 800bb8e:	6a03      	ldr	r3, [r0, #32]
 800bb90:	b90b      	cbnz	r3, 800bb96 <__swbuf_r+0x12>
 800bb92:	f7fd f92b 	bl	8008dec <__sinit>
 800bb96:	69a3      	ldr	r3, [r4, #24]
 800bb98:	60a3      	str	r3, [r4, #8]
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	071a      	lsls	r2, r3, #28
 800bb9e:	d525      	bpl.n	800bbec <__swbuf_r+0x68>
 800bba0:	6923      	ldr	r3, [r4, #16]
 800bba2:	b31b      	cbz	r3, 800bbec <__swbuf_r+0x68>
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	6922      	ldr	r2, [r4, #16]
 800bba8:	1a98      	subs	r0, r3, r2
 800bbaa:	6963      	ldr	r3, [r4, #20]
 800bbac:	b2f6      	uxtb	r6, r6
 800bbae:	4283      	cmp	r3, r0
 800bbb0:	4637      	mov	r7, r6
 800bbb2:	dc04      	bgt.n	800bbbe <__swbuf_r+0x3a>
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f7ff f84c 	bl	800ac54 <_fflush_r>
 800bbbc:	b9e0      	cbnz	r0, 800bbf8 <__swbuf_r+0x74>
 800bbbe:	68a3      	ldr	r3, [r4, #8]
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	60a3      	str	r3, [r4, #8]
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	6022      	str	r2, [r4, #0]
 800bbca:	701e      	strb	r6, [r3, #0]
 800bbcc:	6962      	ldr	r2, [r4, #20]
 800bbce:	1c43      	adds	r3, r0, #1
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d004      	beq.n	800bbde <__swbuf_r+0x5a>
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	07db      	lsls	r3, r3, #31
 800bbd8:	d506      	bpl.n	800bbe8 <__swbuf_r+0x64>
 800bbda:	2e0a      	cmp	r6, #10
 800bbdc:	d104      	bne.n	800bbe8 <__swbuf_r+0x64>
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f7ff f837 	bl	800ac54 <_fflush_r>
 800bbe6:	b938      	cbnz	r0, 800bbf8 <__swbuf_r+0x74>
 800bbe8:	4638      	mov	r0, r7
 800bbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbec:	4621      	mov	r1, r4
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 f806 	bl	800bc00 <__swsetup_r>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d0d5      	beq.n	800bba4 <__swbuf_r+0x20>
 800bbf8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bbfc:	e7f4      	b.n	800bbe8 <__swbuf_r+0x64>
	...

0800bc00 <__swsetup_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4b2a      	ldr	r3, [pc, #168]	; (800bcac <__swsetup_r+0xac>)
 800bc04:	4605      	mov	r5, r0
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	460c      	mov	r4, r1
 800bc0a:	b118      	cbz	r0, 800bc14 <__swsetup_r+0x14>
 800bc0c:	6a03      	ldr	r3, [r0, #32]
 800bc0e:	b90b      	cbnz	r3, 800bc14 <__swsetup_r+0x14>
 800bc10:	f7fd f8ec 	bl	8008dec <__sinit>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc1a:	0718      	lsls	r0, r3, #28
 800bc1c:	d422      	bmi.n	800bc64 <__swsetup_r+0x64>
 800bc1e:	06d9      	lsls	r1, r3, #27
 800bc20:	d407      	bmi.n	800bc32 <__swsetup_r+0x32>
 800bc22:	2309      	movs	r3, #9
 800bc24:	602b      	str	r3, [r5, #0]
 800bc26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc2a:	81a3      	strh	r3, [r4, #12]
 800bc2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc30:	e034      	b.n	800bc9c <__swsetup_r+0x9c>
 800bc32:	0758      	lsls	r0, r3, #29
 800bc34:	d512      	bpl.n	800bc5c <__swsetup_r+0x5c>
 800bc36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc38:	b141      	cbz	r1, 800bc4c <__swsetup_r+0x4c>
 800bc3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc3e:	4299      	cmp	r1, r3
 800bc40:	d002      	beq.n	800bc48 <__swsetup_r+0x48>
 800bc42:	4628      	mov	r0, r5
 800bc44:	f7ff fe06 	bl	800b854 <_free_r>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	6363      	str	r3, [r4, #52]	; 0x34
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc52:	81a3      	strh	r3, [r4, #12]
 800bc54:	2300      	movs	r3, #0
 800bc56:	6063      	str	r3, [r4, #4]
 800bc58:	6923      	ldr	r3, [r4, #16]
 800bc5a:	6023      	str	r3, [r4, #0]
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	f043 0308 	orr.w	r3, r3, #8
 800bc62:	81a3      	strh	r3, [r4, #12]
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	b94b      	cbnz	r3, 800bc7c <__swsetup_r+0x7c>
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc72:	d003      	beq.n	800bc7c <__swsetup_r+0x7c>
 800bc74:	4621      	mov	r1, r4
 800bc76:	4628      	mov	r0, r5
 800bc78:	f000 f840 	bl	800bcfc <__smakebuf_r>
 800bc7c:	89a0      	ldrh	r0, [r4, #12]
 800bc7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc82:	f010 0301 	ands.w	r3, r0, #1
 800bc86:	d00a      	beq.n	800bc9e <__swsetup_r+0x9e>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	60a3      	str	r3, [r4, #8]
 800bc8c:	6963      	ldr	r3, [r4, #20]
 800bc8e:	425b      	negs	r3, r3
 800bc90:	61a3      	str	r3, [r4, #24]
 800bc92:	6923      	ldr	r3, [r4, #16]
 800bc94:	b943      	cbnz	r3, 800bca8 <__swsetup_r+0xa8>
 800bc96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc9a:	d1c4      	bne.n	800bc26 <__swsetup_r+0x26>
 800bc9c:	bd38      	pop	{r3, r4, r5, pc}
 800bc9e:	0781      	lsls	r1, r0, #30
 800bca0:	bf58      	it	pl
 800bca2:	6963      	ldrpl	r3, [r4, #20]
 800bca4:	60a3      	str	r3, [r4, #8]
 800bca6:	e7f4      	b.n	800bc92 <__swsetup_r+0x92>
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e7f7      	b.n	800bc9c <__swsetup_r+0x9c>
 800bcac:	200014d4 	.word	0x200014d4

0800bcb0 <__swhatbuf_r>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb8:	2900      	cmp	r1, #0
 800bcba:	b096      	sub	sp, #88	; 0x58
 800bcbc:	4615      	mov	r5, r2
 800bcbe:	461e      	mov	r6, r3
 800bcc0:	da0d      	bge.n	800bcde <__swhatbuf_r+0x2e>
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bcc8:	f04f 0100 	mov.w	r1, #0
 800bccc:	bf0c      	ite	eq
 800bcce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bcd2:	2340      	movne	r3, #64	; 0x40
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	6031      	str	r1, [r6, #0]
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	b016      	add	sp, #88	; 0x58
 800bcdc:	bd70      	pop	{r4, r5, r6, pc}
 800bcde:	466a      	mov	r2, sp
 800bce0:	f000 f848 	bl	800bd74 <_fstat_r>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	dbec      	blt.n	800bcc2 <__swhatbuf_r+0x12>
 800bce8:	9901      	ldr	r1, [sp, #4]
 800bcea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bcee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcf2:	4259      	negs	r1, r3
 800bcf4:	4159      	adcs	r1, r3
 800bcf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcfa:	e7eb      	b.n	800bcd4 <__swhatbuf_r+0x24>

0800bcfc <__smakebuf_r>:
 800bcfc:	898b      	ldrh	r3, [r1, #12]
 800bcfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd00:	079d      	lsls	r5, r3, #30
 800bd02:	4606      	mov	r6, r0
 800bd04:	460c      	mov	r4, r1
 800bd06:	d507      	bpl.n	800bd18 <__smakebuf_r+0x1c>
 800bd08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	6123      	str	r3, [r4, #16]
 800bd10:	2301      	movs	r3, #1
 800bd12:	6163      	str	r3, [r4, #20]
 800bd14:	b002      	add	sp, #8
 800bd16:	bd70      	pop	{r4, r5, r6, pc}
 800bd18:	ab01      	add	r3, sp, #4
 800bd1a:	466a      	mov	r2, sp
 800bd1c:	f7ff ffc8 	bl	800bcb0 <__swhatbuf_r>
 800bd20:	9900      	ldr	r1, [sp, #0]
 800bd22:	4605      	mov	r5, r0
 800bd24:	4630      	mov	r0, r6
 800bd26:	f7fe fced 	bl	800a704 <_malloc_r>
 800bd2a:	b948      	cbnz	r0, 800bd40 <__smakebuf_r+0x44>
 800bd2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd30:	059a      	lsls	r2, r3, #22
 800bd32:	d4ef      	bmi.n	800bd14 <__smakebuf_r+0x18>
 800bd34:	f023 0303 	bic.w	r3, r3, #3
 800bd38:	f043 0302 	orr.w	r3, r3, #2
 800bd3c:	81a3      	strh	r3, [r4, #12]
 800bd3e:	e7e3      	b.n	800bd08 <__smakebuf_r+0xc>
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	6020      	str	r0, [r4, #0]
 800bd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	9b00      	ldr	r3, [sp, #0]
 800bd4c:	6163      	str	r3, [r4, #20]
 800bd4e:	9b01      	ldr	r3, [sp, #4]
 800bd50:	6120      	str	r0, [r4, #16]
 800bd52:	b15b      	cbz	r3, 800bd6c <__smakebuf_r+0x70>
 800bd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f000 f81d 	bl	800bd98 <_isatty_r>
 800bd5e:	b128      	cbz	r0, 800bd6c <__smakebuf_r+0x70>
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	f023 0303 	bic.w	r3, r3, #3
 800bd66:	f043 0301 	orr.w	r3, r3, #1
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	431d      	orrs	r5, r3
 800bd70:	81a5      	strh	r5, [r4, #12]
 800bd72:	e7cf      	b.n	800bd14 <__smakebuf_r+0x18>

0800bd74 <_fstat_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d07      	ldr	r5, [pc, #28]	; (800bd94 <_fstat_r+0x20>)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	4611      	mov	r1, r2
 800bd80:	602b      	str	r3, [r5, #0]
 800bd82:	f7f7 f89a 	bl	8002eba <_fstat>
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	d102      	bne.n	800bd90 <_fstat_r+0x1c>
 800bd8a:	682b      	ldr	r3, [r5, #0]
 800bd8c:	b103      	cbz	r3, 800bd90 <_fstat_r+0x1c>
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	bd38      	pop	{r3, r4, r5, pc}
 800bd92:	bf00      	nop
 800bd94:	20001a94 	.word	0x20001a94

0800bd98 <_isatty_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	4d06      	ldr	r5, [pc, #24]	; (800bdb4 <_isatty_r+0x1c>)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	4604      	mov	r4, r0
 800bda0:	4608      	mov	r0, r1
 800bda2:	602b      	str	r3, [r5, #0]
 800bda4:	f7f7 f899 	bl	8002eda <_isatty>
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	d102      	bne.n	800bdb2 <_isatty_r+0x1a>
 800bdac:	682b      	ldr	r3, [r5, #0]
 800bdae:	b103      	cbz	r3, 800bdb2 <_isatty_r+0x1a>
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}
 800bdb4:	20001a94 	.word	0x20001a94

0800bdb8 <_raise_r>:
 800bdb8:	291f      	cmp	r1, #31
 800bdba:	b538      	push	{r3, r4, r5, lr}
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	460d      	mov	r5, r1
 800bdc0:	d904      	bls.n	800bdcc <_raise_r+0x14>
 800bdc2:	2316      	movs	r3, #22
 800bdc4:	6003      	str	r3, [r0, #0]
 800bdc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bdce:	b112      	cbz	r2, 800bdd6 <_raise_r+0x1e>
 800bdd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdd4:	b94b      	cbnz	r3, 800bdea <_raise_r+0x32>
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f000 f830 	bl	800be3c <_getpid_r>
 800bddc:	462a      	mov	r2, r5
 800bdde:	4601      	mov	r1, r0
 800bde0:	4620      	mov	r0, r4
 800bde2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bde6:	f000 b817 	b.w	800be18 <_kill_r>
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d00a      	beq.n	800be04 <_raise_r+0x4c>
 800bdee:	1c59      	adds	r1, r3, #1
 800bdf0:	d103      	bne.n	800bdfa <_raise_r+0x42>
 800bdf2:	2316      	movs	r3, #22
 800bdf4:	6003      	str	r3, [r0, #0]
 800bdf6:	2001      	movs	r0, #1
 800bdf8:	e7e7      	b.n	800bdca <_raise_r+0x12>
 800bdfa:	2400      	movs	r4, #0
 800bdfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be00:	4628      	mov	r0, r5
 800be02:	4798      	blx	r3
 800be04:	2000      	movs	r0, #0
 800be06:	e7e0      	b.n	800bdca <_raise_r+0x12>

0800be08 <raise>:
 800be08:	4b02      	ldr	r3, [pc, #8]	; (800be14 <raise+0xc>)
 800be0a:	4601      	mov	r1, r0
 800be0c:	6818      	ldr	r0, [r3, #0]
 800be0e:	f7ff bfd3 	b.w	800bdb8 <_raise_r>
 800be12:	bf00      	nop
 800be14:	200014d4 	.word	0x200014d4

0800be18 <_kill_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4d07      	ldr	r5, [pc, #28]	; (800be38 <_kill_r+0x20>)
 800be1c:	2300      	movs	r3, #0
 800be1e:	4604      	mov	r4, r0
 800be20:	4608      	mov	r0, r1
 800be22:	4611      	mov	r1, r2
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	f7f6 ffe9 	bl	8002dfc <_kill>
 800be2a:	1c43      	adds	r3, r0, #1
 800be2c:	d102      	bne.n	800be34 <_kill_r+0x1c>
 800be2e:	682b      	ldr	r3, [r5, #0]
 800be30:	b103      	cbz	r3, 800be34 <_kill_r+0x1c>
 800be32:	6023      	str	r3, [r4, #0]
 800be34:	bd38      	pop	{r3, r4, r5, pc}
 800be36:	bf00      	nop
 800be38:	20001a94 	.word	0x20001a94

0800be3c <_getpid_r>:
 800be3c:	f7f6 bfd6 	b.w	8002dec <_getpid>

0800be40 <atan2>:
 800be40:	f000 b802 	b.w	800be48 <__ieee754_atan2>
 800be44:	0000      	movs	r0, r0
	...

0800be48 <__ieee754_atan2>:
 800be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be4c:	ec57 6b11 	vmov	r6, r7, d1
 800be50:	4273      	negs	r3, r6
 800be52:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bfd0 <__ieee754_atan2+0x188>
 800be56:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800be5a:	4333      	orrs	r3, r6
 800be5c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800be60:	4543      	cmp	r3, r8
 800be62:	ec51 0b10 	vmov	r0, r1, d0
 800be66:	ee11 5a10 	vmov	r5, s2
 800be6a:	d80a      	bhi.n	800be82 <__ieee754_atan2+0x3a>
 800be6c:	4244      	negs	r4, r0
 800be6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be72:	4304      	orrs	r4, r0
 800be74:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800be78:	4544      	cmp	r4, r8
 800be7a:	ee10 9a10 	vmov	r9, s0
 800be7e:	468e      	mov	lr, r1
 800be80:	d907      	bls.n	800be92 <__ieee754_atan2+0x4a>
 800be82:	4632      	mov	r2, r6
 800be84:	463b      	mov	r3, r7
 800be86:	f7f4 fa01 	bl	800028c <__adddf3>
 800be8a:	ec41 0b10 	vmov	d0, r0, r1
 800be8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be92:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800be96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800be9a:	4334      	orrs	r4, r6
 800be9c:	d103      	bne.n	800bea6 <__ieee754_atan2+0x5e>
 800be9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea2:	f000 b8c5 	b.w	800c030 <atan>
 800bea6:	17bc      	asrs	r4, r7, #30
 800bea8:	f004 0402 	and.w	r4, r4, #2
 800beac:	ea53 0909 	orrs.w	r9, r3, r9
 800beb0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800beb4:	d107      	bne.n	800bec6 <__ieee754_atan2+0x7e>
 800beb6:	2c02      	cmp	r4, #2
 800beb8:	d05f      	beq.n	800bf7a <__ieee754_atan2+0x132>
 800beba:	2c03      	cmp	r4, #3
 800bebc:	d1e5      	bne.n	800be8a <__ieee754_atan2+0x42>
 800bebe:	a140      	add	r1, pc, #256	; (adr r1, 800bfc0 <__ieee754_atan2+0x178>)
 800bec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bec4:	e7e1      	b.n	800be8a <__ieee754_atan2+0x42>
 800bec6:	4315      	orrs	r5, r2
 800bec8:	d106      	bne.n	800bed8 <__ieee754_atan2+0x90>
 800beca:	f1be 0f00 	cmp.w	lr, #0
 800bece:	da5f      	bge.n	800bf90 <__ieee754_atan2+0x148>
 800bed0:	a13d      	add	r1, pc, #244	; (adr r1, 800bfc8 <__ieee754_atan2+0x180>)
 800bed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bed6:	e7d8      	b.n	800be8a <__ieee754_atan2+0x42>
 800bed8:	4542      	cmp	r2, r8
 800beda:	d10f      	bne.n	800befc <__ieee754_atan2+0xb4>
 800bedc:	4293      	cmp	r3, r2
 800bede:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bee2:	d107      	bne.n	800bef4 <__ieee754_atan2+0xac>
 800bee4:	2c02      	cmp	r4, #2
 800bee6:	d84c      	bhi.n	800bf82 <__ieee754_atan2+0x13a>
 800bee8:	4b33      	ldr	r3, [pc, #204]	; (800bfb8 <__ieee754_atan2+0x170>)
 800beea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800beee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bef2:	e7ca      	b.n	800be8a <__ieee754_atan2+0x42>
 800bef4:	2c02      	cmp	r4, #2
 800bef6:	d848      	bhi.n	800bf8a <__ieee754_atan2+0x142>
 800bef8:	4b30      	ldr	r3, [pc, #192]	; (800bfbc <__ieee754_atan2+0x174>)
 800befa:	e7f6      	b.n	800beea <__ieee754_atan2+0xa2>
 800befc:	4543      	cmp	r3, r8
 800befe:	d0e4      	beq.n	800beca <__ieee754_atan2+0x82>
 800bf00:	1a9b      	subs	r3, r3, r2
 800bf02:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bf06:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf0a:	da1e      	bge.n	800bf4a <__ieee754_atan2+0x102>
 800bf0c:	2f00      	cmp	r7, #0
 800bf0e:	da01      	bge.n	800bf14 <__ieee754_atan2+0xcc>
 800bf10:	323c      	adds	r2, #60	; 0x3c
 800bf12:	db1e      	blt.n	800bf52 <__ieee754_atan2+0x10a>
 800bf14:	4632      	mov	r2, r6
 800bf16:	463b      	mov	r3, r7
 800bf18:	f7f4 fc98 	bl	800084c <__aeabi_ddiv>
 800bf1c:	ec41 0b10 	vmov	d0, r0, r1
 800bf20:	f000 fa26 	bl	800c370 <fabs>
 800bf24:	f000 f884 	bl	800c030 <atan>
 800bf28:	ec51 0b10 	vmov	r0, r1, d0
 800bf2c:	2c01      	cmp	r4, #1
 800bf2e:	d013      	beq.n	800bf58 <__ieee754_atan2+0x110>
 800bf30:	2c02      	cmp	r4, #2
 800bf32:	d015      	beq.n	800bf60 <__ieee754_atan2+0x118>
 800bf34:	2c00      	cmp	r4, #0
 800bf36:	d0a8      	beq.n	800be8a <__ieee754_atan2+0x42>
 800bf38:	a317      	add	r3, pc, #92	; (adr r3, 800bf98 <__ieee754_atan2+0x150>)
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	f7f4 f9a3 	bl	8000288 <__aeabi_dsub>
 800bf42:	a317      	add	r3, pc, #92	; (adr r3, 800bfa0 <__ieee754_atan2+0x158>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	e014      	b.n	800bf74 <__ieee754_atan2+0x12c>
 800bf4a:	a117      	add	r1, pc, #92	; (adr r1, 800bfa8 <__ieee754_atan2+0x160>)
 800bf4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf50:	e7ec      	b.n	800bf2c <__ieee754_atan2+0xe4>
 800bf52:	2000      	movs	r0, #0
 800bf54:	2100      	movs	r1, #0
 800bf56:	e7e9      	b.n	800bf2c <__ieee754_atan2+0xe4>
 800bf58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	e794      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf60:	a30d      	add	r3, pc, #52	; (adr r3, 800bf98 <__ieee754_atan2+0x150>)
 800bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf66:	f7f4 f98f 	bl	8000288 <__aeabi_dsub>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	a10c      	add	r1, pc, #48	; (adr r1, 800bfa0 <__ieee754_atan2+0x158>)
 800bf70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf74:	f7f4 f988 	bl	8000288 <__aeabi_dsub>
 800bf78:	e787      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf7a:	a109      	add	r1, pc, #36	; (adr r1, 800bfa0 <__ieee754_atan2+0x158>)
 800bf7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf80:	e783      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf82:	a10b      	add	r1, pc, #44	; (adr r1, 800bfb0 <__ieee754_atan2+0x168>)
 800bf84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf88:	e77f      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	e77c      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf90:	a105      	add	r1, pc, #20	; (adr r1, 800bfa8 <__ieee754_atan2+0x160>)
 800bf92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf96:	e778      	b.n	800be8a <__ieee754_atan2+0x42>
 800bf98:	33145c07 	.word	0x33145c07
 800bf9c:	3ca1a626 	.word	0x3ca1a626
 800bfa0:	54442d18 	.word	0x54442d18
 800bfa4:	400921fb 	.word	0x400921fb
 800bfa8:	54442d18 	.word	0x54442d18
 800bfac:	3ff921fb 	.word	0x3ff921fb
 800bfb0:	54442d18 	.word	0x54442d18
 800bfb4:	3fe921fb 	.word	0x3fe921fb
 800bfb8:	0808ab10 	.word	0x0808ab10
 800bfbc:	0808ab28 	.word	0x0808ab28
 800bfc0:	54442d18 	.word	0x54442d18
 800bfc4:	c00921fb 	.word	0xc00921fb
 800bfc8:	54442d18 	.word	0x54442d18
 800bfcc:	bff921fb 	.word	0xbff921fb
 800bfd0:	7ff00000 	.word	0x7ff00000

0800bfd4 <sqrt>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	ed2d 8b02 	vpush	{d8}
 800bfda:	ec55 4b10 	vmov	r4, r5, d0
 800bfde:	f000 f9d1 	bl	800c384 <__ieee754_sqrt>
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	462b      	mov	r3, r5
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	4629      	mov	r1, r5
 800bfea:	eeb0 8a40 	vmov.f32	s16, s0
 800bfee:	eef0 8a60 	vmov.f32	s17, s1
 800bff2:	f7f4 fd9b 	bl	8000b2c <__aeabi_dcmpun>
 800bff6:	b990      	cbnz	r0, 800c01e <sqrt+0x4a>
 800bff8:	2200      	movs	r2, #0
 800bffa:	2300      	movs	r3, #0
 800bffc:	4620      	mov	r0, r4
 800bffe:	4629      	mov	r1, r5
 800c000:	f7f4 fd6c 	bl	8000adc <__aeabi_dcmplt>
 800c004:	b158      	cbz	r0, 800c01e <sqrt+0x4a>
 800c006:	f7fd fe43 	bl	8009c90 <__errno>
 800c00a:	2321      	movs	r3, #33	; 0x21
 800c00c:	6003      	str	r3, [r0, #0]
 800c00e:	2200      	movs	r2, #0
 800c010:	2300      	movs	r3, #0
 800c012:	4610      	mov	r0, r2
 800c014:	4619      	mov	r1, r3
 800c016:	f7f4 fc19 	bl	800084c <__aeabi_ddiv>
 800c01a:	ec41 0b18 	vmov	d8, r0, r1
 800c01e:	eeb0 0a48 	vmov.f32	s0, s16
 800c022:	eef0 0a68 	vmov.f32	s1, s17
 800c026:	ecbd 8b02 	vpop	{d8}
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	0000      	movs	r0, r0
	...

0800c030 <atan>:
 800c030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c034:	ec55 4b10 	vmov	r4, r5, d0
 800c038:	4bc3      	ldr	r3, [pc, #780]	; (800c348 <atan+0x318>)
 800c03a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c03e:	429e      	cmp	r6, r3
 800c040:	46ab      	mov	fp, r5
 800c042:	dd18      	ble.n	800c076 <atan+0x46>
 800c044:	4bc1      	ldr	r3, [pc, #772]	; (800c34c <atan+0x31c>)
 800c046:	429e      	cmp	r6, r3
 800c048:	dc01      	bgt.n	800c04e <atan+0x1e>
 800c04a:	d109      	bne.n	800c060 <atan+0x30>
 800c04c:	b144      	cbz	r4, 800c060 <atan+0x30>
 800c04e:	4622      	mov	r2, r4
 800c050:	462b      	mov	r3, r5
 800c052:	4620      	mov	r0, r4
 800c054:	4629      	mov	r1, r5
 800c056:	f7f4 f919 	bl	800028c <__adddf3>
 800c05a:	4604      	mov	r4, r0
 800c05c:	460d      	mov	r5, r1
 800c05e:	e006      	b.n	800c06e <atan+0x3e>
 800c060:	f1bb 0f00 	cmp.w	fp, #0
 800c064:	f300 8131 	bgt.w	800c2ca <atan+0x29a>
 800c068:	a59b      	add	r5, pc, #620	; (adr r5, 800c2d8 <atan+0x2a8>)
 800c06a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c06e:	ec45 4b10 	vmov	d0, r4, r5
 800c072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c076:	4bb6      	ldr	r3, [pc, #728]	; (800c350 <atan+0x320>)
 800c078:	429e      	cmp	r6, r3
 800c07a:	dc14      	bgt.n	800c0a6 <atan+0x76>
 800c07c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c080:	429e      	cmp	r6, r3
 800c082:	dc0d      	bgt.n	800c0a0 <atan+0x70>
 800c084:	a396      	add	r3, pc, #600	; (adr r3, 800c2e0 <atan+0x2b0>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	ee10 0a10 	vmov	r0, s0
 800c08e:	4629      	mov	r1, r5
 800c090:	f7f4 f8fc 	bl	800028c <__adddf3>
 800c094:	4baf      	ldr	r3, [pc, #700]	; (800c354 <atan+0x324>)
 800c096:	2200      	movs	r2, #0
 800c098:	f7f4 fd3e 	bl	8000b18 <__aeabi_dcmpgt>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d1e6      	bne.n	800c06e <atan+0x3e>
 800c0a0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c0a4:	e02b      	b.n	800c0fe <atan+0xce>
 800c0a6:	f000 f963 	bl	800c370 <fabs>
 800c0aa:	4bab      	ldr	r3, [pc, #684]	; (800c358 <atan+0x328>)
 800c0ac:	429e      	cmp	r6, r3
 800c0ae:	ec55 4b10 	vmov	r4, r5, d0
 800c0b2:	f300 80bf 	bgt.w	800c234 <atan+0x204>
 800c0b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c0ba:	429e      	cmp	r6, r3
 800c0bc:	f300 80a0 	bgt.w	800c200 <atan+0x1d0>
 800c0c0:	ee10 2a10 	vmov	r2, s0
 800c0c4:	ee10 0a10 	vmov	r0, s0
 800c0c8:	462b      	mov	r3, r5
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	f7f4 f8de 	bl	800028c <__adddf3>
 800c0d0:	4ba0      	ldr	r3, [pc, #640]	; (800c354 <atan+0x324>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f7f4 f8d8 	bl	8000288 <__aeabi_dsub>
 800c0d8:	2200      	movs	r2, #0
 800c0da:	4606      	mov	r6, r0
 800c0dc:	460f      	mov	r7, r1
 800c0de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7f4 f8d1 	bl	800028c <__adddf3>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	f7f4 fbab 	bl	800084c <__aeabi_ddiv>
 800c0f6:	f04f 0a00 	mov.w	sl, #0
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	460d      	mov	r5, r1
 800c0fe:	4622      	mov	r2, r4
 800c100:	462b      	mov	r3, r5
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	f7f4 fa77 	bl	80005f8 <__aeabi_dmul>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	4680      	mov	r8, r0
 800c110:	4689      	mov	r9, r1
 800c112:	f7f4 fa71 	bl	80005f8 <__aeabi_dmul>
 800c116:	a374      	add	r3, pc, #464	; (adr r3, 800c2e8 <atan+0x2b8>)
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	4606      	mov	r6, r0
 800c11e:	460f      	mov	r7, r1
 800c120:	f7f4 fa6a 	bl	80005f8 <__aeabi_dmul>
 800c124:	a372      	add	r3, pc, #456	; (adr r3, 800c2f0 <atan+0x2c0>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f7f4 f8af 	bl	800028c <__adddf3>
 800c12e:	4632      	mov	r2, r6
 800c130:	463b      	mov	r3, r7
 800c132:	f7f4 fa61 	bl	80005f8 <__aeabi_dmul>
 800c136:	a370      	add	r3, pc, #448	; (adr r3, 800c2f8 <atan+0x2c8>)
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	f7f4 f8a6 	bl	800028c <__adddf3>
 800c140:	4632      	mov	r2, r6
 800c142:	463b      	mov	r3, r7
 800c144:	f7f4 fa58 	bl	80005f8 <__aeabi_dmul>
 800c148:	a36d      	add	r3, pc, #436	; (adr r3, 800c300 <atan+0x2d0>)
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	f7f4 f89d 	bl	800028c <__adddf3>
 800c152:	4632      	mov	r2, r6
 800c154:	463b      	mov	r3, r7
 800c156:	f7f4 fa4f 	bl	80005f8 <__aeabi_dmul>
 800c15a:	a36b      	add	r3, pc, #428	; (adr r3, 800c308 <atan+0x2d8>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f4 f894 	bl	800028c <__adddf3>
 800c164:	4632      	mov	r2, r6
 800c166:	463b      	mov	r3, r7
 800c168:	f7f4 fa46 	bl	80005f8 <__aeabi_dmul>
 800c16c:	a368      	add	r3, pc, #416	; (adr r3, 800c310 <atan+0x2e0>)
 800c16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c172:	f7f4 f88b 	bl	800028c <__adddf3>
 800c176:	4642      	mov	r2, r8
 800c178:	464b      	mov	r3, r9
 800c17a:	f7f4 fa3d 	bl	80005f8 <__aeabi_dmul>
 800c17e:	a366      	add	r3, pc, #408	; (adr r3, 800c318 <atan+0x2e8>)
 800c180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c184:	4680      	mov	r8, r0
 800c186:	4689      	mov	r9, r1
 800c188:	4630      	mov	r0, r6
 800c18a:	4639      	mov	r1, r7
 800c18c:	f7f4 fa34 	bl	80005f8 <__aeabi_dmul>
 800c190:	a363      	add	r3, pc, #396	; (adr r3, 800c320 <atan+0x2f0>)
 800c192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c196:	f7f4 f877 	bl	8000288 <__aeabi_dsub>
 800c19a:	4632      	mov	r2, r6
 800c19c:	463b      	mov	r3, r7
 800c19e:	f7f4 fa2b 	bl	80005f8 <__aeabi_dmul>
 800c1a2:	a361      	add	r3, pc, #388	; (adr r3, 800c328 <atan+0x2f8>)
 800c1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a8:	f7f4 f86e 	bl	8000288 <__aeabi_dsub>
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	463b      	mov	r3, r7
 800c1b0:	f7f4 fa22 	bl	80005f8 <__aeabi_dmul>
 800c1b4:	a35e      	add	r3, pc, #376	; (adr r3, 800c330 <atan+0x300>)
 800c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ba:	f7f4 f865 	bl	8000288 <__aeabi_dsub>
 800c1be:	4632      	mov	r2, r6
 800c1c0:	463b      	mov	r3, r7
 800c1c2:	f7f4 fa19 	bl	80005f8 <__aeabi_dmul>
 800c1c6:	a35c      	add	r3, pc, #368	; (adr r3, 800c338 <atan+0x308>)
 800c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1cc:	f7f4 f85c 	bl	8000288 <__aeabi_dsub>
 800c1d0:	4632      	mov	r2, r6
 800c1d2:	463b      	mov	r3, r7
 800c1d4:	f7f4 fa10 	bl	80005f8 <__aeabi_dmul>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	4640      	mov	r0, r8
 800c1de:	4649      	mov	r1, r9
 800c1e0:	f7f4 f854 	bl	800028c <__adddf3>
 800c1e4:	4622      	mov	r2, r4
 800c1e6:	462b      	mov	r3, r5
 800c1e8:	f7f4 fa06 	bl	80005f8 <__aeabi_dmul>
 800c1ec:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	d14b      	bne.n	800c28e <atan+0x25e>
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7f4 f845 	bl	8000288 <__aeabi_dsub>
 800c1fe:	e72c      	b.n	800c05a <atan+0x2a>
 800c200:	ee10 0a10 	vmov	r0, s0
 800c204:	4b53      	ldr	r3, [pc, #332]	; (800c354 <atan+0x324>)
 800c206:	2200      	movs	r2, #0
 800c208:	4629      	mov	r1, r5
 800c20a:	f7f4 f83d 	bl	8000288 <__aeabi_dsub>
 800c20e:	4b51      	ldr	r3, [pc, #324]	; (800c354 <atan+0x324>)
 800c210:	4606      	mov	r6, r0
 800c212:	460f      	mov	r7, r1
 800c214:	2200      	movs	r2, #0
 800c216:	4620      	mov	r0, r4
 800c218:	4629      	mov	r1, r5
 800c21a:	f7f4 f837 	bl	800028c <__adddf3>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	4630      	mov	r0, r6
 800c224:	4639      	mov	r1, r7
 800c226:	f7f4 fb11 	bl	800084c <__aeabi_ddiv>
 800c22a:	f04f 0a01 	mov.w	sl, #1
 800c22e:	4604      	mov	r4, r0
 800c230:	460d      	mov	r5, r1
 800c232:	e764      	b.n	800c0fe <atan+0xce>
 800c234:	4b49      	ldr	r3, [pc, #292]	; (800c35c <atan+0x32c>)
 800c236:	429e      	cmp	r6, r3
 800c238:	da1d      	bge.n	800c276 <atan+0x246>
 800c23a:	ee10 0a10 	vmov	r0, s0
 800c23e:	4b48      	ldr	r3, [pc, #288]	; (800c360 <atan+0x330>)
 800c240:	2200      	movs	r2, #0
 800c242:	4629      	mov	r1, r5
 800c244:	f7f4 f820 	bl	8000288 <__aeabi_dsub>
 800c248:	4b45      	ldr	r3, [pc, #276]	; (800c360 <atan+0x330>)
 800c24a:	4606      	mov	r6, r0
 800c24c:	460f      	mov	r7, r1
 800c24e:	2200      	movs	r2, #0
 800c250:	4620      	mov	r0, r4
 800c252:	4629      	mov	r1, r5
 800c254:	f7f4 f9d0 	bl	80005f8 <__aeabi_dmul>
 800c258:	4b3e      	ldr	r3, [pc, #248]	; (800c354 <atan+0x324>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	f7f4 f816 	bl	800028c <__adddf3>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4630      	mov	r0, r6
 800c266:	4639      	mov	r1, r7
 800c268:	f7f4 faf0 	bl	800084c <__aeabi_ddiv>
 800c26c:	f04f 0a02 	mov.w	sl, #2
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	e743      	b.n	800c0fe <atan+0xce>
 800c276:	462b      	mov	r3, r5
 800c278:	ee10 2a10 	vmov	r2, s0
 800c27c:	4939      	ldr	r1, [pc, #228]	; (800c364 <atan+0x334>)
 800c27e:	2000      	movs	r0, #0
 800c280:	f7f4 fae4 	bl	800084c <__aeabi_ddiv>
 800c284:	f04f 0a03 	mov.w	sl, #3
 800c288:	4604      	mov	r4, r0
 800c28a:	460d      	mov	r5, r1
 800c28c:	e737      	b.n	800c0fe <atan+0xce>
 800c28e:	4b36      	ldr	r3, [pc, #216]	; (800c368 <atan+0x338>)
 800c290:	4e36      	ldr	r6, [pc, #216]	; (800c36c <atan+0x33c>)
 800c292:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	f7f3 fff5 	bl	8000288 <__aeabi_dsub>
 800c29e:	4622      	mov	r2, r4
 800c2a0:	462b      	mov	r3, r5
 800c2a2:	f7f3 fff1 	bl	8000288 <__aeabi_dsub>
 800c2a6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c2b2:	f7f3 ffe9 	bl	8000288 <__aeabi_dsub>
 800c2b6:	f1bb 0f00 	cmp.w	fp, #0
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	460d      	mov	r5, r1
 800c2be:	f6bf aed6 	bge.w	800c06e <atan+0x3e>
 800c2c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2c6:	461d      	mov	r5, r3
 800c2c8:	e6d1      	b.n	800c06e <atan+0x3e>
 800c2ca:	a51d      	add	r5, pc, #116	; (adr r5, 800c340 <atan+0x310>)
 800c2cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2d0:	e6cd      	b.n	800c06e <atan+0x3e>
 800c2d2:	bf00      	nop
 800c2d4:	f3af 8000 	nop.w
 800c2d8:	54442d18 	.word	0x54442d18
 800c2dc:	bff921fb 	.word	0xbff921fb
 800c2e0:	8800759c 	.word	0x8800759c
 800c2e4:	7e37e43c 	.word	0x7e37e43c
 800c2e8:	e322da11 	.word	0xe322da11
 800c2ec:	3f90ad3a 	.word	0x3f90ad3a
 800c2f0:	24760deb 	.word	0x24760deb
 800c2f4:	3fa97b4b 	.word	0x3fa97b4b
 800c2f8:	a0d03d51 	.word	0xa0d03d51
 800c2fc:	3fb10d66 	.word	0x3fb10d66
 800c300:	c54c206e 	.word	0xc54c206e
 800c304:	3fb745cd 	.word	0x3fb745cd
 800c308:	920083ff 	.word	0x920083ff
 800c30c:	3fc24924 	.word	0x3fc24924
 800c310:	5555550d 	.word	0x5555550d
 800c314:	3fd55555 	.word	0x3fd55555
 800c318:	2c6a6c2f 	.word	0x2c6a6c2f
 800c31c:	bfa2b444 	.word	0xbfa2b444
 800c320:	52defd9a 	.word	0x52defd9a
 800c324:	3fadde2d 	.word	0x3fadde2d
 800c328:	af749a6d 	.word	0xaf749a6d
 800c32c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c330:	fe231671 	.word	0xfe231671
 800c334:	3fbc71c6 	.word	0x3fbc71c6
 800c338:	9998ebc4 	.word	0x9998ebc4
 800c33c:	3fc99999 	.word	0x3fc99999
 800c340:	54442d18 	.word	0x54442d18
 800c344:	3ff921fb 	.word	0x3ff921fb
 800c348:	440fffff 	.word	0x440fffff
 800c34c:	7ff00000 	.word	0x7ff00000
 800c350:	3fdbffff 	.word	0x3fdbffff
 800c354:	3ff00000 	.word	0x3ff00000
 800c358:	3ff2ffff 	.word	0x3ff2ffff
 800c35c:	40038000 	.word	0x40038000
 800c360:	3ff80000 	.word	0x3ff80000
 800c364:	bff00000 	.word	0xbff00000
 800c368:	0808ab60 	.word	0x0808ab60
 800c36c:	0808ab40 	.word	0x0808ab40

0800c370 <fabs>:
 800c370:	ec51 0b10 	vmov	r0, r1, d0
 800c374:	ee10 2a10 	vmov	r2, s0
 800c378:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c37c:	ec43 2b10 	vmov	d0, r2, r3
 800c380:	4770      	bx	lr
	...

0800c384 <__ieee754_sqrt>:
 800c384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c388:	ec55 4b10 	vmov	r4, r5, d0
 800c38c:	4e67      	ldr	r6, [pc, #412]	; (800c52c <__ieee754_sqrt+0x1a8>)
 800c38e:	43ae      	bics	r6, r5
 800c390:	ee10 0a10 	vmov	r0, s0
 800c394:	ee10 2a10 	vmov	r2, s0
 800c398:	4629      	mov	r1, r5
 800c39a:	462b      	mov	r3, r5
 800c39c:	d10d      	bne.n	800c3ba <__ieee754_sqrt+0x36>
 800c39e:	f7f4 f92b 	bl	80005f8 <__aeabi_dmul>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	f7f3 ff6f 	bl	800028c <__adddf3>
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	460d      	mov	r5, r1
 800c3b2:	ec45 4b10 	vmov	d0, r4, r5
 800c3b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ba:	2d00      	cmp	r5, #0
 800c3bc:	dc0b      	bgt.n	800c3d6 <__ieee754_sqrt+0x52>
 800c3be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c3c2:	4326      	orrs	r6, r4
 800c3c4:	d0f5      	beq.n	800c3b2 <__ieee754_sqrt+0x2e>
 800c3c6:	b135      	cbz	r5, 800c3d6 <__ieee754_sqrt+0x52>
 800c3c8:	f7f3 ff5e 	bl	8000288 <__aeabi_dsub>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	f7f4 fa3c 	bl	800084c <__aeabi_ddiv>
 800c3d4:	e7eb      	b.n	800c3ae <__ieee754_sqrt+0x2a>
 800c3d6:	1509      	asrs	r1, r1, #20
 800c3d8:	f000 808d 	beq.w	800c4f6 <__ieee754_sqrt+0x172>
 800c3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c3e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3e8:	07c9      	lsls	r1, r1, #31
 800c3ea:	bf5c      	itt	pl
 800c3ec:	005b      	lslpl	r3, r3, #1
 800c3ee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c3f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c3f6:	bf58      	it	pl
 800c3f8:	0052      	lslpl	r2, r2, #1
 800c3fa:	2500      	movs	r5, #0
 800c3fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c400:	1076      	asrs	r6, r6, #1
 800c402:	0052      	lsls	r2, r2, #1
 800c404:	f04f 0e16 	mov.w	lr, #22
 800c408:	46ac      	mov	ip, r5
 800c40a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c40e:	eb0c 0001 	add.w	r0, ip, r1
 800c412:	4298      	cmp	r0, r3
 800c414:	bfde      	ittt	le
 800c416:	1a1b      	suble	r3, r3, r0
 800c418:	eb00 0c01 	addle.w	ip, r0, r1
 800c41c:	186d      	addle	r5, r5, r1
 800c41e:	005b      	lsls	r3, r3, #1
 800c420:	f1be 0e01 	subs.w	lr, lr, #1
 800c424:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c428:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c42c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c430:	d1ed      	bne.n	800c40e <__ieee754_sqrt+0x8a>
 800c432:	4674      	mov	r4, lr
 800c434:	2720      	movs	r7, #32
 800c436:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c43a:	4563      	cmp	r3, ip
 800c43c:	eb01 000e 	add.w	r0, r1, lr
 800c440:	dc02      	bgt.n	800c448 <__ieee754_sqrt+0xc4>
 800c442:	d113      	bne.n	800c46c <__ieee754_sqrt+0xe8>
 800c444:	4290      	cmp	r0, r2
 800c446:	d811      	bhi.n	800c46c <__ieee754_sqrt+0xe8>
 800c448:	2800      	cmp	r0, #0
 800c44a:	eb00 0e01 	add.w	lr, r0, r1
 800c44e:	da57      	bge.n	800c500 <__ieee754_sqrt+0x17c>
 800c450:	f1be 0f00 	cmp.w	lr, #0
 800c454:	db54      	blt.n	800c500 <__ieee754_sqrt+0x17c>
 800c456:	f10c 0801 	add.w	r8, ip, #1
 800c45a:	eba3 030c 	sub.w	r3, r3, ip
 800c45e:	4290      	cmp	r0, r2
 800c460:	bf88      	it	hi
 800c462:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800c466:	1a12      	subs	r2, r2, r0
 800c468:	440c      	add	r4, r1
 800c46a:	46c4      	mov	ip, r8
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	3f01      	subs	r7, #1
 800c470:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c474:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c478:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c47c:	d1dd      	bne.n	800c43a <__ieee754_sqrt+0xb6>
 800c47e:	4313      	orrs	r3, r2
 800c480:	d01b      	beq.n	800c4ba <__ieee754_sqrt+0x136>
 800c482:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c530 <__ieee754_sqrt+0x1ac>
 800c486:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c534 <__ieee754_sqrt+0x1b0>
 800c48a:	e9da 0100 	ldrd	r0, r1, [sl]
 800c48e:	e9db 2300 	ldrd	r2, r3, [fp]
 800c492:	f7f3 fef9 	bl	8000288 <__aeabi_dsub>
 800c496:	e9da 8900 	ldrd	r8, r9, [sl]
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4640      	mov	r0, r8
 800c4a0:	4649      	mov	r1, r9
 800c4a2:	f7f4 fb25 	bl	8000af0 <__aeabi_dcmple>
 800c4a6:	b140      	cbz	r0, 800c4ba <__ieee754_sqrt+0x136>
 800c4a8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800c4ac:	e9da 0100 	ldrd	r0, r1, [sl]
 800c4b0:	e9db 2300 	ldrd	r2, r3, [fp]
 800c4b4:	d126      	bne.n	800c504 <__ieee754_sqrt+0x180>
 800c4b6:	3501      	adds	r5, #1
 800c4b8:	463c      	mov	r4, r7
 800c4ba:	106a      	asrs	r2, r5, #1
 800c4bc:	0863      	lsrs	r3, r4, #1
 800c4be:	07e9      	lsls	r1, r5, #31
 800c4c0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c4c4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c4c8:	bf48      	it	mi
 800c4ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c4ce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c4d2:	461c      	mov	r4, r3
 800c4d4:	e76d      	b.n	800c3b2 <__ieee754_sqrt+0x2e>
 800c4d6:	0ad3      	lsrs	r3, r2, #11
 800c4d8:	3815      	subs	r0, #21
 800c4da:	0552      	lsls	r2, r2, #21
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d0fa      	beq.n	800c4d6 <__ieee754_sqrt+0x152>
 800c4e0:	02dc      	lsls	r4, r3, #11
 800c4e2:	d50a      	bpl.n	800c4fa <__ieee754_sqrt+0x176>
 800c4e4:	f1c1 0420 	rsb	r4, r1, #32
 800c4e8:	fa22 f404 	lsr.w	r4, r2, r4
 800c4ec:	1e4d      	subs	r5, r1, #1
 800c4ee:	408a      	lsls	r2, r1
 800c4f0:	4323      	orrs	r3, r4
 800c4f2:	1b41      	subs	r1, r0, r5
 800c4f4:	e772      	b.n	800c3dc <__ieee754_sqrt+0x58>
 800c4f6:	4608      	mov	r0, r1
 800c4f8:	e7f0      	b.n	800c4dc <__ieee754_sqrt+0x158>
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	3101      	adds	r1, #1
 800c4fe:	e7ef      	b.n	800c4e0 <__ieee754_sqrt+0x15c>
 800c500:	46e0      	mov	r8, ip
 800c502:	e7aa      	b.n	800c45a <__ieee754_sqrt+0xd6>
 800c504:	f7f3 fec2 	bl	800028c <__adddf3>
 800c508:	e9da 8900 	ldrd	r8, r9, [sl]
 800c50c:	4602      	mov	r2, r0
 800c50e:	460b      	mov	r3, r1
 800c510:	4640      	mov	r0, r8
 800c512:	4649      	mov	r1, r9
 800c514:	f7f4 fae2 	bl	8000adc <__aeabi_dcmplt>
 800c518:	b120      	cbz	r0, 800c524 <__ieee754_sqrt+0x1a0>
 800c51a:	1ca0      	adds	r0, r4, #2
 800c51c:	bf08      	it	eq
 800c51e:	3501      	addeq	r5, #1
 800c520:	3402      	adds	r4, #2
 800c522:	e7ca      	b.n	800c4ba <__ieee754_sqrt+0x136>
 800c524:	3401      	adds	r4, #1
 800c526:	f024 0401 	bic.w	r4, r4, #1
 800c52a:	e7c6      	b.n	800c4ba <__ieee754_sqrt+0x136>
 800c52c:	7ff00000 	.word	0x7ff00000
 800c530:	200014d8 	.word	0x200014d8
 800c534:	200014e0 	.word	0x200014e0

0800c538 <_init>:
 800c538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53a:	bf00      	nop
 800c53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53e:	bc08      	pop	{r3}
 800c540:	469e      	mov	lr, r3
 800c542:	4770      	bx	lr

0800c544 <_fini>:
 800c544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c546:	bf00      	nop
 800c548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54a:	bc08      	pop	{r3}
 800c54c:	469e      	mov	lr, r3
 800c54e:	4770      	bx	lr
